[{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":"background","dir":"","previous_headings":"","what":"Background","title":null,"text":"Humans computers commonly interact many different ways, keyboard mouse, touch screen interfaces, using speech recognition systems. widely used way interact personal computers called graphical user interface (GUI). GUI, give instructions clicking mouse using menu-driven interactions. visual aid GUI makes intuitive learn, way delivering instructions computer scales poorly. Imagine following task: literature search, copy third line one thousand text files one thousand different directories paste single file. Using GUI, clicking desk several hours, potentially also commit error process completing repetitive task. take advantage Unix shell. Unix shell command-line interface (CLI) scripting language, allowing repetitive tasks done automatically fast. proper commands, shell can repeat tasks without modification many times want. Using shell, task literature example can accomplished seconds.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":"the-shell","dir":"","previous_headings":"","what":"The Shell","title":null,"text":"shell program users can type commands. shell, ’s possible invoke complicated programs like climate modeling software simple commands create empty directory one line code. popular Unix shell Bash (Bourne SHell — -called ’s derived shell written Stephen Bourne). Bash default shell modern implementations Unix packages provide Unix-like tools Windows. Note ‘Git Bash’ piece software enables Windows users use Bash like interface interacting Git. Using shell take effort time learn. GUI presents choices select, CLI choices automatically presented , must learn commands like new vocabulary language ’re studying. However, unlike spoken language, small number “words” (.e. commands) gets long way, ’ll cover essential today. grammar shell allows combine existing tools powerful pipelines handle large volumes data automatically. Sequences commands can written script, improving reproducibility workflows. addition, command line often easiest way interact remote machines supercomputers. Familiarity shell near essential run variety specialized tools resources including high-performance computing systems. clusters cloud computing systems become popular scientific data crunching, able interact shell becoming necessary skill. can build command-line skills covered tackle wide range scientific questions computational challenges. Let’s get started. shell first opened, presented prompt, indicating shell waiting input. shell typically uses $ prompt, may use different symbol. examples lesson, ’ll show prompt $. importantly, type prompt typing commands. type command follows prompt. rule applies lessons lessons sources. Also note type command, press Enter key execute . prompt followed text cursor, character indicates position typing appear. cursor usually flashing solid block, can also underscore pipe. may seen text editor program, example. Note prompt might look little different. particular, popular shell environments default put user name host name $. prompt might look like, e.g.: prompt might even include . worry prompt just short $. lesson depend additional information also get way. important item focus $ character see later . let’s try first command, ls, short listing. command list contents current directory:","code":"$ nelle@localhost $ $ ls Desktop     Downloads   Movies      Pictures Documents   Library     Music       Public"},{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":"command-not-found","dir":"","previous_headings":"","what":"Command not found","title":null,"text":"shell can’t find program whose name command typed, print error message : might happen command mis-typed program corresponding command installed.","code":"$ ks ks: command not found"},{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"shell program whose primary purpose read commands run programs. lesson uses Bash, default shell many implementations Unix. Programs can run Bash entering commands command-line prompt. shell’s main advantages high action--keystroke ratio, support automating repetitive tasks, capacity access networked machines. significant challenge using shell can knowing commands need run run .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"home-directory-variation","dir":"","previous_headings":"","what":"Home Directory Variation","title":null,"text":"home directory path look different different operating systems. Linux, may look like /home/nelle, Windows, similar C:\\Documents Settings\\nelle C:\\Users\\nelle. (Note may look slightly different different versions Windows.) future examples, ’ve used Mac output default - Linux Windows output may differ slightly generally similar. also assume pwd command returns user’s home directory. pwd returns something different, may need navigate using cd commands lesson work written. See Exploring Directories details cd command.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"slashes","dir":"","previous_headings":"","what":"Slashes","title":null,"text":"Notice two meanings / character. appears front file directory name, refers root directory. appears inside path, ’s just separator.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"clearing-your-terminal","dir":"","previous_headings":"","what":"Clearing your terminal","title":null,"text":"screen gets cluttered, can clear terminal using clear command. can still access previous commands using ↑ ↓ move line--line, scrolling terminal.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":null,"text":"ls lots options. two common ways find use command options accepts — depending environment, might find one ways works: can pass --help option command (available Linux Git Bash), example: can read manual man (available Linux macOS): ’ll describe ways next.","code":"$ ls --help $ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"help-for-built-in-commands","dir":"","previous_headings":"","what":"Help for built-in commands","title":null,"text":"commands built Bash shell, rather existing separate programs filesystem. One example cd (change directory) command. get message like manual entry cd, try help cd instead. help command get usage information Bash built-ins.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"the---help-option","dir":"","previous_headings":"Getting help","what":"The --help option","title":null,"text":"bash commands programs people written run within bash, support --help option displays information use command program.","code":"$ ls --help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.  Mandatory arguments to long options are mandatory for short options, too.   -a, --all                  do not ignore entries starting with .   -A, --almost-all           do not list implied . and ..       --author               with -l, print the author of each file   -b, --escape               print C-style escapes for nongraphic characters       --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,                                '--block-size=M' prints sizes in units of                                1,048,576 bytes; see SIZE format below   -B, --ignore-backups       do not list implied entries ending with ~   -c                         with -lt: sort by, and show, ctime (time of last                                modification of file status information);                                with -l: show ctime and sort by name;                                otherwise: sort by ctime, newest first   -C                         list entries by columns       --color[=WHEN]         colorize the output; WHEN can be 'always' (default                                if omitted), 'auto', or 'never'; more info below   -d, --directory            list directories themselves, not their contents   -D, --dired                generate output designed for Emacs' dired mode   -f                         do not sort, enable -aU, disable -ls --color   -F, --classify             append indicator (one of */=>@|) to entries ...        ...        ..."},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"unsupported-command-line-options","dir":"","previous_headings":"","what":"Unsupported command-line options","title":null,"text":"try use option supported, ls commands usually print error message similar :","code":"$ ls -j ls: invalid option -- 'j' Try 'ls --help' for more information."},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"the-man-command","dir":"","previous_headings":"Getting help","what":"The man command","title":null,"text":"way learn ls type command turn terminal page description ls command options. navigate man pages, may use ↑ ↓ move line--line, try B Spacebar skip full page. search character word man pages, use / followed character word searching . Sometimes search result multiple hits. , can move hits using N (moving forward) Shift+N (moving backward). quit man pages, press Q. -l option makes ls use long listing format, showing file/directory names also additional information, file size time last modification. use -h option -l option, makes file size ‘human readable’, .e. displaying something like 5.3K instead 5369. recently changed file listed last using -rt. can useful finding recent edits checking see new output file written.","code":"$ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"manual-pages-on-the-web","dir":"","previous_headings":"","what":"Manual pages on the web","title":null,"text":"course, third way access help commands: searching internet via web browser. using internet search, including phrase unix man page search query help find relevant results. GNU provides links manuals including core GNU utilities, covers many commands introduced within lesson.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"exploring-more-ls-options","dir":"","previous_headings":"","what":"Exploring More ls Options","title":null,"text":"can also use two options time. command ls used -l option? use -l -h option? output properties cover lesson (file permissions ownership), rest useful nevertheless.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"listing-in-reverse-chronological-order","dir":"","previous_headings":"","what":"Listing in Reverse Chronological Order","title":null,"text":"default, ls lists contents directory alphabetical order name. command ls -t lists items time last change instead alphabetically. command ls -r lists contents directory reverse order. file displayed last combine -t -r options? Hint: may need use -l option see last changed dates.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"exploring-other-directories","dir":"","previous_headings":"","what":"Exploring Other Directories","title":null,"text":"can use ls current working directory, can use list contents different directory. Let’s take look Desktop directory running ls -F Desktop, .e., command ls -F option argument Desktop. argument Desktop tells ls want listing something current working directory: Note directory named Desktop exist current working directory, command return error. Typically, Desktop directory exists home directory, assume current working directory bash shell. output list files sub-directories Desktop directory, including shell-lesson-data directory downloaded setup lesson. (systems, contents Desktop directory shell show icons graphical user interface behind open windows. See case .) Organizing things hierarchically helps us keep track work. ’s possible put hundreds files home directory just ’s possible pile hundreds printed papers desk, ’s much easier find things ’ve organized sensibly-named subdirectories. Now know shell-lesson-data directory located Desktop directory, can two things. First, using strategy , can look contents passing directory name ls: Second, can actually change location different directory, longer located home directory. command change locations cd followed directory name change working directory. cd stands ‘change directory’, bit misleading. command doesn’t change directory; changes shell’s current working directory. words changes shell’s settings directory . cd command akin double-clicking folder graphical interface get folder. Let’s say want move exercise-data directory saw . can use following series commands get : commands move us home directory Desktop directory, shell-lesson-data directory, exercise-data directory. notice cd doesn’t print anything. normal. Many shell commands output anything screen successfully executed. run pwd , can see now /Users/nelle/Desktop/shell-lesson-data/exercise-data. run ls -F without arguments now, lists contents /Users/nelle/Desktop/shell-lesson-data/exercise-data, ’s now : now know go directory tree (.e. go subdirectory), go (.e. leave directory go parent directory)? might try following: get error! ? methods far, cd can see sub-directories inside current directory. different ways see directories current location; ’ll start simplest. shortcut shell move one directory level. works follows: .. special directory name meaning “directory containing one”, succinctly, parent current directory. Sure enough, run pwd running cd .., ’re back /Users/nelle/Desktop/shell-lesson-data: special directory .. doesn’t usually show run ls. want display , can add -option ls -F: -stands ‘show ’ (including hidden files); forces ls show us file directory names begin ., .. (, ’re /Users/nelle, refers /Users directory). can see, also displays another special directory ’s just called ., means ‘current working directory’. may seem redundant name , ’ll see uses soon. Note command line tools, multiple options can combined single - spaces options; ls -F -equivalent ls -Fa. three commands basic commands navigating filesystem computer: pwd, ls, cd. Let’s explore variations commands. happens type cd , without giving directory? can check happened? pwd gives us answer! turns cd without argument return home directory, great ’ve got lost filesystem. Let’s try returning exercise-data directory . Last time, used three commands, can actually string together list directories move exercise-data one step: Check ’ve moved right place running pwd ls -F. want move one level data directory, use cd ... another way move directory, regardless current location. far, specifying directory names, even directory path (), using relative paths. use relative path command like ls cd, tries find location , rather root file system. However, possible specify absolute path directory including entire path root directory, indicated leading slash. leading / tells computer follow path root file system, always refers exactly one directory, matter run command. allows us move shell-lesson-data directory anywhere filesystem (including inside exercise-data). find absolute path ’re looking , can use pwd extract piece need move shell-lesson-data. Run pwd ls -F ensure ’re directory expect. : . stands current directory. : / stands root directory. : Nelle’s home directory /Users/nelle. : command goes two levels, .e. ends /Users. Yes: ~ stands user’s home directory, case /Users/nelle. : command navigate directory home current directory exists. Yes: unnecessarily complicated, correct. Yes: shortcut go back user’s home directory. Yes: goes one level. : directory backup /Users. : content Users/thing/backup, .., asked one level . : see previous explanation. Yes: ../backup/ refers /Users/backup/. : pwd name directory. Yes: ls without directory argument lists files directories current directory. Yes: uses absolute path explicitly.","code":"$ ls -F Desktop shell-lesson-data/ $ ls -F Desktop/shell-lesson-data exercise-data/  north-pacific-gyre/ $ cd Desktop $ cd shell-lesson-data $ cd exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ ls -F alkanes/  animal-counts/  creatures/  numbers.txt  writing/ $ cd shell-lesson-data -bash: cd: shell-lesson-data: No such file or directory $ cd .. $ pwd /Users/nelle/Desktop/shell-lesson-data $ ls -F -a ./  ../  exercise-data/  north-pacific-gyre/ $ cd $ pwd /Users/nelle $ cd Desktop/shell-lesson-data/exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ cd /Users/nelle/Desktop/shell-lesson-data"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"other-hidden-files","dir":"","previous_headings":"","what":"Other Hidden Files","title":null,"text":"addition hidden directories .. ., may also see file called .bash_profile. file usually contains shell configuration settings. may also see files directories beginning .. usually files directories used configure different programs computer. prefix . used prevent configuration files cluttering terminal standard ls command used.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"two-more-shortcuts","dir":"","previous_headings":"","what":"Two More Shortcuts","title":null,"text":"shell interprets tilde (~) character start path mean “current user’s home directory”. example, Nelle’s home directory /Users/nelle, ~/data equivalent /Users/nelle/data. works first character path; //~/elsewhere //Users/nelle/elsewhere. Another shortcut - (dash) character. cd translate - previous directory , faster remember, type, full path. efficient way moving back forth two directories – .e. execute cd - twice, end back starting directory. difference cd .. cd - former brings , latter brings back. Try ! First navigate ~/Desktop/shell-lesson-data (already ). cd exercise-data/creatures directory Now run ’ll see ’re back ~/Desktop/shell-lesson-data. Run cd - ’re back ~/Desktop/shell-lesson-data/exercise-data/creatures","code":"$ cd ~/Desktop/shell-lesson-data $ cd exercise-data/creatures $ cd -"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"absolute-vs-relative-paths","dir":"","previous_headings":"","what":"Absolute vs Relative Paths","title":null,"text":"Starting /Users/nelle/data, following commands Nelle use navigate home directory, /Users/nelle? cd . cd / cd /home/nelle cd ../.. cd ~ cd home cd ~/data/.. cd cd ..","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"relative-path-resolution","dir":"","previous_headings":"","what":"Relative Path Resolution","title":null,"text":"Using filesystem diagram , pwd displays /Users/thing, ls -F ../backup display? ../backup: file directory 2012-12-01 2013-01-08 2013-01-27 2012-12-01/ 2013-01-08/ 2013-01-27/ original/ pnas_final/ pnas_sub/","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"ls-reading-comprehension","dir":"","previous_headings":"","what":"ls Reading Comprehension","title":null,"text":"Using filesystem diagram , pwd displays /Users/backup, -r tells ls display things reverse order, command(s) result following output: ls pwd ls -r -F ls -r -F /Users/backup","code":"pnas_sub/ pnas_final/ original/"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"when-to-use-short-or-long-options","dir":"","previous_headings":"","what":"When to use short or long options","title":null,"text":"options exist short long options: Use short option typing commands directly shell minimize keystrokes get task done faster. Use long option scripts provide clarity. read many times typed .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"nelles-pipeline-organizing-files","dir":"","previous_headings":"","what":"Nelle’s Pipeline: Organizing Files","title":null,"text":"Knowing much files directories, Nelle ready organize files protein assay machine create. creates directory called north-pacific-gyre (remind data came ), contain data files assay machine data processing scripts. physical samples labelled according lab’s convention unique ten-character ID, ‘NENE01729A’. ID used collection log record location, time, depth, characteristics sample, decides use within filename data file. Since output assay machine plain text, call files NENE01729A.txt, NENE01812A.txt, . 1520 files go directory. Now current directory shell-lesson-data, Nelle can see files using command: command lot type, can let shell work called tab completion. types: presses Tab (tab key keyboard), shell automatically completes directory name : Pressing Tab nothing, since multiple possibilities; pressing Tab twice brings list files. Nelle presses G presses Tab , shell append ‘goo’ since files start ‘g’ share first three characters ‘goo’. see files, can press Tab twice . called tab completion, see many tools go .","code":"$ ls north-pacific-gyre/ $ ls nor $ ls north-pacific-gyre/ $ ls north-pacific-gyre/goo ls north-pacific-gyre/goo goodiff.sh   goostats.sh"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"file system responsible managing information disk. Information stored files, stored directories (folders). Directories can also store directories, form directory tree. pwd prints user’s current working directory. ls [path] prints listing specific file directory; ls lists current working directory. cd [path] changes current working directory. commands take options begin single -. Directory names path separated / Unix, \\ Windows. / root directory whole file system. absolute path specifies location root file system. relative path specifies location starting current location. . means ‘current directory’; .. means ‘directory current one’.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"step-one-see-where-we-are-and-what-we-already-have","dir":"","previous_headings":"","what":"Step one: see where we are and what we already have","title":null,"text":"still shell-lesson-data directory Desktop, can check using: Next ’ll move exercise-data/writing directory see contains:","code":"$ pwd /Users/nelle/Desktop/shell-lesson-data $ cd exercise-data/writing/ $ ls -F haiku.txt  LittleWomen.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"create-a-directory","dir":"","previous_headings":"","what":"Create a directory","title":null,"text":"Let’s create new directory called thesis using command mkdir thesis (output): might guess name, mkdir means ‘make directory’. Since thesis relative path (.e., leading slash, like //ever/thesis), new directory created current working directory: Since ’ve just created thesis directory, ’s nothing yet: Note mkdir limited creating single directories one time. -p option allows mkdir create directory nested subdirectories single operation: -R option ls command list nested subdirectories within directory. Let’s use ls -FR recursively list new directory hierarchy just created project directory:","code":"$ mkdir thesis $ ls -F haiku.txt  LittleWomen.txt  thesis/ $ ls -F thesis $ mkdir -p ../project/data ../project/results $ ls -FR ../project ../project/: data/  results/  ../project/data:  ../project/results:"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"two-ways-of-doing-the-same-thing","dir":"","previous_headings":"","what":"Two ways of doing the same thing","title":null,"text":"Using shell create directory different using file explorer. open current directory using operating system’s graphical file explorer, thesis directory appear . shell file explorer two different ways interacting files, files directories .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"good-names-for-files-and-directories","dir":"","previous_headings":"","what":"Good names for files and directories","title":null,"text":"Complicated names files directories can make life painful working command line. provide useful tips names files directories. Don’t use spaces. Spaces can make name meaningful, since spaces used separate arguments command line better avoid names files directories. can use - _ instead (e.g. north-pacific-gyre/ rather north pacific gyre/). test , try typing mkdir north pacific gyre see directory (directories!) made check ls -F. Don’t begin name - (dash). Commands treat names starting - options. Stick letters, numbers, . (period ‘full stop’), - (dash) _ (underscore). Many characters special meanings command line. learn lesson. special characters can cause command work expected can even result data loss. need refer names files directories spaces special characters, surround name quotes (\"\").","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"create-a-text-file","dir":"","previous_headings":"","what":"Create a text file","title":null,"text":"Let’s change working directory thesis using cd, run text editor called Nano create file called draft.txt: Let’s type lines text. ’re happy text, can press Ctrl+O (press Ctrl Control key , holding , press O key) write data disk. asked provide name file contain text. Press Return accept suggested default draft.txt. file saved, can use Ctrl+X quit editor return shell. nano doesn’t leave output screen exits, ls now shows created file called draft.txt: touch command generates new file called my_file.txt current directory. can observe newly generated file typing ls command line prompt. my_file.txt can also viewed GUI file explorer. inspect file ls -l, note size my_file.txt 0 bytes. words, contains data. open my_file.txt using text editor blank. programs generate output files , instead require empty files already generated. program run, searches existing file populate output. touch command allows efficiently generate blank text file used programs.","code":"$ cd thesis $ nano draft.txt $ ls draft.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"which-editor","dir":"","previous_headings":"","what":"Which Editor?","title":null,"text":"say, ‘nano text editor’ really mean ‘text’. can work plain character data, tables, images, human-friendly media. use examples one least complex text editors. However, trait, may powerful enough flexible enough work need workshop. Unix systems (Linux macOS), many programmers use Emacs Vim (require time learn), graphical editor Gedit VScode. Windows, may wish use Notepad++. Windows also built-editor called notepad can run command line way nano purposes lesson. matter editor use, need know searches saves files. start shell, (probably) use current working directory default location. use computer’s start menu, may want save files Desktop Documents directory instead. can change navigating another directory first time ‘Save …’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"control-ctrl-or-key","dir":"","previous_headings":"","what":"Control, Ctrl, or ^ Key","title":null,"text":"Control key also called ‘Ctrl’ key. various ways using Control key may described. example, may see instruction press Control key , holding , press X key, described : Control-X Control+X Ctrl-X Ctrl+X ^X C-x nano, along bottom screen ’ll see ^G Get Help ^O WriteOut. means can use Control-G get help Control-O save file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"creating-files-a-different-way","dir":"","previous_headings":"","what":"Creating Files a Different Way","title":null,"text":"seen create text files using nano editor. Now, try following command: touch command ? look current directory using GUI file explorer, file show ? Use ls -l inspect files. large my_file.txt? might want create file way?","code":"$ touch my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"creating-files-a-different-way-1","dir":"","previous_headings":"","what":"Creating Files a Different Way (continued)","title":null,"text":"avoid confusion later , suggest removing file ’ve just created proceeding rest episode, otherwise future outputs may vary given lesson. , use following command:","code":"$ rm my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s In A Name?","title":null,"text":"may noticed Nelle’s files named ‘something dot something’, part lesson, always used extension .txt. just convention; can call file mythesis almost anything else want. However, people use two-part names time help (programs) tell different kinds files apart. second part name called filename extension indicates type data file holds: .txt signals plain text file, .pdf indicates PDF document, .cfg configuration file full parameters program , .png PNG image, . just convention, albeit important one. Files merely contain bytes; ’s us programs interpret bytes according rules plain text files, PDF documents, configuration files, images, . Naming PNG image whale whale.mp3 doesn’t somehow magically turn recording whale song, though might cause operating system associate file music player program. case, someone double-clicked whale.mp3 file explorer program,music player automatically (erroneously) attempt open whale.mp3 file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"moving-files-to-a-new-folder","dir":"","previous_headings":"","what":"Moving Files to a new folder","title":null,"text":"running following commands, Jamie realizes put files sucrose.dat maltose.dat wrong folder. files placed raw folder. Fill blanks move files raw/ folder (.e. one forgot put )","code":"$ ls -F  analyzed/ raw/ $ ls -F analyzed fructose.dat glucose.dat maltose.dat sucrose.dat $ cd analyzed $ mv sucrose.dat maltose.dat ____/____"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"renaming-files","dir":"","previous_headings":"","what":"Renaming Files","title":null,"text":"Suppose created plain-text file current directory contain list statistical tests need analyze data, named statstics.txt creating saving file realize misspelled filename! want correct mistake, following commands use ? cp statstics.txt statistics.txt mv statstics.txt statistics.txt mv statstics.txt . cp statstics.txt .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"moving-and-copying","dir":"","previous_headings":"","what":"Moving and Copying","title":null,"text":"output closing ls command sequence shown ? proteins-saved.dat recombined recombined proteins.dat recombined proteins-saved.dat","code":"$ pwd /Users/jamie/data $ ls proteins.dat $ mkdir recombined $ mv proteins.dat recombined/ $ cp recombined/proteins.dat ../proteins-saved.dat $ ls"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"deleting-is-forever","dir":"","previous_headings":"","what":"Deleting Is Forever","title":null,"text":"Unix shell doesn’t trash bin can recover deleted files (though graphical interfaces Unix ). Instead, delete files, unlinked file system storage space disk can recycled. Tools finding recovering deleted files exist, ’s guarantee ’ll work particular situation, since computer may recycle file’s disk space right away.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"using-rm-safely","dir":"","previous_headings":"","what":"Using rm Safely","title":null,"text":"happens execute rm -thesis_backup/quotations.txt? want protection using rm?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"copy-with-multiple-filenames","dir":"","previous_headings":"","what":"Copy with Multiple Filenames","title":null,"text":"exercise, can test commands shell-lesson-data/exercise-data directory. example , cp given several filenames directory name? example , cp given three file names?","code":"$ mkdir backup $ cp creatures/minotaur.dat creatures/unicorn.dat backup/ $ cd creatures $ ls -F basilisk.dat  minotaur.dat  unicorn.dat $ cp minotaur.dat unicorn.dat basilisk.dat"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"using-wildcards-for-accessing-multiple-files-at-once","dir":"","previous_headings":"","what":"Using wildcards for accessing multiple files at once","title":null,"text":"solution 3. 1. shows files whose names contain zero characters (*) followed letter t, zero characters (*) followed ane.pdb. gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb. 2. shows files whose names start zero characters (*) followed letter t, single character (?), ne. followed zero characters (*). give us octane.pdb pentane.pdb doesn’t match anything ends thane.pdb. 3. fixes problems option 2 matching two characters (??) t ne. solution. 4. shows files starting ethane.. Jamie needs move files fructose.dat sucrose.dat analyzed directory. shell expand *.dat match .dat files current directory. mv command moves list .dat files ‘analyzed’ directory. first two sets commands achieve objective. first set uses relative paths create top-level directory subdirectories. third set commands give error default behavior mkdir won’t create subdirectory non-existent directory: intermediate level folders must created first. fourth set commands achieve objective. Remember, -p option, followed path one directories, cause mkdir create intermediate subdirectories required. final set commands generates ‘raw’ ‘processed’ directories level ‘data’ directory.","code":"$ cp *calibration.txt backup/calibration $ cp 2015-11-* send_to_bob/all_november_files/ $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/ mv *.dat analyzed"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"wildcards","dir":"","previous_headings":"","what":"Wildcards","title":null,"text":"* wildcard, represents zero characters. Let’s consider shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, every file ends ‘.pdb’. hand, p*.pdb represents pentane.pdb propane.pdb, ‘p’ front can represent filenames begin letter ‘p’. ? also wildcard, represents exactly one character. ?ethane.pdb represent methane.pdb whereas *ethane.pdb represents ethane.pdb methane.pdb. Wildcards can used combination . example, ???ane.pdb indicates three characters followed ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb. shell sees wildcard, expands wildcard create list matching filenames running preceding command. exception, wildcard expression match file, Bash pass expression argument command . example, typing ls *.pdf alkanes directory (contains files names ending .pdb) results error message file called *.pdf. However, generally commands like wc ls see lists file names matching expressions, wildcards . shell, programs, expands wildcards.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"list-filenames-matching-a-pattern","dir":"","previous_headings":"","what":"List filenames matching a pattern","title":null,"text":"run alkanes directory, ls command(s) produce output? ethane.pdb   methane.pdb ls *t*ane.pdb ls *t?ne.* ls *t??ne.pdb ls ethane.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"more-on-wildcards","dir":"","previous_headings":"","what":"More on Wildcards","title":null,"text":"Sam directory containing calibration data, datasets, descriptions datasets: heading another field trip, wants back data send datasets colleague Bob. Sam uses following commands get job done: Help Sam filling blanks. resulting directory structure look like ","code":". ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   └── datasets └── send_to_bob     ├── all_datasets_created_on_a_23rd     └── all_november_files $ cp *dataset* backup/datasets $ cp ____calibration____ backup/calibration $ cp 2015-____-____ send_to_bob/all_november_files/ $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/ . ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   │   ├── 2015-10-23-calibration.txt │   │   ├── 2015-10-26-calibration.txt │   │   └── 2015-11-23-calibration.txt │   └── datasets │       ├── 2015-10-23-dataset1.txt │       ├── 2015-10-23-dataset2.txt │       ├── 2015-10-23-dataset_overview.txt │       ├── 2015-10-26-dataset1.txt │       ├── 2015-10-26-dataset2.txt │       ├── 2015-10-26-dataset_overview.txt │       ├── 2015-11-23-dataset1.txt │       ├── 2015-11-23-dataset2.txt │       └── 2015-11-23-dataset_overview.txt └── send_to_bob     ├── all_datasets_created_on_a_23rd     │   ├── 2015-10-23-dataset1.txt     │   ├── 2015-10-23-dataset2.txt     │   ├── 2015-10-23-dataset_overview.txt     │   ├── 2015-11-23-dataset1.txt     │   ├── 2015-11-23-dataset2.txt     │   └── 2015-11-23-dataset_overview.txt     └── all_november_files         ├── 2015-11-23-calibration.txt         ├── 2015-11-23-dataset1.txt         ├── 2015-11-23-dataset2.txt         └── 2015-11-23-dataset_overview.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"organizing-directories-and-files","dir":"","previous_headings":"","what":"Organizing Directories and Files","title":null,"text":"Jamie working project, sees files aren’t well organized: fructose.dat sucrose.dat files contain output data analysis. command(s) covered lesson need run commands produce output shown?","code":"$ ls -F analyzed/  fructose.dat    raw/   sucrose.dat $ ls -F analyzed/   raw/ $ ls analyzed fructose.dat    sucrose.dat"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"reproduce-a-folder-structure","dir":"","previous_headings":"","what":"Reproduce a folder structure","title":null,"text":"’re starting new experiment like duplicate directory structure previous experiment can add new data. Assume previous experiment folder called 2016-05-18, contains data folder turn contains folders named raw processed contain data files. goal copy folder structure 2016-05-18 folder folder called 2016-05-20 final directory structure looks like : following set commands achieve objective? commands ?","code":"2016-05-20/ └── data    ├── processed    └── raw $ mkdir 2016-05-20 $ mkdir 2016-05-20/data $ mkdir 2016-05-20/data/processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ cd data $ mkdir raw processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20/data/processed $ mkdir -p 2016-05-20/data/raw $ mkdir -p 2016-05-20/data/processed $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ mkdir raw processed"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"cp [old] [new] copies file. mkdir [path] creates new directory. mv [old] [new] moves (renames) file directory. rm [path] removes (deletes) file. * matches zero characters filename, *.txt matches files ending .txt. ? matches single character filename, ?.txt matches .txt .txt. Use Control key may described many ways, including Ctrl-X, Control-X, ^X. shell trash bin: something deleted, ’s really gone. files’ names something.extension. extension isn’t required, doesn’t guarantee anything, normally used indicate type data file. Depending type work , may need powerful text editor Nano.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"why-isnt-it-doing-anything","dir":"","previous_headings":"","what":"Why Isn’t It Doing Anything?","title":null,"text":"happens command supposed process file, don’t give filename? example, type: don’t type *.pdb (anything else) command? Since doesn’t filenames, wc assumes supposed process input given command prompt, just sits waits us give data interactively. outside, though, see sitting , command doesn’t appear anything. make kind mistake, can escape state holding control key (Ctrl) pressing letter C : Ctrl+C. release keys.","code":"$ wc -l"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"output-page-by-page","dir":"","previous_headings":"","what":"Output Page by Page","title":null,"text":"’ll continue use cat lesson, convenience consistency, disadvantage always dumps whole file onto screen. useful practice command less (e.g. less lengths.txt). displays screenful file, stops. can go forward one screenful pressing spacebar, back one pressing b. Press q quit.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"what-does-sort--n-do","dir":"","previous_headings":"","what":"What Does sort -n Do?","title":null,"text":"file shell-lesson-data/exercise-data/numbers.txt contains following lines: run sort file, output : run sort -n file, get instead: Explain -n effect.","code":"10 2 19 22 6 10 19 2 22 6 2 6 10 19 22"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"redirecting-to-the-same-file","dir":"","previous_headings":"","what":"Redirecting to the same file","title":null,"text":"’s bad idea try redirecting output command operates file file. example: something like may give incorrect results /delete contents lengths.txt.","code":"$ sort -n lengths.txt > lengths.txt"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"what-does-mean","dir":"","previous_headings":"","what":"What Does >> Mean?","title":null,"text":"seen use >, similar operator >> works slightly differently. ’ll learn differences two operators printing strings. can use echo command print strings e.g. Now test commands reveal difference two operators: : Hint: Try executing command twice row examining output files.","code":"$ echo The echo command prints text The echo command prints text $ echo hello > testfile01.txt $ echo hello >> testfile02.txt"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"appending-data","dir":"","previous_headings":"","what":"Appending Data","title":null,"text":"already met head command, prints lines start file. tail similar, prints lines end file instead. Consider file shell-lesson-data/exercise-data/animal-counts/animals.csv. commands, select answer corresponds file animals-subset.csv: first three lines animals.csv last two lines animals.csv first three lines last two lines animals.csv second third lines animals.csv","code":"$ head -n 3 animals.csv > animals-subset.csv $ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"piping-commands-together","dir":"","previous_headings":"","what":"Piping Commands Together","title":null,"text":"current directory, want find 3 files least number lines. command listed work? wc -l * > sort -n > head -n 3 wc -l * | sort -n | head -n 1-3 wc -l * | head -n 3 | sort -n wc -l * | sort -n | head -n 3","code":""},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"pipe-reading-comprehension","dir":"","previous_headings":"","what":"Pipe Reading Comprehension","title":null,"text":"file called animals.csv (shell-lesson-data/exercise-data/animal-counts folder) contains following data: text passes pipes final redirect pipeline ? Note, sort -r command sorts reverse order. Hint: build pipeline one command time test understanding","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"pipe-construction","dir":"","previous_headings":"","what":"Pipe Construction","title":null,"text":"file animals.csv previous exercise, consider following command: cut command used remove ‘cut ’ certain sections line file, cut expects lines separated columns Tab character. character used way called delimiter. example use -d option specify comma delimiter character. also used -f option specify want extract second field (column). gives following output: uniq command filters adjacent matching lines file. extend pipeline (using uniq another command) find animals file contains (without duplicates names)?","code":"$ cut -d , -f 2 animals.csv deer rabbit raccoon rabbit deer fox rabbit bear"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"which-pipe","dir":"","previous_headings":"","what":"Which Pipe?","title":null,"text":"file animals.csv contains 8 lines data formatted follows: uniq command -c option gives count number times line occurs input. Assuming current directory shell-lesson-data/exercise-data/animal-counts, command use produce table shows total count type animal file? sort animals.csv | uniq -c sort -t, -k2,2 animals.csv | uniq -c cut -d, -f 2 animals.csv | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c | wc -l","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 ..."},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"removing-unneeded-files","dir":"","previous_headings":"","what":"Removing Unneeded Files","title":null,"text":"Suppose want delete processed data files, keep raw files processing script save storage. raw files end .dat processed files end .txt. following remove processed data files, processed data files? rm ?.txt rm *.txt rm * .txt rm *.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"wc counts lines, words, characters inputs. cat displays contents inputs. sort sorts inputs. head displays first 10 lines input. tail displays last 10 lines input. command > [file] redirects command’s output file (overwriting existing content). command >> [file] appends command’s output file. [first] | [second] pipeline: output first command used input second. best way use shell use pipes combine simple single-purpose programs (filters).","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"follow-the-prompt","dir":"","previous_headings":"","what":"Follow the Prompt","title":null,"text":"shell prompt changes $ > back typing loop. second prompt, >, different remind us haven’t finished typing complete command yet. semicolon, ;, can used separate two commands written single line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"same-symbols-different-meanings","dir":"","previous_headings":"","what":"Same Symbols, Different Meanings","title":null,"text":"see > used shell prompt, whereas > also used redirect output. Similarly, $ used shell prompt, , saw earlier, also used ask shell get value variable. shell prints > $ expects type something, symbol prompt. type > $ , instruction shell redirect output get value variable.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"write-your-own-loop","dir":"","previous_headings":"","what":"Write your own loop","title":null,"text":"write loop echoes 10 numbers 0 9?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"variables-in-loops","dir":"","previous_headings":"","what":"Variables in Loops","title":null,"text":"exercise refers shell-lesson-data/exercise-data/alkanes directory. ls *.pdb gives following output: output following code? Now, output following code? two loops give different outputs?","code":"cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb $ for datafile in *.pdb > do >     ls *.pdb > done $ for datafile in *.pdb > do >     ls $datafile > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"limiting-sets-of-files","dir":"","previous_headings":"","what":"Limiting Sets of Files","title":null,"text":"output running following loop shell-lesson-data/exercise-data/alkanes directory? files listed. files listed. cubane.pdb, octane.pdb pentane.pdb listed. cubane.pdb listed.","code":"$ for filename in c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"limiting-sets-of-files-1","dir":"","previous_headings":"","what":"Limiting Sets of Files (continued)","title":null,"text":"output differ using command instead? files listed. files listed time. files listed time. files cubane.pdb octane.pdb listed. file octane.pdb listed.","code":"$ for filename in *c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"saving-to-a-file-in-a-loop---part-one","dir":"","previous_headings":"","what":"Saving to a File in a Loop - Part One","title":null,"text":"shell-lesson-data/exercise-data/alkanes directory, effect loop? Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb, text propane.pdb saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, text three files concatenated saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb, text propane.pdb saved file called alkanes.pdb. None .","code":"for alkanes in *.pdb do     echo $alkanes     cat $alkanes > alkanes.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"saving-to-a-file-in-a-loop---part-two","dir":"","previous_headings":"","what":"Saving to a File in a Loop - Part Two","title":null,"text":"Also shell-lesson-data/exercise-data/alkanes directory, output following loop? text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb concatenated saved file called .pdb. text ethane.pdb saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb concatenated saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb printed screen saved file called .pdb.","code":"for datafile in *.pdb do     cat $datafile >> all.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"spaces-in-names","dir":"","previous_headings":"","what":"Spaces in Names","title":null,"text":"Spaces used separate elements list going loop . one elements contains space character, need surround quotes, thing loop variable. Suppose data files named: loop files, need add double quotes like : simpler avoid using spaces (special characters) filenames. files don’t exist, run code, head command unable find ; however, error message returned show name files expecting: Try removing quotes around $filename loop see effect quote marks spaces. Note get result loop command unicorn.dat run code creatures directory:","code":"red dragon.dat purple unicorn.dat $ for filename in \"red dragon.dat\" \"purple unicorn.dat\" > do >     head -n 100 \"$filename\" | tail -n 20 > done head: cannot open ‘red dragon.dat' for reading: No such file or directory head: cannot open ‘purple unicorn.dat' for reading: No such file or directory head: cannot open ‘red' for reading: No such file or directory head: cannot open ‘dragon.dat' for reading: No such file or directory head: cannot open ‘purple' for reading: No such file or directory CGGTACCGAA AAGGGTCGCG CAAGTGTTCC ..."},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"beginning-and-end","dir":"","previous_headings":"","what":"Beginning and End","title":null,"text":"can move beginning line shell typing Ctrl+end using Ctrl+E.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"those-who-know-history-can-choose-to-repeat-it","dir":"","previous_headings":"","what":"Those Who Know History Can Choose to Repeat It","title":null,"text":"Another way repeat previous work use history command get list last hundred commands executed, use !123 (‘123’ replaced command number) repeat one commands. example, Nelle types : can re-run goostats.sh files simply typing !459.","code":"$ history | tail -n 5 456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done 457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done 458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done 459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done 460  history | tail -n 5"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"other-history-commands","dir":"","previous_headings":"","what":"Other History Commands","title":null,"text":"number shortcut commands getting history. Ctrl+R enters history search mode ‘reverse--search’ finds recent command history matches text enter next. Press Ctrl+R one additional times search earlier matches. can use left right arrow keys choose line edit hit Return run command. !! retrieves immediately preceding command (may may find convenient using ↑) !$ retrieves last word last command. ’s useful often might expect: bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, can type less !$ look file stats-NENE01729B.txt, quicker ↑ editing command-line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"doing-a-dry-run","dir":"","previous_headings":"","what":"Doing a Dry Run","title":null,"text":"loop way many things — make many mistakes wrong thing. One way check loop echo commands run instead actually running . Suppose want preview commands following loop execute without actually running commands: difference two loops , one want run?","code":"$ for datafile in *.pdb > do >     cat $datafile >> all.pdb > done # Version 1 $ for datafile in *.pdb > do >     echo cat $datafile >> all.pdb > done # Version 2 $ for datafile in *.pdb > do >     echo \"cat $datafile >> all.pdb\" > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"nested-loops","dir":"","previous_headings":"","what":"Nested Loops","title":null,"text":"Suppose want set directory structure organize experiments measuring reaction rate constants different compounds different temperatures. result following code:","code":"$ for species in cubane ethane methane > do >     for temperature in 25 30 37 40 >     do >         mkdir $species-$temperature >     done > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"loop repeats commands every thing list. Every loop needs variable refer thing currently operating . Use $name expand variable (.e., get value). ${name} can also used. use spaces, quotes, wildcard characters ‘*’ ‘?’ filenames, complicates variable expansion. Give files consistent names easy match wildcard patterns make easy select looping. Use -arrow key scroll previous commands edit repeat . Use Ctrl+R search previously entered commands. Use history display recent commands, ![number] repeat command number.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"text-vs--whatever","dir":"","previous_headings":"","what":"Text vs. Whatever","title":null,"text":"usually call programs like Microsoft Word LibreOffice Writer “text editors”, need bit careful comes programming. default, Microsoft Word uses .docx files store text, also formatting information fonts, headings, . extra information isn’t stored characters doesn’t mean anything tools like head, expects input files contain nothing letters, digits, punctuation standard computer keyboard. editing programs, therefore, must either use plain text editor careful save files plain text.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"double-quotes-around-arguments","dir":"","previous_headings":"","what":"Double-Quotes Around Arguments","title":null,"text":"reason put loop variable inside double-quotes, case filename happens contain spaces, surround $1 double-quotes.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"list-unique-species","dir":"","previous_headings":"","what":"List Unique Species","title":null,"text":"Leah several hundred data files, formatted like : example type file given shell-lesson-data/exercise-data/animal-counts/animals.csv. can use command cut -d , -f 2 animals.csv | sort | uniq produce unique species animals.csv. order avoid type series commands every time, scientist may choose write shell script instead. Write shell script called species.sh takes number filenames command-line arguments uses variation command print list unique species appearing files separately.","code":"2013-11-05,deer,5 2013-11-05,rabbit,22 2013-11-05,raccoon,7 2013-11-06,rabbit,19 2013-11-06,deer,2 2013-11-06,fox,1 2013-11-07,rabbit,18 2013-11-07,bear,1"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"why-record-commands-in-the-history-before-running-them","dir":"","previous_headings":"","what":"Why Record Commands in the History Before Running Them?","title":null,"text":"run command: last command file history command , .e., shell added history command log actually running . fact, shell always adds commands log running . think ?","code":"$ history | tail -n 5 > recent.sh"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"variables-in-shell-scripts","dir":"","previous_headings":"","what":"Variables in Shell Scripts","title":null,"text":"alkanes directory, imagine shell script called script.sh containing following commands: alkanes directory, type following command: following outputs expect see? lines first last lines file ending .pdb alkanes directory first last line file ending .pdb alkanes directory first last line file alkanes directory error quotes around *.pdb","code":"head -n $2 $1 tail -n $3 $1 $ bash script.sh '*.pdb' 1 1"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"find-the-longest-file-with-a-given-extension","dir":"","previous_headings":"","what":"Find the Longest File With a Given Extension","title":null,"text":"Write shell script called longest.sh takes name directory filename extension arguments, prints name file lines directory extension. example: print name .pdb file shell-lesson-data/exercise-data/alkanes lines. Feel free test script another directory e.g.","code":"$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb $ bash longest.sh shell-lesson-data/exercise-data/writing txt"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"script-reading-comprehension","dir":"","previous_headings":"","what":"Script Reading Comprehension","title":null,"text":"question, consider shell-lesson-data/exercise-data/alkanes directory . contains number .pdb files addition files may created. Explain following three scripts run bash script1.sh *.pdb, bash script2.sh *.pdb, bash script3.sh *.pdb respectively.","code":"# Script 1 echo *.* # Script 2 for filename in $1 $2 $3 do     cat $filename done # Script 3 echo $@.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"debugging-scripts","dir":"","previous_headings":"","what":"Debugging Scripts","title":null,"text":"Suppose saved following script file called -errors.sh Nelle’s north-pacific-gyre directory: run north-pacific-gyre directory: output blank. figure , re-run script using -x option: output showing ? line responsible error?","code":"# Calculate stats for data files. for datafile in \"$@\" do     echo $datfile     bash goostats.sh $datafile stats-$datafile done $ bash do-errors.sh NENE*A.txt NENE*B.txt $ bash -x do-errors.sh NENE*A.txt NENE*B.txt"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Save commands files (usually called shell scripts) re-use. bash [filename] runs commands saved file. $@ refers shell script’s command-line arguments. $1, $2, etc., refer first command-line argument, second command-line argument, etc. Place variables quotes values might spaces . Letting users decide files process flexible consistent built-Unix commands.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"using-grep","dir":"","previous_headings":"","what":"Using grep","title":null,"text":"command result following output: grep \"\" haiku.txt grep -E \"\" haiku.txt grep -w \"\" haiku.txt grep -\"\" haiku.txt","code":"and the presence of absence:"},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"wildcards","dir":"","previous_headings":"","what":"Wildcards","title":null,"text":"grep‘s real power doesn’t come options, though; comes fact patterns can include wildcards. (technical name regular expressions, ’re’ ‘grep’ stands .) Regular expressions complex powerful; want complex searches, please look lesson website. taster, can find lines ‘o’ second position like : use -E option put pattern quotes prevent shell trying interpret . (pattern contained *, example, shell try expand running grep.) ^ pattern anchors match start line. . matches single character (just like ? shell), o matches actual ‘o’.","code":"$ grep -E \"^.o\" haiku.txt You bring fresh toner. Today it is not working Software is like that."},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"tracking-a-species","dir":"","previous_headings":"","what":"Tracking a Species","title":null,"text":"Leah several hundred data files saved one directory, formatted like : wants write shell script takes species first command-line argument directory second argument. script return one file called <species>.txt containing list dates number species seen date. example using data shown , rabbit.txt contain: , line contains individual command, pipe. Arrange sequence one command order achieve Leah’s goal: Hint: use man grep look grep text recursively directory man cut select one field line. example file provided shell-lesson-data/exercise-data/animal-counts/animals.csv","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 2012-11-05,22 2012-11-06,19 2012-11-07,16 cut -d : -f 2 > | grep -w $1 -r $2 | $1.txt cut -d , -f 1,3"},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"little-women","dir":"","previous_headings":"","what":"Little Women","title":null,"text":"friend, just finished reading Little Women Louisa May Alcott, argument. four sisters book, Jo, Meg, Beth, Amy, friend thinks Jo mentioned. , however, certain Amy. Luckily, file LittleWomen.txt containing full text novel (shell-lesson-data/exercise-data/writing/LittleWomen.txt). Using loop, tabulate number times four sisters mentioned? Hint: one solution might employ commands grep wc |, another might utilize grep options. often one way solve programming task, particular solution usually chosen based combination yielding correct result, elegance, readability, speed.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"listing-vs--finding","dir":"","previous_headings":"","what":"Listing vs. Finding","title":null,"text":"ls find can made similar things given right options, normal circumstances, ls lists everything can, find searches things certain properties shows .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"matching-and-subtracting","dir":"","previous_headings":"","what":"Matching and Subtracting","title":null,"text":"-v option grep inverts pattern matching, lines match pattern printed. Given , following commands find .dat files creatures except unicorn.dat? thought answer, can test commands shell-lesson-data/exercise-data directory. find creatures -name \"*.dat\" | grep -v unicorn find creatures -name *.dat | grep -v unicorn grep -v \"unicorn\" $(find creatures -name \"*.dat\") None .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"binary-files","dir":"","previous_headings":"","what":"Binary Files","title":null,"text":"focused exclusively finding patterns text files. data stored images, databases, format? handful tools extend grep handle non text formats. generalizable approach convert data text, extract text-like elements data. one hand, makes simple things easy . hand, complex things usually impossible. example, ’s easy enough write program extract X Y dimensions image files grep play , write something find values spreadsheet whose cells contained formulas? last option recognize shell text processing limits, use another programming language. time comes , don’t hard shell. Many modern programming languages borrowed lot ideas , imitation also sincerest form praise.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"find-pipeline-reading-comprehension","dir":"","previous_headings":"","what":"find Pipeline Reading Comprehension","title":null,"text":"Write short explanatory comment following shell script:","code":"wc -l $(find . -name \"*.dat\") | sort -n"},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"find finds files specific properties match patterns. grep selects lines files match patterns. --help option supported many bash commands, programs can run within Bash, display information use commands programs. man [command] displays manual page given command. $([command]) inserts command’s output place.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"background","dir":"","previous_headings":"","what":"Background","title":null,"text":"Humans computers commonly interact many different ways, keyboard mouse, touch screen interfaces, using speech recognition systems. widely used way interact personal computers called graphical user interface (GUI). GUI, give instructions clicking mouse using menu-driven interactions. visual aid GUI makes intuitive learn, way delivering instructions computer scales poorly. Imagine following task: literature search, copy third line one thousand text files one thousand different directories paste single file. Using GUI, clicking desk several hours, potentially also commit error process completing repetitive task. take advantage Unix shell. Unix shell command-line interface (CLI) scripting language, allowing repetitive tasks done automatically fast. proper commands, shell can repeat tasks without modification many times want. Using shell, task literature example can accomplished seconds.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"the-shell","dir":"","previous_headings":"","what":"The Shell","title":null,"text":"shell program users can type commands. shell, ’s possible invoke complicated programs like climate modeling software simple commands create empty directory one line code. popular Unix shell Bash (Bourne SHell — -called ’s derived shell written Stephen Bourne). Bash default shell modern implementations Unix packages provide Unix-like tools Windows. Note ‘Git Bash’ piece software enables Windows users use Bash like interface interacting Git. Using shell take effort time learn. GUI presents choices select, CLI choices automatically presented , must learn commands like new vocabulary language ’re studying. However, unlike spoken language, small number “words” (.e. commands) gets long way, ’ll cover essential today. grammar shell allows combine existing tools powerful pipelines handle large volumes data automatically. Sequences commands can written script, improving reproducibility workflows. addition, command line often easiest way interact remote machines supercomputers. Familiarity shell near essential run variety specialized tools resources including high-performance computing systems. clusters cloud computing systems become popular scientific data crunching, able interact shell becoming necessary skill. can build command-line skills covered tackle wide range scientific questions computational challenges. Let’s get started. shell first opened, presented prompt, indicating shell waiting input. shell typically uses $ prompt, may use different symbol. examples lesson, ’ll show prompt $. importantly, type prompt typing commands. type command follows prompt. rule applies lessons lessons sources. Also note type command, press Enter key execute . prompt followed text cursor, character indicates position typing appear. cursor usually flashing solid block, can also underscore pipe. may seen text editor program, example. Note prompt might look little different. particular, popular shell environments default put user name host name $. prompt might look like, e.g.: prompt might even include . worry prompt just short $. lesson depend additional information also get way. important item focus $ character see later . let’s try first command, ls, short listing. command list contents current directory:","code":"$ nelle@localhost $ $ ls Desktop     Downloads   Movies      Pictures Documents   Library     Music       Public"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"command-not-found","dir":"","previous_headings":"","what":"Command not found","title":null,"text":"shell can’t find program whose name command typed, print error message : might happen command mis-typed program corresponding command installed.","code":"$ ks ks: command not found"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"shell program whose primary purpose read commands run programs. lesson uses Bash, default shell many implementations Unix. Programs can run Bash entering commands command-line prompt. shell’s main advantages high action--keystroke ratio, support automating repetitive tasks, capacity access networked machines. significant challenge using shell can knowing commands need run run .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"home-directory-variation","dir":"","previous_headings":"","what":"Home Directory Variation","title":null,"text":"home directory path look different different operating systems. Linux, may look like /home/nelle, Windows, similar C:\\Documents Settings\\nelle C:\\Users\\nelle. (Note may look slightly different different versions Windows.) future examples, ’ve used Mac output default - Linux Windows output may differ slightly generally similar. also assume pwd command returns user’s home directory. pwd returns something different, may need navigate using cd commands lesson work written. See Exploring Directories details cd command.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"slashes","dir":"","previous_headings":"","what":"Slashes","title":null,"text":"Notice two meanings / character. appears front file directory name, refers root directory. appears inside path, ’s just separator.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"clearing-your-terminal","dir":"","previous_headings":"","what":"Clearing your terminal","title":null,"text":"screen gets cluttered, can clear terminal using clear command. can still access previous commands using ↑ ↓ move line--line, scrolling terminal.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":null,"text":"ls lots options. two common ways find use command options accepts — depending environment, might find one ways works: can pass --help option command (available Linux Git Bash), example: can read manual man (available Linux macOS): ’ll describe ways next.","code":"$ ls --help $ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"help-for-built-in-commands","dir":"","previous_headings":"","what":"Help for built-in commands","title":null,"text":"commands built Bash shell, rather existing separate programs filesystem. One example cd (change directory) command. get message like manual entry cd, try help cd instead. help command get usage information Bash built-ins.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"the---help-option","dir":"","previous_headings":"Getting help","what":"The --help option","title":null,"text":"bash commands programs people written run within bash, support --help option displays information use command program.","code":"$ ls --help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.  Mandatory arguments to long options are mandatory for short options, too.   -a, --all                  do not ignore entries starting with .   -A, --almost-all           do not list implied . and ..       --author               with -l, print the author of each file   -b, --escape               print C-style escapes for nongraphic characters       --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,                                '--block-size=M' prints sizes in units of                                1,048,576 bytes; see SIZE format below   -B, --ignore-backups       do not list implied entries ending with ~   -c                         with -lt: sort by, and show, ctime (time of last                                modification of file status information);                                with -l: show ctime and sort by name;                                otherwise: sort by ctime, newest first   -C                         list entries by columns       --color[=WHEN]         colorize the output; WHEN can be 'always' (default                                if omitted), 'auto', or 'never'; more info below   -d, --directory            list directories themselves, not their contents   -D, --dired                generate output designed for Emacs' dired mode   -f                         do not sort, enable -aU, disable -ls --color   -F, --classify             append indicator (one of */=>@|) to entries ...        ...        ..."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"unsupported-command-line-options","dir":"","previous_headings":"","what":"Unsupported command-line options","title":null,"text":"try use option supported, ls commands usually print error message similar :","code":"$ ls -j ls: invalid option -- 'j' Try 'ls --help' for more information."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"the-man-command","dir":"","previous_headings":"Getting help","what":"The man command","title":null,"text":"way learn ls type command turn terminal page description ls command options. navigate man pages, may use ↑ ↓ move line--line, try B Spacebar skip full page. search character word man pages, use / followed character word searching . Sometimes search result multiple hits. , can move hits using N (moving forward) Shift+N (moving backward). quit man pages, press Q. -l option makes ls use long listing format, showing file/directory names also additional information, file size time last modification. use -h option -l option, makes file size ‘human readable’, .e. displaying something like 5.3K instead 5369. recently changed file listed last using -rt. can useful finding recent edits checking see new output file written.","code":"$ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"manual-pages-on-the-web","dir":"","previous_headings":"","what":"Manual pages on the web","title":null,"text":"course, third way access help commands: searching internet via web browser. using internet search, including phrase unix man page search query help find relevant results. GNU provides links manuals including core GNU utilities, covers many commands introduced within lesson.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"exploring-more-ls-options","dir":"","previous_headings":"","what":"Exploring More ls Options","title":null,"text":"can also use two options time. command ls used -l option? use -l -h option? output properties cover lesson (file permissions ownership), rest useful nevertheless.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"listing-in-reverse-chronological-order","dir":"","previous_headings":"","what":"Listing in Reverse Chronological Order","title":null,"text":"default, ls lists contents directory alphabetical order name. command ls -t lists items time last change instead alphabetically. command ls -r lists contents directory reverse order. file displayed last combine -t -r options? Hint: may need use -l option see last changed dates.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"exploring-other-directories","dir":"","previous_headings":"","what":"Exploring Other Directories","title":null,"text":"can use ls current working directory, can use list contents different directory. Let’s take look Desktop directory running ls -F Desktop, .e., command ls -F option argument Desktop. argument Desktop tells ls want listing something current working directory: Note directory named Desktop exist current working directory, command return error. Typically, Desktop directory exists home directory, assume current working directory bash shell. output list files sub-directories Desktop directory, including shell-lesson-data directory downloaded setup lesson. (systems, contents Desktop directory shell show icons graphical user interface behind open windows. See case .) Organizing things hierarchically helps us keep track work. ’s possible put hundreds files home directory just ’s possible pile hundreds printed papers desk, ’s much easier find things ’ve organized sensibly-named subdirectories. Now know shell-lesson-data directory located Desktop directory, can two things. First, using strategy , can look contents passing directory name ls: Second, can actually change location different directory, longer located home directory. command change locations cd followed directory name change working directory. cd stands ‘change directory’, bit misleading. command doesn’t change directory; changes shell’s current working directory. words changes shell’s settings directory . cd command akin double-clicking folder graphical interface get folder. Let’s say want move exercise-data directory saw . can use following series commands get : commands move us home directory Desktop directory, shell-lesson-data directory, exercise-data directory. notice cd doesn’t print anything. normal. Many shell commands output anything screen successfully executed. run pwd , can see now /Users/nelle/Desktop/shell-lesson-data/exercise-data. run ls -F without arguments now, lists contents /Users/nelle/Desktop/shell-lesson-data/exercise-data, ’s now : now know go directory tree (.e. go subdirectory), go (.e. leave directory go parent directory)? might try following: get error! ? methods far, cd can see sub-directories inside current directory. different ways see directories current location; ’ll start simplest. shortcut shell move one directory level. works follows: .. special directory name meaning “directory containing one”, succinctly, parent current directory. Sure enough, run pwd running cd .., ’re back /Users/nelle/Desktop/shell-lesson-data: special directory .. doesn’t usually show run ls. want display , can add -option ls -F: -stands ‘show ’ (including hidden files); forces ls show us file directory names begin ., .. (, ’re /Users/nelle, refers /Users directory). can see, also displays another special directory ’s just called ., means ‘current working directory’. may seem redundant name , ’ll see uses soon. Note command line tools, multiple options can combined single - spaces options; ls -F -equivalent ls -Fa. three commands basic commands navigating filesystem computer: pwd, ls, cd. Let’s explore variations commands. happens type cd , without giving directory? can check happened? pwd gives us answer! turns cd without argument return home directory, great ’ve got lost filesystem. Let’s try returning exercise-data directory . Last time, used three commands, can actually string together list directories move exercise-data one step: Check ’ve moved right place running pwd ls -F. want move one level data directory, use cd ... another way move directory, regardless current location. far, specifying directory names, even directory path (), using relative paths. use relative path command like ls cd, tries find location , rather root file system. However, possible specify absolute path directory including entire path root directory, indicated leading slash. leading / tells computer follow path root file system, always refers exactly one directory, matter run command. allows us move shell-lesson-data directory anywhere filesystem (including inside exercise-data). find absolute path ’re looking , can use pwd extract piece need move shell-lesson-data. Run pwd ls -F ensure ’re directory expect. : . stands current directory. : / stands root directory. : Nelle’s home directory /Users/nelle. : command goes two levels, .e. ends /Users. Yes: ~ stands user’s home directory, case /Users/nelle. : command navigate directory home current directory exists. Yes: unnecessarily complicated, correct. Yes: shortcut go back user’s home directory. Yes: goes one level. : directory backup /Users. : content Users/thing/backup, .., asked one level . : see previous explanation. Yes: ../backup/ refers /Users/backup/. : pwd name directory. Yes: ls without directory argument lists files directories current directory. Yes: uses absolute path explicitly.","code":"$ ls -F Desktop shell-lesson-data/ $ ls -F Desktop/shell-lesson-data exercise-data/  north-pacific-gyre/ $ cd Desktop $ cd shell-lesson-data $ cd exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ ls -F alkanes/  animal-counts/  creatures/  numbers.txt  writing/ $ cd shell-lesson-data -bash: cd: shell-lesson-data: No such file or directory $ cd .. $ pwd /Users/nelle/Desktop/shell-lesson-data $ ls -F -a ./  ../  exercise-data/  north-pacific-gyre/ $ cd $ pwd /Users/nelle $ cd Desktop/shell-lesson-data/exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ cd /Users/nelle/Desktop/shell-lesson-data"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"other-hidden-files","dir":"","previous_headings":"","what":"Other Hidden Files","title":null,"text":"addition hidden directories .. ., may also see file called .bash_profile. file usually contains shell configuration settings. may also see files directories beginning .. usually files directories used configure different programs computer. prefix . used prevent configuration files cluttering terminal standard ls command used.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"two-more-shortcuts","dir":"","previous_headings":"","what":"Two More Shortcuts","title":null,"text":"shell interprets tilde (~) character start path mean “current user’s home directory”. example, Nelle’s home directory /Users/nelle, ~/data equivalent /Users/nelle/data. works first character path; //~/elsewhere //Users/nelle/elsewhere. Another shortcut - (dash) character. cd translate - previous directory , faster remember, type, full path. efficient way moving back forth two directories – .e. execute cd - twice, end back starting directory. difference cd .. cd - former brings , latter brings back. Try ! First navigate ~/Desktop/shell-lesson-data (already ). cd exercise-data/creatures directory Now run ’ll see ’re back ~/Desktop/shell-lesson-data. Run cd - ’re back ~/Desktop/shell-lesson-data/exercise-data/creatures","code":"$ cd ~/Desktop/shell-lesson-data $ cd exercise-data/creatures $ cd -"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"absolute-vs-relative-paths","dir":"","previous_headings":"","what":"Absolute vs Relative Paths","title":null,"text":"Starting /Users/nelle/data, following commands Nelle use navigate home directory, /Users/nelle? cd . cd / cd /home/nelle cd ../.. cd ~ cd home cd ~/data/.. cd cd ..","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"relative-path-resolution","dir":"","previous_headings":"","what":"Relative Path Resolution","title":null,"text":"Using filesystem diagram , pwd displays /Users/thing, ls -F ../backup display? ../backup: file directory 2012-12-01 2013-01-08 2013-01-27 2012-12-01/ 2013-01-08/ 2013-01-27/ original/ pnas_final/ pnas_sub/","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"ls-reading-comprehension","dir":"","previous_headings":"","what":"ls Reading Comprehension","title":null,"text":"Using filesystem diagram , pwd displays /Users/backup, -r tells ls display things reverse order, command(s) result following output: ls pwd ls -r -F ls -r -F /Users/backup","code":"pnas_sub/ pnas_final/ original/"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"when-to-use-short-or-long-options","dir":"","previous_headings":"","what":"When to use short or long options","title":null,"text":"options exist short long options: Use short option typing commands directly shell minimize keystrokes get task done faster. Use long option scripts provide clarity. read many times typed .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"nelles-pipeline-organizing-files","dir":"","previous_headings":"","what":"Nelle’s Pipeline: Organizing Files","title":null,"text":"Knowing much files directories, Nelle ready organize files protein assay machine create. creates directory called north-pacific-gyre (remind data came ), contain data files assay machine data processing scripts. physical samples labelled according lab’s convention unique ten-character ID, ‘NENE01729A’. ID used collection log record location, time, depth, characteristics sample, decides use within filename data file. Since output assay machine plain text, call files NENE01729A.txt, NENE01812A.txt, . 1520 files go directory. Now current directory shell-lesson-data, Nelle can see files using command: command lot type, can let shell work called tab completion. types: presses Tab (tab key keyboard), shell automatically completes directory name : Pressing Tab nothing, since multiple possibilities; pressing Tab twice brings list files. Nelle presses G presses Tab , shell append ‘goo’ since files start ‘g’ share first three characters ‘goo’. see files, can press Tab twice . called tab completion, see many tools go .","code":"$ ls north-pacific-gyre/ $ ls nor $ ls north-pacific-gyre/ $ ls north-pacific-gyre/goo ls north-pacific-gyre/goo goodiff.sh   goostats.sh"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"file system responsible managing information disk. Information stored files, stored directories (folders). Directories can also store directories, form directory tree. pwd prints user’s current working directory. ls [path] prints listing specific file directory; ls lists current working directory. cd [path] changes current working directory. commands take options begin single -. Directory names path separated / Unix, \\ Windows. / root directory whole file system. absolute path specifies location root file system. relative path specifies location starting current location. . means ‘current directory’; .. means ‘directory current one’.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"step-one-see-where-we-are-and-what-we-already-have","dir":"","previous_headings":"","what":"Step one: see where we are and what we already have","title":null,"text":"still shell-lesson-data directory Desktop, can check using: Next ’ll move exercise-data/writing directory see contains:","code":"$ pwd /Users/nelle/Desktop/shell-lesson-data $ cd exercise-data/writing/ $ ls -F haiku.txt  LittleWomen.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"create-a-directory","dir":"","previous_headings":"","what":"Create a directory","title":null,"text":"Let’s create new directory called thesis using command mkdir thesis (output): might guess name, mkdir means ‘make directory’. Since thesis relative path (.e., leading slash, like //ever/thesis), new directory created current working directory: Since ’ve just created thesis directory, ’s nothing yet: Note mkdir limited creating single directories one time. -p option allows mkdir create directory nested subdirectories single operation: -R option ls command list nested subdirectories within directory. Let’s use ls -FR recursively list new directory hierarchy just created project directory:","code":"$ mkdir thesis $ ls -F haiku.txt  LittleWomen.txt  thesis/ $ ls -F thesis $ mkdir -p ../project/data ../project/results $ ls -FR ../project ../project/: data/  results/  ../project/data:  ../project/results:"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"two-ways-of-doing-the-same-thing","dir":"","previous_headings":"","what":"Two ways of doing the same thing","title":null,"text":"Using shell create directory different using file explorer. open current directory using operating system’s graphical file explorer, thesis directory appear . shell file explorer two different ways interacting files, files directories .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"good-names-for-files-and-directories","dir":"","previous_headings":"","what":"Good names for files and directories","title":null,"text":"Complicated names files directories can make life painful working command line. provide useful tips names files directories. Don’t use spaces. Spaces can make name meaningful, since spaces used separate arguments command line better avoid names files directories. can use - _ instead (e.g. north-pacific-gyre/ rather north pacific gyre/). test , try typing mkdir north pacific gyre see directory (directories!) made check ls -F. Don’t begin name - (dash). Commands treat names starting - options. Stick letters, numbers, . (period ‘full stop’), - (dash) _ (underscore). Many characters special meanings command line. learn lesson. special characters can cause command work expected can even result data loss. need refer names files directories spaces special characters, surround name quotes (\"\").","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"create-a-text-file","dir":"","previous_headings":"","what":"Create a text file","title":null,"text":"Let’s change working directory thesis using cd, run text editor called Nano create file called draft.txt: Let’s type lines text. ’re happy text, can press Ctrl+O (press Ctrl Control key , holding , press O key) write data disk. asked provide name file contain text. Press Return accept suggested default draft.txt. file saved, can use Ctrl+X quit editor return shell. nano doesn’t leave output screen exits, ls now shows created file called draft.txt: touch command generates new file called my_file.txt current directory. can observe newly generated file typing ls command line prompt. my_file.txt can also viewed GUI file explorer. inspect file ls -l, note size my_file.txt 0 bytes. words, contains data. open my_file.txt using text editor blank. programs generate output files , instead require empty files already generated. program run, searches existing file populate output. touch command allows efficiently generate blank text file used programs.","code":"$ cd thesis $ nano draft.txt $ ls draft.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"which-editor","dir":"","previous_headings":"","what":"Which Editor?","title":null,"text":"say, ‘nano text editor’ really mean ‘text’. can work plain character data, tables, images, human-friendly media. use examples one least complex text editors. However, trait, may powerful enough flexible enough work need workshop. Unix systems (Linux macOS), many programmers use Emacs Vim (require time learn), graphical editor Gedit VScode. Windows, may wish use Notepad++. Windows also built-editor called notepad can run command line way nano purposes lesson. matter editor use, need know searches saves files. start shell, (probably) use current working directory default location. use computer’s start menu, may want save files Desktop Documents directory instead. can change navigating another directory first time ‘Save …’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"control-ctrl-or-key","dir":"","previous_headings":"","what":"Control, Ctrl, or ^ Key","title":null,"text":"Control key also called ‘Ctrl’ key. various ways using Control key may described. example, may see instruction press Control key , holding , press X key, described : Control-X Control+X Ctrl-X Ctrl+X ^X C-x nano, along bottom screen ’ll see ^G Get Help ^O WriteOut. means can use Control-G get help Control-O save file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"creating-files-a-different-way","dir":"","previous_headings":"","what":"Creating Files a Different Way","title":null,"text":"seen create text files using nano editor. Now, try following command: touch command ? look current directory using GUI file explorer, file show ? Use ls -l inspect files. large my_file.txt? might want create file way?","code":"$ touch my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"creating-files-a-different-way-1","dir":"","previous_headings":"","what":"Creating Files a Different Way (continued)","title":null,"text":"avoid confusion later , suggest removing file ’ve just created proceeding rest episode, otherwise future outputs may vary given lesson. , use following command:","code":"$ rm my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s In A Name?","title":null,"text":"may noticed Nelle’s files named ‘something dot something’, part lesson, always used extension .txt. just convention; can call file mythesis almost anything else want. However, people use two-part names time help (programs) tell different kinds files apart. second part name called filename extension indicates type data file holds: .txt signals plain text file, .pdf indicates PDF document, .cfg configuration file full parameters program , .png PNG image, . just convention, albeit important one. Files merely contain bytes; ’s us programs interpret bytes according rules plain text files, PDF documents, configuration files, images, . Naming PNG image whale whale.mp3 doesn’t somehow magically turn recording whale song, though might cause operating system associate file music player program. case, someone double-clicked whale.mp3 file explorer program,music player automatically (erroneously) attempt open whale.mp3 file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"moving-files-to-a-new-folder","dir":"","previous_headings":"","what":"Moving Files to a new folder","title":null,"text":"running following commands, Jamie realizes put files sucrose.dat maltose.dat wrong folder. files placed raw folder. Fill blanks move files raw/ folder (.e. one forgot put )","code":"$ ls -F  analyzed/ raw/ $ ls -F analyzed fructose.dat glucose.dat maltose.dat sucrose.dat $ cd analyzed $ mv sucrose.dat maltose.dat ____/____"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"renaming-files","dir":"","previous_headings":"","what":"Renaming Files","title":null,"text":"Suppose created plain-text file current directory contain list statistical tests need analyze data, named statstics.txt creating saving file realize misspelled filename! want correct mistake, following commands use ? cp statstics.txt statistics.txt mv statstics.txt statistics.txt mv statstics.txt . cp statstics.txt .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"moving-and-copying","dir":"","previous_headings":"","what":"Moving and Copying","title":null,"text":"output closing ls command sequence shown ? proteins-saved.dat recombined recombined proteins.dat recombined proteins-saved.dat","code":"$ pwd /Users/jamie/data $ ls proteins.dat $ mkdir recombined $ mv proteins.dat recombined/ $ cp recombined/proteins.dat ../proteins-saved.dat $ ls"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"deleting-is-forever","dir":"","previous_headings":"","what":"Deleting Is Forever","title":null,"text":"Unix shell doesn’t trash bin can recover deleted files (though graphical interfaces Unix ). Instead, delete files, unlinked file system storage space disk can recycled. Tools finding recovering deleted files exist, ’s guarantee ’ll work particular situation, since computer may recycle file’s disk space right away.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"using-rm-safely","dir":"","previous_headings":"","what":"Using rm Safely","title":null,"text":"happens execute rm -thesis_backup/quotations.txt? want protection using rm?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"copy-with-multiple-filenames","dir":"","previous_headings":"","what":"Copy with Multiple Filenames","title":null,"text":"exercise, can test commands shell-lesson-data/exercise-data directory. example , cp given several filenames directory name? example , cp given three file names?","code":"$ mkdir backup $ cp creatures/minotaur.dat creatures/unicorn.dat backup/ $ cd creatures $ ls -F basilisk.dat  minotaur.dat  unicorn.dat $ cp minotaur.dat unicorn.dat basilisk.dat"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"using-wildcards-for-accessing-multiple-files-at-once","dir":"","previous_headings":"","what":"Using wildcards for accessing multiple files at once","title":null,"text":"solution 3. 1. shows files whose names contain zero characters (*) followed letter t, zero characters (*) followed ane.pdb. gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb. 2. shows files whose names start zero characters (*) followed letter t, single character (?), ne. followed zero characters (*). give us octane.pdb pentane.pdb doesn’t match anything ends thane.pdb. 3. fixes problems option 2 matching two characters (??) t ne. solution. 4. shows files starting ethane.. Jamie needs move files fructose.dat sucrose.dat analyzed directory. shell expand *.dat match .dat files current directory. mv command moves list .dat files ‘analyzed’ directory. first two sets commands achieve objective. first set uses relative paths create top-level directory subdirectories. third set commands give error default behavior mkdir won’t create subdirectory non-existent directory: intermediate level folders must created first. fourth set commands achieve objective. Remember, -p option, followed path one directories, cause mkdir create intermediate subdirectories required. final set commands generates ‘raw’ ‘processed’ directories level ‘data’ directory.","code":"$ cp *calibration.txt backup/calibration $ cp 2015-11-* send_to_bob/all_november_files/ $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/ mv *.dat analyzed"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"wildcards","dir":"","previous_headings":"","what":"Wildcards","title":null,"text":"* wildcard, represents zero characters. Let’s consider shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, every file ends ‘.pdb’. hand, p*.pdb represents pentane.pdb propane.pdb, ‘p’ front can represent filenames begin letter ‘p’. ? also wildcard, represents exactly one character. ?ethane.pdb represent methane.pdb whereas *ethane.pdb represents ethane.pdb methane.pdb. Wildcards can used combination . example, ???ane.pdb indicates three characters followed ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb. shell sees wildcard, expands wildcard create list matching filenames running preceding command. exception, wildcard expression match file, Bash pass expression argument command . example, typing ls *.pdf alkanes directory (contains files names ending .pdb) results error message file called *.pdf. However, generally commands like wc ls see lists file names matching expressions, wildcards . shell, programs, expands wildcards.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"list-filenames-matching-a-pattern","dir":"","previous_headings":"","what":"List filenames matching a pattern","title":null,"text":"run alkanes directory, ls command(s) produce output? ethane.pdb   methane.pdb ls *t*ane.pdb ls *t?ne.* ls *t??ne.pdb ls ethane.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"more-on-wildcards","dir":"","previous_headings":"","what":"More on Wildcards","title":null,"text":"Sam directory containing calibration data, datasets, descriptions datasets: heading another field trip, wants back data send datasets colleague Bob. Sam uses following commands get job done: Help Sam filling blanks. resulting directory structure look like ","code":". ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   └── datasets └── send_to_bob     ├── all_datasets_created_on_a_23rd     └── all_november_files $ cp *dataset* backup/datasets $ cp ____calibration____ backup/calibration $ cp 2015-____-____ send_to_bob/all_november_files/ $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/ . ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   │   ├── 2015-10-23-calibration.txt │   │   ├── 2015-10-26-calibration.txt │   │   └── 2015-11-23-calibration.txt │   └── datasets │       ├── 2015-10-23-dataset1.txt │       ├── 2015-10-23-dataset2.txt │       ├── 2015-10-23-dataset_overview.txt │       ├── 2015-10-26-dataset1.txt │       ├── 2015-10-26-dataset2.txt │       ├── 2015-10-26-dataset_overview.txt │       ├── 2015-11-23-dataset1.txt │       ├── 2015-11-23-dataset2.txt │       └── 2015-11-23-dataset_overview.txt └── send_to_bob     ├── all_datasets_created_on_a_23rd     │   ├── 2015-10-23-dataset1.txt     │   ├── 2015-10-23-dataset2.txt     │   ├── 2015-10-23-dataset_overview.txt     │   ├── 2015-11-23-dataset1.txt     │   ├── 2015-11-23-dataset2.txt     │   └── 2015-11-23-dataset_overview.txt     └── all_november_files         ├── 2015-11-23-calibration.txt         ├── 2015-11-23-dataset1.txt         ├── 2015-11-23-dataset2.txt         └── 2015-11-23-dataset_overview.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"organizing-directories-and-files","dir":"","previous_headings":"","what":"Organizing Directories and Files","title":null,"text":"Jamie working project, sees files aren’t well organized: fructose.dat sucrose.dat files contain output data analysis. command(s) covered lesson need run commands produce output shown?","code":"$ ls -F analyzed/  fructose.dat    raw/   sucrose.dat $ ls -F analyzed/   raw/ $ ls analyzed fructose.dat    sucrose.dat"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"reproduce-a-folder-structure","dir":"","previous_headings":"","what":"Reproduce a folder structure","title":null,"text":"’re starting new experiment like duplicate directory structure previous experiment can add new data. Assume previous experiment folder called 2016-05-18, contains data folder turn contains folders named raw processed contain data files. goal copy folder structure 2016-05-18 folder folder called 2016-05-20 final directory structure looks like : following set commands achieve objective? commands ?","code":"2016-05-20/ └── data    ├── processed    └── raw $ mkdir 2016-05-20 $ mkdir 2016-05-20/data $ mkdir 2016-05-20/data/processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ cd data $ mkdir raw processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20/data/processed $ mkdir -p 2016-05-20/data/raw $ mkdir -p 2016-05-20/data/processed $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ mkdir raw processed"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"cp [old] [new] copies file. mkdir [path] creates new directory. mv [old] [new] moves (renames) file directory. rm [path] removes (deletes) file. * matches zero characters filename, *.txt matches files ending .txt. ? matches single character filename, ?.txt matches .txt .txt. Use Control key may described many ways, including Ctrl-X, Control-X, ^X. shell trash bin: something deleted, ’s really gone. files’ names something.extension. extension isn’t required, doesn’t guarantee anything, normally used indicate type data file. Depending type work , may need powerful text editor Nano.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"why-isnt-it-doing-anything","dir":"","previous_headings":"","what":"Why Isn’t It Doing Anything?","title":null,"text":"happens command supposed process file, don’t give filename? example, type: don’t type *.pdb (anything else) command? Since doesn’t filenames, wc assumes supposed process input given command prompt, just sits waits us give data interactively. outside, though, see sitting , command doesn’t appear anything. make kind mistake, can escape state holding control key (Ctrl) pressing letter C : Ctrl+C. release keys.","code":"$ wc -l"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"output-page-by-page","dir":"","previous_headings":"","what":"Output Page by Page","title":null,"text":"’ll continue use cat lesson, convenience consistency, disadvantage always dumps whole file onto screen. useful practice command less (e.g. less lengths.txt). displays screenful file, stops. can go forward one screenful pressing spacebar, back one pressing b. Press q quit.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"what-does-sort--n-do","dir":"","previous_headings":"","what":"What Does sort -n Do?","title":null,"text":"file shell-lesson-data/exercise-data/numbers.txt contains following lines: run sort file, output : run sort -n file, get instead: Explain -n effect.","code":"10 2 19 22 6 10 19 2 22 6 2 6 10 19 22"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"redirecting-to-the-same-file","dir":"","previous_headings":"","what":"Redirecting to the same file","title":null,"text":"’s bad idea try redirecting output command operates file file. example: something like may give incorrect results /delete contents lengths.txt.","code":"$ sort -n lengths.txt > lengths.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"what-does-mean","dir":"","previous_headings":"","what":"What Does >> Mean?","title":null,"text":"seen use >, similar operator >> works slightly differently. ’ll learn differences two operators printing strings. can use echo command print strings e.g. Now test commands reveal difference two operators: : Hint: Try executing command twice row examining output files.","code":"$ echo The echo command prints text The echo command prints text $ echo hello > testfile01.txt $ echo hello >> testfile02.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"appending-data","dir":"","previous_headings":"","what":"Appending Data","title":null,"text":"already met head command, prints lines start file. tail similar, prints lines end file instead. Consider file shell-lesson-data/exercise-data/animal-counts/animals.csv. commands, select answer corresponds file animals-subset.csv: first three lines animals.csv last two lines animals.csv first three lines last two lines animals.csv second third lines animals.csv","code":"$ head -n 3 animals.csv > animals-subset.csv $ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"piping-commands-together","dir":"","previous_headings":"","what":"Piping Commands Together","title":null,"text":"current directory, want find 3 files least number lines. command listed work? wc -l * > sort -n > head -n 3 wc -l * | sort -n | head -n 1-3 wc -l * | head -n 3 | sort -n wc -l * | sort -n | head -n 3","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"pipe-reading-comprehension","dir":"","previous_headings":"","what":"Pipe Reading Comprehension","title":null,"text":"file called animals.csv (shell-lesson-data/exercise-data/animal-counts folder) contains following data: text passes pipes final redirect pipeline ? Note, sort -r command sorts reverse order. Hint: build pipeline one command time test understanding","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"pipe-construction","dir":"","previous_headings":"","what":"Pipe Construction","title":null,"text":"file animals.csv previous exercise, consider following command: cut command used remove ‘cut ’ certain sections line file, cut expects lines separated columns Tab character. character used way called delimiter. example use -d option specify comma delimiter character. also used -f option specify want extract second field (column). gives following output: uniq command filters adjacent matching lines file. extend pipeline (using uniq another command) find animals file contains (without duplicates names)?","code":"$ cut -d , -f 2 animals.csv deer rabbit raccoon rabbit deer fox rabbit bear"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"which-pipe","dir":"","previous_headings":"","what":"Which Pipe?","title":null,"text":"file animals.csv contains 8 lines data formatted follows: uniq command -c option gives count number times line occurs input. Assuming current directory shell-lesson-data/exercise-data/animal-counts, command use produce table shows total count type animal file? sort animals.csv | uniq -c sort -t, -k2,2 animals.csv | uniq -c cut -d, -f 2 animals.csv | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c | wc -l","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 ..."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"removing-unneeded-files","dir":"","previous_headings":"","what":"Removing Unneeded Files","title":null,"text":"Suppose want delete processed data files, keep raw files processing script save storage. raw files end .dat processed files end .txt. following remove processed data files, processed data files? rm ?.txt rm *.txt rm * .txt rm *.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"wc counts lines, words, characters inputs. cat displays contents inputs. sort sorts inputs. head displays first 10 lines input. tail displays last 10 lines input. command > [file] redirects command’s output file (overwriting existing content). command >> [file] appends command’s output file. [first] | [second] pipeline: output first command used input second. best way use shell use pipes combine simple single-purpose programs (filters).","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"follow-the-prompt","dir":"","previous_headings":"","what":"Follow the Prompt","title":null,"text":"shell prompt changes $ > back typing loop. second prompt, >, different remind us haven’t finished typing complete command yet. semicolon, ;, can used separate two commands written single line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"same-symbols-different-meanings","dir":"","previous_headings":"","what":"Same Symbols, Different Meanings","title":null,"text":"see > used shell prompt, whereas > also used redirect output. Similarly, $ used shell prompt, , saw earlier, also used ask shell get value variable. shell prints > $ expects type something, symbol prompt. type > $ , instruction shell redirect output get value variable.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"write-your-own-loop","dir":"","previous_headings":"","what":"Write your own loop","title":null,"text":"write loop echoes 10 numbers 0 9?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"variables-in-loops","dir":"","previous_headings":"","what":"Variables in Loops","title":null,"text":"exercise refers shell-lesson-data/exercise-data/alkanes directory. ls *.pdb gives following output: output following code? Now, output following code? two loops give different outputs?","code":"cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb $ for datafile in *.pdb > do >     ls *.pdb > done $ for datafile in *.pdb > do >     ls $datafile > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"limiting-sets-of-files","dir":"","previous_headings":"","what":"Limiting Sets of Files","title":null,"text":"output running following loop shell-lesson-data/exercise-data/alkanes directory? files listed. files listed. cubane.pdb, octane.pdb pentane.pdb listed. cubane.pdb listed.","code":"$ for filename in c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"limiting-sets-of-files-1","dir":"","previous_headings":"","what":"Limiting Sets of Files (continued)","title":null,"text":"output differ using command instead? files listed. files listed time. files listed time. files cubane.pdb octane.pdb listed. file octane.pdb listed.","code":"$ for filename in *c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"saving-to-a-file-in-a-loop---part-one","dir":"","previous_headings":"","what":"Saving to a File in a Loop - Part One","title":null,"text":"shell-lesson-data/exercise-data/alkanes directory, effect loop? Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb, text propane.pdb saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, text three files concatenated saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb, text propane.pdb saved file called alkanes.pdb. None .","code":"for alkanes in *.pdb do     echo $alkanes     cat $alkanes > alkanes.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"saving-to-a-file-in-a-loop---part-two","dir":"","previous_headings":"","what":"Saving to a File in a Loop - Part Two","title":null,"text":"Also shell-lesson-data/exercise-data/alkanes directory, output following loop? text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb concatenated saved file called .pdb. text ethane.pdb saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb concatenated saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb printed screen saved file called .pdb.","code":"for datafile in *.pdb do     cat $datafile >> all.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"spaces-in-names","dir":"","previous_headings":"","what":"Spaces in Names","title":null,"text":"Spaces used separate elements list going loop . one elements contains space character, need surround quotes, thing loop variable. Suppose data files named: loop files, need add double quotes like : simpler avoid using spaces (special characters) filenames. files don’t exist, run code, head command unable find ; however, error message returned show name files expecting: Try removing quotes around $filename loop see effect quote marks spaces. Note get result loop command unicorn.dat run code creatures directory:","code":"red dragon.dat purple unicorn.dat $ for filename in \"red dragon.dat\" \"purple unicorn.dat\" > do >     head -n 100 \"$filename\" | tail -n 20 > done head: cannot open ‘red dragon.dat' for reading: No such file or directory head: cannot open ‘purple unicorn.dat' for reading: No such file or directory head: cannot open ‘red' for reading: No such file or directory head: cannot open ‘dragon.dat' for reading: No such file or directory head: cannot open ‘purple' for reading: No such file or directory CGGTACCGAA AAGGGTCGCG CAAGTGTTCC ..."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"beginning-and-end","dir":"","previous_headings":"","what":"Beginning and End","title":null,"text":"can move beginning line shell typing Ctrl+end using Ctrl+E.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"those-who-know-history-can-choose-to-repeat-it","dir":"","previous_headings":"","what":"Those Who Know History Can Choose to Repeat It","title":null,"text":"Another way repeat previous work use history command get list last hundred commands executed, use !123 (‘123’ replaced command number) repeat one commands. example, Nelle types : can re-run goostats.sh files simply typing !459.","code":"$ history | tail -n 5 456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done 457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done 458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done 459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done 460  history | tail -n 5"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"other-history-commands","dir":"","previous_headings":"","what":"Other History Commands","title":null,"text":"number shortcut commands getting history. Ctrl+R enters history search mode ‘reverse--search’ finds recent command history matches text enter next. Press Ctrl+R one additional times search earlier matches. can use left right arrow keys choose line edit hit Return run command. !! retrieves immediately preceding command (may may find convenient using ↑) !$ retrieves last word last command. ’s useful often might expect: bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, can type less !$ look file stats-NENE01729B.txt, quicker ↑ editing command-line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"doing-a-dry-run","dir":"","previous_headings":"","what":"Doing a Dry Run","title":null,"text":"loop way many things — make many mistakes wrong thing. One way check loop echo commands run instead actually running . Suppose want preview commands following loop execute without actually running commands: difference two loops , one want run?","code":"$ for datafile in *.pdb > do >     cat $datafile >> all.pdb > done # Version 1 $ for datafile in *.pdb > do >     echo cat $datafile >> all.pdb > done # Version 2 $ for datafile in *.pdb > do >     echo \"cat $datafile >> all.pdb\" > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"nested-loops","dir":"","previous_headings":"","what":"Nested Loops","title":null,"text":"Suppose want set directory structure organize experiments measuring reaction rate constants different compounds different temperatures. result following code:","code":"$ for species in cubane ethane methane > do >     for temperature in 25 30 37 40 >     do >         mkdir $species-$temperature >     done > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"loop repeats commands every thing list. Every loop needs variable refer thing currently operating . Use $name expand variable (.e., get value). ${name} can also used. use spaces, quotes, wildcard characters ‘*’ ‘?’ filenames, complicates variable expansion. Give files consistent names easy match wildcard patterns make easy select looping. Use -arrow key scroll previous commands edit repeat . Use Ctrl+R search previously entered commands. Use history display recent commands, ![number] repeat command number.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"text-vs--whatever","dir":"","previous_headings":"","what":"Text vs. Whatever","title":null,"text":"usually call programs like Microsoft Word LibreOffice Writer “text editors”, need bit careful comes programming. default, Microsoft Word uses .docx files store text, also formatting information fonts, headings, . extra information isn’t stored characters doesn’t mean anything tools like head, expects input files contain nothing letters, digits, punctuation standard computer keyboard. editing programs, therefore, must either use plain text editor careful save files plain text.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"double-quotes-around-arguments","dir":"","previous_headings":"","what":"Double-Quotes Around Arguments","title":null,"text":"reason put loop variable inside double-quotes, case filename happens contain spaces, surround $1 double-quotes.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"list-unique-species","dir":"","previous_headings":"","what":"List Unique Species","title":null,"text":"Leah several hundred data files, formatted like : example type file given shell-lesson-data/exercise-data/animal-counts/animals.csv. can use command cut -d , -f 2 animals.csv | sort | uniq produce unique species animals.csv. order avoid type series commands every time, scientist may choose write shell script instead. Write shell script called species.sh takes number filenames command-line arguments uses variation command print list unique species appearing files separately.","code":"2013-11-05,deer,5 2013-11-05,rabbit,22 2013-11-05,raccoon,7 2013-11-06,rabbit,19 2013-11-06,deer,2 2013-11-06,fox,1 2013-11-07,rabbit,18 2013-11-07,bear,1"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"why-record-commands-in-the-history-before-running-them","dir":"","previous_headings":"","what":"Why Record Commands in the History Before Running Them?","title":null,"text":"run command: last command file history command , .e., shell added history command log actually running . fact, shell always adds commands log running . think ?","code":"$ history | tail -n 5 > recent.sh"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"variables-in-shell-scripts","dir":"","previous_headings":"","what":"Variables in Shell Scripts","title":null,"text":"alkanes directory, imagine shell script called script.sh containing following commands: alkanes directory, type following command: following outputs expect see? lines first last lines file ending .pdb alkanes directory first last line file ending .pdb alkanes directory first last line file alkanes directory error quotes around *.pdb","code":"head -n $2 $1 tail -n $3 $1 $ bash script.sh '*.pdb' 1 1"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"find-the-longest-file-with-a-given-extension","dir":"","previous_headings":"","what":"Find the Longest File With a Given Extension","title":null,"text":"Write shell script called longest.sh takes name directory filename extension arguments, prints name file lines directory extension. example: print name .pdb file shell-lesson-data/exercise-data/alkanes lines. Feel free test script another directory e.g.","code":"$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb $ bash longest.sh shell-lesson-data/exercise-data/writing txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"script-reading-comprehension","dir":"","previous_headings":"","what":"Script Reading Comprehension","title":null,"text":"question, consider shell-lesson-data/exercise-data/alkanes directory . contains number .pdb files addition files may created. Explain following three scripts run bash script1.sh *.pdb, bash script2.sh *.pdb, bash script3.sh *.pdb respectively.","code":"# Script 1 echo *.* # Script 2 for filename in $1 $2 $3 do     cat $filename done # Script 3 echo $@.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"debugging-scripts","dir":"","previous_headings":"","what":"Debugging Scripts","title":null,"text":"Suppose saved following script file called -errors.sh Nelle’s north-pacific-gyre directory: run north-pacific-gyre directory: output blank. figure , re-run script using -x option: output showing ? line responsible error?","code":"# Calculate stats for data files. for datafile in \"$@\" do     echo $datfile     bash goostats.sh $datafile stats-$datafile done $ bash do-errors.sh NENE*A.txt NENE*B.txt $ bash -x do-errors.sh NENE*A.txt NENE*B.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Save commands files (usually called shell scripts) re-use. bash [filename] runs commands saved file. $@ refers shell script’s command-line arguments. $1, $2, etc., refer first command-line argument, second command-line argument, etc. Place variables quotes values might spaces . Letting users decide files process flexible consistent built-Unix commands.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"using-grep","dir":"","previous_headings":"","what":"Using grep","title":null,"text":"command result following output: grep \"\" haiku.txt grep -E \"\" haiku.txt grep -w \"\" haiku.txt grep -\"\" haiku.txt","code":"and the presence of absence:"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"wildcards","dir":"","previous_headings":"","what":"Wildcards","title":null,"text":"grep‘s real power doesn’t come options, though; comes fact patterns can include wildcards. (technical name regular expressions, ’re’ ‘grep’ stands .) Regular expressions complex powerful; want complex searches, please look lesson website. taster, can find lines ‘o’ second position like : use -E option put pattern quotes prevent shell trying interpret . (pattern contained *, example, shell try expand running grep.) ^ pattern anchors match start line. . matches single character (just like ? shell), o matches actual ‘o’.","code":"$ grep -E \"^.o\" haiku.txt You bring fresh toner. Today it is not working Software is like that."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"tracking-a-species","dir":"","previous_headings":"","what":"Tracking a Species","title":null,"text":"Leah several hundred data files saved one directory, formatted like : wants write shell script takes species first command-line argument directory second argument. script return one file called <species>.txt containing list dates number species seen date. example using data shown , rabbit.txt contain: , line contains individual command, pipe. Arrange sequence one command order achieve Leah’s goal: Hint: use man grep look grep text recursively directory man cut select one field line. example file provided shell-lesson-data/exercise-data/animal-counts/animals.csv","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 2012-11-05,22 2012-11-06,19 2012-11-07,16 cut -d : -f 2 > | grep -w $1 -r $2 | $1.txt cut -d , -f 1,3"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"little-women","dir":"","previous_headings":"","what":"Little Women","title":null,"text":"friend, just finished reading Little Women Louisa May Alcott, argument. four sisters book, Jo, Meg, Beth, Amy, friend thinks Jo mentioned. , however, certain Amy. Luckily, file LittleWomen.txt containing full text novel (shell-lesson-data/exercise-data/writing/LittleWomen.txt). Using loop, tabulate number times four sisters mentioned? Hint: one solution might employ commands grep wc |, another might utilize grep options. often one way solve programming task, particular solution usually chosen based combination yielding correct result, elegance, readability, speed.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"listing-vs--finding","dir":"","previous_headings":"","what":"Listing vs. Finding","title":null,"text":"ls find can made similar things given right options, normal circumstances, ls lists everything can, find searches things certain properties shows .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"matching-and-subtracting","dir":"","previous_headings":"","what":"Matching and Subtracting","title":null,"text":"-v option grep inverts pattern matching, lines match pattern printed. Given , following commands find .dat files creatures except unicorn.dat? thought answer, can test commands shell-lesson-data/exercise-data directory. find creatures -name \"*.dat\" | grep -v unicorn find creatures -name *.dat | grep -v unicorn grep -v \"unicorn\" $(find creatures -name \"*.dat\") None .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"binary-files","dir":"","previous_headings":"","what":"Binary Files","title":null,"text":"focused exclusively finding patterns text files. data stored images, databases, format? handful tools extend grep handle non text formats. generalizable approach convert data text, extract text-like elements data. one hand, makes simple things easy . hand, complex things usually impossible. example, ’s easy enough write program extract X Y dimensions image files grep play , write something find values spreadsheet whose cells contained formulas? last option recognize shell text processing limits, use another programming language. time comes , don’t hard shell. Many modern programming languages borrowed lot ideas , imitation also sincerest form praise.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"find-pipeline-reading-comprehension","dir":"","previous_headings":"","what":"find Pipeline Reading Comprehension","title":null,"text":"Write short explanatory comment following shell script:","code":"wc -l $(find . -name \"*.dat\") | sort -n"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"find finds files specific properties match patterns. grep selects lines files match patterns. --help option supported many bash commands, programs can run within Bash, display information use commands programs. man [command] displays manual page given command. $([command]) inserts command’s output place.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":null,"text":"lesson guides basics file systems shell. stored files computer recognize word “file” either “directory” “folder” (two common words thing), ’re ready lesson. ’re already comfortable manipulating files directories, searching files grep find, writing simple loops scripts, probably want explore next lesson: shell-extras.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/index.html","id":"where-to-type-commands-how-to-open-a-new-shell","dir":"","previous_headings":"","what":"Where to type commands: How to open a new shell","title":null,"text":"shell program enables us send commands computer receive output. also referred terminal command line. computers include default Unix Shell program. steps describe methods identifying opening Unix Shell program already one installed. also options identifying downloading Unix Shell program, Linux/UNIX emulator, program access Unix Shell server. none options address circumstances, try online search : Unix shell [computer model] [operating system].","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":"background","dir":"Instructor","previous_headings":"","what":"Background","title":null,"text":"Humans computers commonly interact many different ways, keyboard mouse, touch screen interfaces, using speech recognition systems. widely used way interact personal computers called graphical user interface (GUI). GUI, give instructions clicking mouse using menu-driven interactions. visual aid GUI makes intuitive learn, way delivering instructions computer scales poorly. Imagine following task: literature search, copy third line one thousand text files one thousand different directories paste single file. Using GUI, clicking desk several hours, potentially also commit error process completing repetitive task. take advantage Unix shell. Unix shell command-line interface (CLI) scripting language, allowing repetitive tasks done automatically fast. proper commands, shell can repeat tasks without modification many times want. Using shell, task literature example can accomplished seconds.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":"the-shell","dir":"Instructor","previous_headings":"","what":"The Shell","title":null,"text":"shell program users can type commands. shell, ’s possible invoke complicated programs like climate modeling software simple commands create empty directory one line code. popular Unix shell Bash (Bourne SHell — -called ’s derived shell written Stephen Bourne). Bash default shell modern implementations Unix packages provide Unix-like tools Windows. Note ‘Git Bash’ piece software enables Windows users use Bash like interface interacting Git. Using shell take effort time learn. GUI presents choices select, CLI choices automatically presented , must learn commands like new vocabulary language ’re studying. However, unlike spoken language, small number “words” (.e. commands) gets long way, ’ll cover essential today. grammar shell allows combine existing tools powerful pipelines handle large volumes data automatically. Sequences commands can written script, improving reproducibility workflows. addition, command line often easiest way interact remote machines supercomputers. Familiarity shell near essential run variety specialized tools resources including high-performance computing systems. clusters cloud computing systems become popular scientific data crunching, able interact shell becoming necessary skill. can build command-line skills covered tackle wide range scientific questions computational challenges. Let’s get started. shell first opened, presented prompt, indicating shell waiting input. shell typically uses $ prompt, may use different symbol. examples lesson, ’ll show prompt $. importantly, type prompt typing commands. type command follows prompt. rule applies lessons lessons sources. Also note type command, press Enter key execute . prompt followed text cursor, character indicates position typing appear. cursor usually flashing solid block, can also underscore pipe. may seen text editor program, example. Note prompt might look little different. particular, popular shell environments default put user name host name $. prompt might look like, e.g.: prompt might even include . worry prompt just short $. lesson depend additional information also get way. important item focus $ character see later . let’s try first command, ls, short listing. command list contents current directory:","code":"$ nelle@localhost $ $ ls Desktop     Downloads   Movies      Pictures Documents   Library     Music       Public"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":"command-not-found","dir":"Instructor","previous_headings":"","what":"Command not found","title":null,"text":"shell can’t find program whose name command typed, print error message : might happen command mis-typed program corresponding command installed.","code":"$ ks ks: command not found"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"shell program whose primary purpose read commands run programs. lesson uses Bash, default shell many implementations Unix. Programs can run Bash entering commands command-line prompt. shell’s main advantages high action--keystroke ratio, support automating repetitive tasks, capacity access networked machines. significant challenge using shell can knowing commands need run run .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"home-directory-variation","dir":"Instructor","previous_headings":"","what":"Home Directory Variation","title":null,"text":"home directory path look different different operating systems. Linux, may look like /home/nelle, Windows, similar C:\\Documents Settings\\nelle C:\\Users\\nelle. (Note may look slightly different different versions Windows.) future examples, ’ve used Mac output default - Linux Windows output may differ slightly generally similar. also assume pwd command returns user’s home directory. pwd returns something different, may need navigate using cd commands lesson work written. See Exploring Directories details cd command.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"slashes","dir":"Instructor","previous_headings":"","what":"Slashes","title":null,"text":"Notice two meanings / character. appears front file directory name, refers root directory. appears inside path, ’s just separator.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"clearing-your-terminal","dir":"Instructor","previous_headings":"","what":"Clearing your terminal","title":null,"text":"screen gets cluttered, can clear terminal using clear command. can still access previous commands using ↑ ↓ move line--line, scrolling terminal.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"getting-help","dir":"Instructor","previous_headings":"","what":"Getting help","title":null,"text":"ls lots options. two common ways find use command options accepts — depending environment, might find one ways works: can pass --help option command (available Linux Git Bash), example: can read manual man (available Linux macOS): ’ll describe ways next.","code":"$ ls --help $ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"help-for-built-in-commands","dir":"Instructor","previous_headings":"","what":"Help for built-in commands","title":null,"text":"commands built Bash shell, rather existing separate programs filesystem. One example cd (change directory) command. get message like manual entry cd, try help cd instead. help command get usage information Bash built-ins.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"the---help-option","dir":"Instructor","previous_headings":"Getting help","what":"The --help option","title":null,"text":"bash commands programs people written run within bash, support --help option displays information use command program.","code":"$ ls --help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.  Mandatory arguments to long options are mandatory for short options, too.   -a, --all                  do not ignore entries starting with .   -A, --almost-all           do not list implied . and ..       --author               with -l, print the author of each file   -b, --escape               print C-style escapes for nongraphic characters       --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,                                '--block-size=M' prints sizes in units of                                1,048,576 bytes; see SIZE format below   -B, --ignore-backups       do not list implied entries ending with ~   -c                         with -lt: sort by, and show, ctime (time of last                                modification of file status information);                                with -l: show ctime and sort by name;                                otherwise: sort by ctime, newest first   -C                         list entries by columns       --color[=WHEN]         colorize the output; WHEN can be 'always' (default                                if omitted), 'auto', or 'never'; more info below   -d, --directory            list directories themselves, not their contents   -D, --dired                generate output designed for Emacs' dired mode   -f                         do not sort, enable -aU, disable -ls --color   -F, --classify             append indicator (one of */=>@|) to entries ...        ...        ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"unsupported-command-line-options","dir":"Instructor","previous_headings":"","what":"Unsupported command-line options","title":null,"text":"try use option supported, ls commands usually print error message similar :","code":"$ ls -j ls: invalid option -- 'j' Try 'ls --help' for more information."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"the-man-command","dir":"Instructor","previous_headings":"Getting help","what":"The man command","title":null,"text":"way learn ls type command turn terminal page description ls command options. navigate man pages, may use ↑ ↓ move line--line, try B Spacebar skip full page. search character word man pages, use / followed character word searching . Sometimes search result multiple hits. , can move hits using N (moving forward) Shift+N (moving backward). quit man pages, press Q. -l option makes ls use long listing format, showing file/directory names also additional information, file size time last modification. use -h option -l option, makes file size ‘human readable’, .e. displaying something like 5.3K instead 5369. recently changed file listed last using -rt. can useful finding recent edits checking see new output file written.","code":"$ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"manual-pages-on-the-web","dir":"Instructor","previous_headings":"","what":"Manual pages on the web","title":null,"text":"course, third way access help commands: searching internet via web browser. using internet search, including phrase unix man page search query help find relevant results. GNU provides links manuals including core GNU utilities, covers many commands introduced within lesson.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"exploring-more-ls-options","dir":"Instructor","previous_headings":"","what":"Exploring More ls Options","title":null,"text":"can also use two options time. command ls used -l option? use -l -h option? output properties cover lesson (file permissions ownership), rest useful nevertheless.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"listing-in-reverse-chronological-order","dir":"Instructor","previous_headings":"","what":"Listing in Reverse Chronological Order","title":null,"text":"default, ls lists contents directory alphabetical order name. command ls -t lists items time last change instead alphabetically. command ls -r lists contents directory reverse order. file displayed last combine -t -r options? Hint: may need use -l option see last changed dates.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"exploring-other-directories","dir":"Instructor","previous_headings":"","what":"Exploring Other Directories","title":null,"text":"can use ls current working directory, can use list contents different directory. Let’s take look Desktop directory running ls -F Desktop, .e., command ls -F option argument Desktop. argument Desktop tells ls want listing something current working directory: Note directory named Desktop exist current working directory, command return error. Typically, Desktop directory exists home directory, assume current working directory bash shell. output list files sub-directories Desktop directory, including shell-lesson-data directory downloaded setup lesson. (systems, contents Desktop directory shell show icons graphical user interface behind open windows. See case .) Organizing things hierarchically helps us keep track work. ’s possible put hundreds files home directory just ’s possible pile hundreds printed papers desk, ’s much easier find things ’ve organized sensibly-named subdirectories. Now know shell-lesson-data directory located Desktop directory, can two things. First, using strategy , can look contents passing directory name ls: Second, can actually change location different directory, longer located home directory. command change locations cd followed directory name change working directory. cd stands ‘change directory’, bit misleading. command doesn’t change directory; changes shell’s current working directory. words changes shell’s settings directory . cd command akin double-clicking folder graphical interface get folder. Let’s say want move exercise-data directory saw . can use following series commands get : commands move us home directory Desktop directory, shell-lesson-data directory, exercise-data directory. notice cd doesn’t print anything. normal. Many shell commands output anything screen successfully executed. run pwd , can see now /Users/nelle/Desktop/shell-lesson-data/exercise-data. run ls -F without arguments now, lists contents /Users/nelle/Desktop/shell-lesson-data/exercise-data, ’s now : now know go directory tree (.e. go subdirectory), go (.e. leave directory go parent directory)? might try following: get error! ? methods far, cd can see sub-directories inside current directory. different ways see directories current location; ’ll start simplest. shortcut shell move one directory level. works follows: .. special directory name meaning “directory containing one”, succinctly, parent current directory. Sure enough, run pwd running cd .., ’re back /Users/nelle/Desktop/shell-lesson-data: special directory .. doesn’t usually show run ls. want display , can add -option ls -F: -stands ‘show ’ (including hidden files); forces ls show us file directory names begin ., .. (, ’re /Users/nelle, refers /Users directory). can see, also displays another special directory ’s just called ., means ‘current working directory’. may seem redundant name , ’ll see uses soon. Note command line tools, multiple options can combined single - spaces options; ls -F -equivalent ls -Fa. three commands basic commands navigating filesystem computer: pwd, ls, cd. Let’s explore variations commands. happens type cd , without giving directory? can check happened? pwd gives us answer! turns cd without argument return home directory, great ’ve got lost filesystem. Let’s try returning exercise-data directory . Last time, used three commands, can actually string together list directories move exercise-data one step: Check ’ve moved right place running pwd ls -F. want move one level data directory, use cd ... another way move directory, regardless current location. far, specifying directory names, even directory path (), using relative paths. use relative path command like ls cd, tries find location , rather root file system. However, possible specify absolute path directory including entire path root directory, indicated leading slash. leading / tells computer follow path root file system, always refers exactly one directory, matter run command. allows us move shell-lesson-data directory anywhere filesystem (including inside exercise-data). find absolute path ’re looking , can use pwd extract piece need move shell-lesson-data. Run pwd ls -F ensure ’re directory expect. : . stands current directory. : / stands root directory. : Nelle’s home directory /Users/nelle. : command goes two levels, .e. ends /Users. Yes: ~ stands user’s home directory, case /Users/nelle. : command navigate directory home current directory exists. Yes: unnecessarily complicated, correct. Yes: shortcut go back user’s home directory. Yes: goes one level. : directory backup /Users. : content Users/thing/backup, .., asked one level . : see previous explanation. Yes: ../backup/ refers /Users/backup/. : pwd name directory. Yes: ls without directory argument lists files directories current directory. Yes: uses absolute path explicitly.","code":"$ ls -F Desktop shell-lesson-data/ $ ls -F Desktop/shell-lesson-data exercise-data/  north-pacific-gyre/ $ cd Desktop $ cd shell-lesson-data $ cd exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ ls -F alkanes/  animal-counts/  creatures/  numbers.txt  writing/ $ cd shell-lesson-data -bash: cd: shell-lesson-data: No such file or directory $ cd .. $ pwd /Users/nelle/Desktop/shell-lesson-data $ ls -F -a ./  ../  exercise-data/  north-pacific-gyre/ $ cd $ pwd /Users/nelle $ cd Desktop/shell-lesson-data/exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ cd /Users/nelle/Desktop/shell-lesson-data"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"other-hidden-files","dir":"Instructor","previous_headings":"","what":"Other Hidden Files","title":null,"text":"addition hidden directories .. ., may also see file called .bash_profile. file usually contains shell configuration settings. may also see files directories beginning .. usually files directories used configure different programs computer. prefix . used prevent configuration files cluttering terminal standard ls command used.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"two-more-shortcuts","dir":"Instructor","previous_headings":"","what":"Two More Shortcuts","title":null,"text":"shell interprets tilde (~) character start path mean “current user’s home directory”. example, Nelle’s home directory /Users/nelle, ~/data equivalent /Users/nelle/data. works first character path; //~/elsewhere //Users/nelle/elsewhere. Another shortcut - (dash) character. cd translate - previous directory , faster remember, type, full path. efficient way moving back forth two directories – .e. execute cd - twice, end back starting directory. difference cd .. cd - former brings , latter brings back. Try ! First navigate ~/Desktop/shell-lesson-data (already ). cd exercise-data/creatures directory Now run ’ll see ’re back ~/Desktop/shell-lesson-data. Run cd - ’re back ~/Desktop/shell-lesson-data/exercise-data/creatures","code":"$ cd ~/Desktop/shell-lesson-data $ cd exercise-data/creatures $ cd -"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"absolute-vs-relative-paths","dir":"Instructor","previous_headings":"","what":"Absolute vs Relative Paths","title":null,"text":"Starting /Users/nelle/data, following commands Nelle use navigate home directory, /Users/nelle? cd . cd / cd /home/nelle cd ../.. cd ~ cd home cd ~/data/.. cd cd ..","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"relative-path-resolution","dir":"Instructor","previous_headings":"","what":"Relative Path Resolution","title":null,"text":"Using filesystem diagram , pwd displays /Users/thing, ls -F ../backup display? ../backup: file directory 2012-12-01 2013-01-08 2013-01-27 2012-12-01/ 2013-01-08/ 2013-01-27/ original/ pnas_final/ pnas_sub/","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"ls-reading-comprehension","dir":"Instructor","previous_headings":"","what":"ls Reading Comprehension","title":null,"text":"Using filesystem diagram , pwd displays /Users/backup, -r tells ls display things reverse order, command(s) result following output: ls pwd ls -r -F ls -r -F /Users/backup","code":"pnas_sub/ pnas_final/ original/"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"when-to-use-short-or-long-options","dir":"Instructor","previous_headings":"","what":"When to use short or long options","title":null,"text":"options exist short long options: Use short option typing commands directly shell minimize keystrokes get task done faster. Use long option scripts provide clarity. read many times typed .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"nelles-pipeline-organizing-files","dir":"Instructor","previous_headings":"","what":"Nelle’s Pipeline: Organizing Files","title":null,"text":"Knowing much files directories, Nelle ready organize files protein assay machine create. creates directory called north-pacific-gyre (remind data came ), contain data files assay machine data processing scripts. physical samples labelled according lab’s convention unique ten-character ID, ‘NENE01729A’. ID used collection log record location, time, depth, characteristics sample, decides use within filename data file. Since output assay machine plain text, call files NENE01729A.txt, NENE01812A.txt, . 1520 files go directory. Now current directory shell-lesson-data, Nelle can see files using command: command lot type, can let shell work called tab completion. types: presses Tab (tab key keyboard), shell automatically completes directory name : Pressing Tab nothing, since multiple possibilities; pressing Tab twice brings list files. Nelle presses G presses Tab , shell append ‘goo’ since files start ‘g’ share first three characters ‘goo’. see files, can press Tab twice . called tab completion, see many tools go .","code":"$ ls north-pacific-gyre/ $ ls nor $ ls north-pacific-gyre/ $ ls north-pacific-gyre/goo ls north-pacific-gyre/goo goodiff.sh   goostats.sh"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"file system responsible managing information disk. Information stored files, stored directories (folders). Directories can also store directories, form directory tree. pwd prints user’s current working directory. ls [path] prints listing specific file directory; ls lists current working directory. cd [path] changes current working directory. commands take options begin single -. Directory names path separated / Unix, \\ Windows. / root directory whole file system. absolute path specifies location root file system. relative path specifies location starting current location. . means ‘current directory’; .. means ‘directory current one’.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"step-one-see-where-we-are-and-what-we-already-have","dir":"Instructor","previous_headings":"","what":"Step one: see where we are and what we already have","title":null,"text":"still shell-lesson-data directory Desktop, can check using: Next ’ll move exercise-data/writing directory see contains:","code":"$ pwd /Users/nelle/Desktop/shell-lesson-data $ cd exercise-data/writing/ $ ls -F haiku.txt  LittleWomen.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"create-a-directory","dir":"Instructor","previous_headings":"","what":"Create a directory","title":null,"text":"Let’s create new directory called thesis using command mkdir thesis (output): might guess name, mkdir means ‘make directory’. Since thesis relative path (.e., leading slash, like //ever/thesis), new directory created current working directory: Since ’ve just created thesis directory, ’s nothing yet: Note mkdir limited creating single directories one time. -p option allows mkdir create directory nested subdirectories single operation: -R option ls command list nested subdirectories within directory. Let’s use ls -FR recursively list new directory hierarchy just created project directory: Learners can sometimes get trapped within command-line text editors Vim, Emacs, Nano. Closing terminal emulator opening new one can frustrating learners navigate correct folder . recommendation mitigate problem instructors use text editor learners workshops (cases Nano).","code":"$ mkdir thesis $ ls -F haiku.txt  LittleWomen.txt  thesis/ $ ls -F thesis $ mkdir -p ../project/data ../project/results $ ls -FR ../project ../project/: data/  results/  ../project/data:  ../project/results:"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"two-ways-of-doing-the-same-thing","dir":"Instructor","previous_headings":"","what":"Two ways of doing the same thing","title":null,"text":"Using shell create directory different using file explorer. open current directory using operating system’s graphical file explorer, thesis directory appear . shell file explorer two different ways interacting files, files directories .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"good-names-for-files-and-directories","dir":"Instructor","previous_headings":"","what":"Good names for files and directories","title":null,"text":"Complicated names files directories can make life painful working command line. provide useful tips names files directories. Don’t use spaces. Spaces can make name meaningful, since spaces used separate arguments command line better avoid names files directories. can use - _ instead (e.g. north-pacific-gyre/ rather north pacific gyre/). test , try typing mkdir north pacific gyre see directory (directories!) made check ls -F. Don’t begin name - (dash). Commands treat names starting - options. Stick letters, numbers, . (period ‘full stop’), - (dash) _ (underscore). Many characters special meanings command line. learn lesson. special characters can cause command work expected can even result data loss. need refer names files directories spaces special characters, surround name quotes (\"\").","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"create-a-text-file","dir":"Instructor","previous_headings":"","what":"Create a text file","title":null,"text":"Let’s change working directory thesis using cd, run text editor called Nano create file called draft.txt: Let’s type lines text. ’re happy text, can press Ctrl+O (press Ctrl Control key , holding , press O key) write data disk. asked provide name file contain text. Press Return accept suggested default draft.txt. file saved, can use Ctrl+X quit editor return shell. nano doesn’t leave output screen exits, ls now shows created file called draft.txt: touch command generates new file called my_file.txt current directory. can observe newly generated file typing ls command line prompt. my_file.txt can also viewed GUI file explorer. inspect file ls -l, note size my_file.txt 0 bytes. words, contains data. open my_file.txt using text editor blank. programs generate output files , instead require empty files already generated. program run, searches existing file populate output. touch command allows efficiently generate blank text file used programs.","code":"$ cd thesis $ nano draft.txt $ ls draft.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"which-editor","dir":"Instructor","previous_headings":"","what":"Which Editor?","title":null,"text":"say, ‘nano text editor’ really mean ‘text’. can work plain character data, tables, images, human-friendly media. use examples one least complex text editors. However, trait, may powerful enough flexible enough work need workshop. Unix systems (Linux macOS), many programmers use Emacs Vim (require time learn), graphical editor Gedit VScode. Windows, may wish use Notepad++. Windows also built-editor called notepad can run command line way nano purposes lesson. matter editor use, need know searches saves files. start shell, (probably) use current working directory default location. use computer’s start menu, may want save files Desktop Documents directory instead. can change navigating another directory first time ‘Save …’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"control-ctrl-or-key","dir":"Instructor","previous_headings":"","what":"Control, Ctrl, or ^ Key","title":null,"text":"Control key also called ‘Ctrl’ key. various ways using Control key may described. example, may see instruction press Control key , holding , press X key, described : Control-X Control+X Ctrl-X Ctrl+X ^X C-x nano, along bottom screen ’ll see ^G Get Help ^O WriteOut. means can use Control-G get help Control-O save file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"creating-files-a-different-way","dir":"Instructor","previous_headings":"","what":"Creating Files a Different Way","title":null,"text":"seen create text files using nano editor. Now, try following command: touch command ? look current directory using GUI file explorer, file show ? Use ls -l inspect files. large my_file.txt? might want create file way?","code":"$ touch my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"creating-files-a-different-way-1","dir":"Instructor","previous_headings":"","what":"Creating Files a Different Way (continued)","title":null,"text":"avoid confusion later , suggest removing file ’ve just created proceeding rest episode, otherwise future outputs may vary given lesson. , use following command:","code":"$ rm my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"whats-in-a-name","dir":"Instructor","previous_headings":"","what":"What’s In A Name?","title":null,"text":"may noticed Nelle’s files named ‘something dot something’, part lesson, always used extension .txt. just convention; can call file mythesis almost anything else want. However, people use two-part names time help (programs) tell different kinds files apart. second part name called filename extension indicates type data file holds: .txt signals plain text file, .pdf indicates PDF document, .cfg configuration file full parameters program , .png PNG image, . just convention, albeit important one. Files merely contain bytes; ’s us programs interpret bytes according rules plain text files, PDF documents, configuration files, images, . Naming PNG image whale whale.mp3 doesn’t somehow magically turn recording whale song, though might cause operating system associate file music player program. case, someone double-clicked whale.mp3 file explorer program,music player automatically (erroneously) attempt open whale.mp3 file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"moving-files-to-a-new-folder","dir":"Instructor","previous_headings":"","what":"Moving Files to a new folder","title":null,"text":"running following commands, Jamie realizes put files sucrose.dat maltose.dat wrong folder. files placed raw folder. Fill blanks move files raw/ folder (.e. one forgot put )","code":"$ ls -F  analyzed/ raw/ $ ls -F analyzed fructose.dat glucose.dat maltose.dat sucrose.dat $ cd analyzed $ mv sucrose.dat maltose.dat ____/____"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"renaming-files","dir":"Instructor","previous_headings":"","what":"Renaming Files","title":null,"text":"Suppose created plain-text file current directory contain list statistical tests need analyze data, named statstics.txt creating saving file realize misspelled filename! want correct mistake, following commands use ? cp statstics.txt statistics.txt mv statstics.txt statistics.txt mv statstics.txt . cp statstics.txt .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"moving-and-copying","dir":"Instructor","previous_headings":"","what":"Moving and Copying","title":null,"text":"output closing ls command sequence shown ? proteins-saved.dat recombined recombined proteins.dat recombined proteins-saved.dat","code":"$ pwd /Users/jamie/data $ ls proteins.dat $ mkdir recombined $ mv proteins.dat recombined/ $ cp recombined/proteins.dat ../proteins-saved.dat $ ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"deleting-is-forever","dir":"Instructor","previous_headings":"","what":"Deleting Is Forever","title":null,"text":"Unix shell doesn’t trash bin can recover deleted files (though graphical interfaces Unix ). Instead, delete files, unlinked file system storage space disk can recycled. Tools finding recovering deleted files exist, ’s guarantee ’ll work particular situation, since computer may recycle file’s disk space right away.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"using-rm-safely","dir":"Instructor","previous_headings":"","what":"Using rm Safely","title":null,"text":"happens execute rm -thesis_backup/quotations.txt? want protection using rm?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"copy-with-multiple-filenames","dir":"Instructor","previous_headings":"","what":"Copy with Multiple Filenames","title":null,"text":"exercise, can test commands shell-lesson-data/exercise-data directory. example , cp given several filenames directory name? example , cp given three file names?","code":"$ mkdir backup $ cp creatures/minotaur.dat creatures/unicorn.dat backup/ $ cd creatures $ ls -F basilisk.dat  minotaur.dat  unicorn.dat $ cp minotaur.dat unicorn.dat basilisk.dat"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"using-wildcards-for-accessing-multiple-files-at-once","dir":"Instructor","previous_headings":"","what":"Using wildcards for accessing multiple files at once","title":null,"text":"solution 3. 1. shows files whose names contain zero characters (*) followed letter t, zero characters (*) followed ane.pdb. gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb. 2. shows files whose names start zero characters (*) followed letter t, single character (?), ne. followed zero characters (*). give us octane.pdb pentane.pdb doesn’t match anything ends thane.pdb. 3. fixes problems option 2 matching two characters (??) t ne. solution. 4. shows files starting ethane.. Jamie needs move files fructose.dat sucrose.dat analyzed directory. shell expand *.dat match .dat files current directory. mv command moves list .dat files ‘analyzed’ directory. first two sets commands achieve objective. first set uses relative paths create top-level directory subdirectories. third set commands give error default behavior mkdir won’t create subdirectory non-existent directory: intermediate level folders must created first. fourth set commands achieve objective. Remember, -p option, followed path one directories, cause mkdir create intermediate subdirectories required. final set commands generates ‘raw’ ‘processed’ directories level ‘data’ directory.","code":"$ cp *calibration.txt backup/calibration $ cp 2015-11-* send_to_bob/all_november_files/ $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/ mv *.dat analyzed"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"wildcards","dir":"Instructor","previous_headings":"","what":"Wildcards","title":null,"text":"* wildcard, represents zero characters. Let’s consider shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, every file ends ‘.pdb’. hand, p*.pdb represents pentane.pdb propane.pdb, ‘p’ front can represent filenames begin letter ‘p’. ? also wildcard, represents exactly one character. ?ethane.pdb represent methane.pdb whereas *ethane.pdb represents ethane.pdb methane.pdb. Wildcards can used combination . example, ???ane.pdb indicates three characters followed ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb. shell sees wildcard, expands wildcard create list matching filenames running preceding command. exception, wildcard expression match file, Bash pass expression argument command . example, typing ls *.pdf alkanes directory (contains files names ending .pdb) results error message file called *.pdf. However, generally commands like wc ls see lists file names matching expressions, wildcards . shell, programs, expands wildcards.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"list-filenames-matching-a-pattern","dir":"Instructor","previous_headings":"","what":"List filenames matching a pattern","title":null,"text":"run alkanes directory, ls command(s) produce output? ethane.pdb   methane.pdb ls *t*ane.pdb ls *t?ne.* ls *t??ne.pdb ls ethane.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"more-on-wildcards","dir":"Instructor","previous_headings":"","what":"More on Wildcards","title":null,"text":"Sam directory containing calibration data, datasets, descriptions datasets: heading another field trip, wants back data send datasets colleague Bob. Sam uses following commands get job done: Help Sam filling blanks. resulting directory structure look like ","code":". ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   └── datasets └── send_to_bob     ├── all_datasets_created_on_a_23rd     └── all_november_files $ cp *dataset* backup/datasets $ cp ____calibration____ backup/calibration $ cp 2015-____-____ send_to_bob/all_november_files/ $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/ . ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   │   ├── 2015-10-23-calibration.txt │   │   ├── 2015-10-26-calibration.txt │   │   └── 2015-11-23-calibration.txt │   └── datasets │       ├── 2015-10-23-dataset1.txt │       ├── 2015-10-23-dataset2.txt │       ├── 2015-10-23-dataset_overview.txt │       ├── 2015-10-26-dataset1.txt │       ├── 2015-10-26-dataset2.txt │       ├── 2015-10-26-dataset_overview.txt │       ├── 2015-11-23-dataset1.txt │       ├── 2015-11-23-dataset2.txt │       └── 2015-11-23-dataset_overview.txt └── send_to_bob     ├── all_datasets_created_on_a_23rd     │   ├── 2015-10-23-dataset1.txt     │   ├── 2015-10-23-dataset2.txt     │   ├── 2015-10-23-dataset_overview.txt     │   ├── 2015-11-23-dataset1.txt     │   ├── 2015-11-23-dataset2.txt     │   └── 2015-11-23-dataset_overview.txt     └── all_november_files         ├── 2015-11-23-calibration.txt         ├── 2015-11-23-dataset1.txt         ├── 2015-11-23-dataset2.txt         └── 2015-11-23-dataset_overview.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"organizing-directories-and-files","dir":"Instructor","previous_headings":"","what":"Organizing Directories and Files","title":null,"text":"Jamie working project, sees files aren’t well organized: fructose.dat sucrose.dat files contain output data analysis. command(s) covered lesson need run commands produce output shown?","code":"$ ls -F analyzed/  fructose.dat    raw/   sucrose.dat $ ls -F analyzed/   raw/ $ ls analyzed fructose.dat    sucrose.dat"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"reproduce-a-folder-structure","dir":"Instructor","previous_headings":"","what":"Reproduce a folder structure","title":null,"text":"’re starting new experiment like duplicate directory structure previous experiment can add new data. Assume previous experiment folder called 2016-05-18, contains data folder turn contains folders named raw processed contain data files. goal copy folder structure 2016-05-18 folder folder called 2016-05-20 final directory structure looks like : following set commands achieve objective? commands ?","code":"2016-05-20/ └── data    ├── processed    └── raw $ mkdir 2016-05-20 $ mkdir 2016-05-20/data $ mkdir 2016-05-20/data/processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ cd data $ mkdir raw processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20/data/processed $ mkdir -p 2016-05-20/data/raw $ mkdir -p 2016-05-20/data/processed $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ mkdir raw processed"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"cp [old] [new] copies file. mkdir [path] creates new directory. mv [old] [new] moves (renames) file directory. rm [path] removes (deletes) file. * matches zero characters filename, *.txt matches files ending .txt. ? matches single character filename, ?.txt matches .txt .txt. Use Control key may described many ways, including Ctrl-X, Control-X, ^X. shell trash bin: something deleted, ’s really gone. files’ names something.extension. extension isn’t required, doesn’t guarantee anything, normally used indicate type data file. Depending type work , may need powerful text editor Nano.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"why-isnt-it-doing-anything","dir":"Instructor","previous_headings":"","what":"Why Isn’t It Doing Anything?","title":null,"text":"happens command supposed process file, don’t give filename? example, type: don’t type *.pdb (anything else) command? Since doesn’t filenames, wc assumes supposed process input given command prompt, just sits waits us give data interactively. outside, though, see sitting , command doesn’t appear anything. make kind mistake, can escape state holding control key (Ctrl) pressing letter C : Ctrl+C. release keys.","code":"$ wc -l"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"output-page-by-page","dir":"Instructor","previous_headings":"","what":"Output Page by Page","title":null,"text":"’ll continue use cat lesson, convenience consistency, disadvantage always dumps whole file onto screen. useful practice command less (e.g. less lengths.txt). displays screenful file, stops. can go forward one screenful pressing spacebar, back one pressing b. Press q quit.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"what-does-sort--n-do","dir":"Instructor","previous_headings":"","what":"What Does sort -n Do?","title":null,"text":"file shell-lesson-data/exercise-data/numbers.txt contains following lines: run sort file, output : run sort -n file, get instead: Explain -n effect.","code":"10 2 19 22 6 10 19 2 22 6 2 6 10 19 22"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"redirecting-to-the-same-file","dir":"Instructor","previous_headings":"","what":"Redirecting to the same file","title":null,"text":"’s bad idea try redirecting output command operates file file. example: something like may give incorrect results /delete contents lengths.txt.","code":"$ sort -n lengths.txt > lengths.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"what-does-mean","dir":"Instructor","previous_headings":"","what":"What Does >> Mean?","title":null,"text":"seen use >, similar operator >> works slightly differently. ’ll learn differences two operators printing strings. can use echo command print strings e.g. Now test commands reveal difference two operators: : Hint: Try executing command twice row examining output files.","code":"$ echo The echo command prints text The echo command prints text $ echo hello > testfile01.txt $ echo hello >> testfile02.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"appending-data","dir":"Instructor","previous_headings":"","what":"Appending Data","title":null,"text":"already met head command, prints lines start file. tail similar, prints lines end file instead. Consider file shell-lesson-data/exercise-data/animal-counts/animals.csv. commands, select answer corresponds file animals-subset.csv: first three lines animals.csv last two lines animals.csv first three lines last two lines animals.csv second third lines animals.csv","code":"$ head -n 3 animals.csv > animals-subset.csv $ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"piping-commands-together","dir":"Instructor","previous_headings":"","what":"Piping Commands Together","title":null,"text":"current directory, want find 3 files least number lines. command listed work? wc -l * > sort -n > head -n 3 wc -l * | sort -n | head -n 1-3 wc -l * | head -n 3 | sort -n wc -l * | sort -n | head -n 3","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"pipe-reading-comprehension","dir":"Instructor","previous_headings":"","what":"Pipe Reading Comprehension","title":null,"text":"file called animals.csv (shell-lesson-data/exercise-data/animal-counts folder) contains following data: text passes pipes final redirect pipeline ? Note, sort -r command sorts reverse order. Hint: build pipeline one command time test understanding","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"pipe-construction","dir":"Instructor","previous_headings":"","what":"Pipe Construction","title":null,"text":"file animals.csv previous exercise, consider following command: cut command used remove ‘cut ’ certain sections line file, cut expects lines separated columns Tab character. character used way called delimiter. example use -d option specify comma delimiter character. also used -f option specify want extract second field (column). gives following output: uniq command filters adjacent matching lines file. extend pipeline (using uniq another command) find animals file contains (without duplicates names)?","code":"$ cut -d , -f 2 animals.csv deer rabbit raccoon rabbit deer fox rabbit bear"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"which-pipe","dir":"Instructor","previous_headings":"","what":"Which Pipe?","title":null,"text":"file animals.csv contains 8 lines data formatted follows: uniq command -c option gives count number times line occurs input. Assuming current directory shell-lesson-data/exercise-data/animal-counts, command use produce table shows total count type animal file? sort animals.csv | uniq -c sort -t, -k2,2 animals.csv | uniq -c cut -d, -f 2 animals.csv | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c | wc -l","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"removing-unneeded-files","dir":"Instructor","previous_headings":"","what":"Removing Unneeded Files","title":null,"text":"Suppose want delete processed data files, keep raw files processing script save storage. raw files end .dat processed files end .txt. following remove processed data files, processed data files? rm ?.txt rm *.txt rm * .txt rm *.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"wc counts lines, words, characters inputs. cat displays contents inputs. sort sorts inputs. head displays first 10 lines input. tail displays last 10 lines input. command > [file] redirects command’s output file (overwriting existing content). command >> [file] appends command’s output file. [first] | [second] pipeline: output first command used input second. best way use shell use pipes combine simple single-purpose programs (filters).","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"follow-the-prompt","dir":"Instructor","previous_headings":"","what":"Follow the Prompt","title":null,"text":"shell prompt changes $ > back typing loop. second prompt, >, different remind us haven’t finished typing complete command yet. semicolon, ;, can used separate two commands written single line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"same-symbols-different-meanings","dir":"Instructor","previous_headings":"","what":"Same Symbols, Different Meanings","title":null,"text":"see > used shell prompt, whereas > also used redirect output. Similarly, $ used shell prompt, , saw earlier, also used ask shell get value variable. shell prints > $ expects type something, symbol prompt. type > $ , instruction shell redirect output get value variable.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"write-your-own-loop","dir":"Instructor","previous_headings":"","what":"Write your own loop","title":null,"text":"write loop echoes 10 numbers 0 9?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"variables-in-loops","dir":"Instructor","previous_headings":"","what":"Variables in Loops","title":null,"text":"exercise refers shell-lesson-data/exercise-data/alkanes directory. ls *.pdb gives following output: output following code? Now, output following code? two loops give different outputs?","code":"cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb $ for datafile in *.pdb > do >     ls *.pdb > done $ for datafile in *.pdb > do >     ls $datafile > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"limiting-sets-of-files","dir":"Instructor","previous_headings":"","what":"Limiting Sets of Files","title":null,"text":"output running following loop shell-lesson-data/exercise-data/alkanes directory? files listed. files listed. cubane.pdb, octane.pdb pentane.pdb listed. cubane.pdb listed.","code":"$ for filename in c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"limiting-sets-of-files-1","dir":"Instructor","previous_headings":"","what":"Limiting Sets of Files (continued)","title":null,"text":"output differ using command instead? files listed. files listed time. files listed time. files cubane.pdb octane.pdb listed. file octane.pdb listed.","code":"$ for filename in *c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"saving-to-a-file-in-a-loop---part-one","dir":"Instructor","previous_headings":"","what":"Saving to a File in a Loop - Part One","title":null,"text":"shell-lesson-data/exercise-data/alkanes directory, effect loop? Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb, text propane.pdb saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, text three files concatenated saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb, text propane.pdb saved file called alkanes.pdb. None .","code":"for alkanes in *.pdb do     echo $alkanes     cat $alkanes > alkanes.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"saving-to-a-file-in-a-loop---part-two","dir":"Instructor","previous_headings":"","what":"Saving to a File in a Loop - Part Two","title":null,"text":"Also shell-lesson-data/exercise-data/alkanes directory, output following loop? text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb concatenated saved file called .pdb. text ethane.pdb saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb concatenated saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb printed screen saved file called .pdb.","code":"for datafile in *.pdb do     cat $datafile >> all.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"spaces-in-names","dir":"Instructor","previous_headings":"","what":"Spaces in Names","title":null,"text":"Spaces used separate elements list going loop . one elements contains space character, need surround quotes, thing loop variable. Suppose data files named: loop files, need add double quotes like : simpler avoid using spaces (special characters) filenames. files don’t exist, run code, head command unable find ; however, error message returned show name files expecting: Try removing quotes around $filename loop see effect quote marks spaces. Note get result loop command unicorn.dat run code creatures directory:","code":"red dragon.dat purple unicorn.dat $ for filename in \"red dragon.dat\" \"purple unicorn.dat\" > do >     head -n 100 \"$filename\" | tail -n 20 > done head: cannot open ‘red dragon.dat' for reading: No such file or directory head: cannot open ‘purple unicorn.dat' for reading: No such file or directory head: cannot open ‘red' for reading: No such file or directory head: cannot open ‘dragon.dat' for reading: No such file or directory head: cannot open ‘purple' for reading: No such file or directory CGGTACCGAA AAGGGTCGCG CAAGTGTTCC ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"beginning-and-end","dir":"Instructor","previous_headings":"","what":"Beginning and End","title":null,"text":"can move beginning line shell typing Ctrl+end using Ctrl+E.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"those-who-know-history-can-choose-to-repeat-it","dir":"Instructor","previous_headings":"","what":"Those Who Know History Can Choose to Repeat It","title":null,"text":"Another way repeat previous work use history command get list last hundred commands executed, use !123 (‘123’ replaced command number) repeat one commands. example, Nelle types : can re-run goostats.sh files simply typing !459.","code":"$ history | tail -n 5 456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done 457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done 458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done 459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done 460  history | tail -n 5"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"other-history-commands","dir":"Instructor","previous_headings":"","what":"Other History Commands","title":null,"text":"number shortcut commands getting history. Ctrl+R enters history search mode ‘reverse--search’ finds recent command history matches text enter next. Press Ctrl+R one additional times search earlier matches. can use left right arrow keys choose line edit hit Return run command. !! retrieves immediately preceding command (may may find convenient using ↑) !$ retrieves last word last command. ’s useful often might expect: bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, can type less !$ look file stats-NENE01729B.txt, quicker ↑ editing command-line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"doing-a-dry-run","dir":"Instructor","previous_headings":"","what":"Doing a Dry Run","title":null,"text":"loop way many things — make many mistakes wrong thing. One way check loop echo commands run instead actually running . Suppose want preview commands following loop execute without actually running commands: difference two loops , one want run?","code":"$ for datafile in *.pdb > do >     cat $datafile >> all.pdb > done # Version 1 $ for datafile in *.pdb > do >     echo cat $datafile >> all.pdb > done # Version 2 $ for datafile in *.pdb > do >     echo \"cat $datafile >> all.pdb\" > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"nested-loops","dir":"Instructor","previous_headings":"","what":"Nested Loops","title":null,"text":"Suppose want set directory structure organize experiments measuring reaction rate constants different compounds different temperatures. result following code:","code":"$ for species in cubane ethane methane > do >     for temperature in 25 30 37 40 >     do >         mkdir $species-$temperature >     done > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"loop repeats commands every thing list. Every loop needs variable refer thing currently operating . Use $name expand variable (.e., get value). ${name} can also used. use spaces, quotes, wildcard characters ‘*’ ‘?’ filenames, complicates variable expansion. Give files consistent names easy match wildcard patterns make easy select looping. Use -arrow key scroll previous commands edit repeat . Use Ctrl+R search previously entered commands. Use history display recent commands, ![number] repeat command number.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"text-vs--whatever","dir":"Instructor","previous_headings":"","what":"Text vs. Whatever","title":null,"text":"usually call programs like Microsoft Word LibreOffice Writer “text editors”, need bit careful comes programming. default, Microsoft Word uses .docx files store text, also formatting information fonts, headings, . extra information isn’t stored characters doesn’t mean anything tools like head, expects input files contain nothing letters, digits, punctuation standard computer keyboard. editing programs, therefore, must either use plain text editor careful save files plain text.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"double-quotes-around-arguments","dir":"Instructor","previous_headings":"","what":"Double-Quotes Around Arguments","title":null,"text":"reason put loop variable inside double-quotes, case filename happens contain spaces, surround $1 double-quotes.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"list-unique-species","dir":"Instructor","previous_headings":"","what":"List Unique Species","title":null,"text":"Leah several hundred data files, formatted like : example type file given shell-lesson-data/exercise-data/animal-counts/animals.csv. can use command cut -d , -f 2 animals.csv | sort | uniq produce unique species animals.csv. order avoid type series commands every time, scientist may choose write shell script instead. Write shell script called species.sh takes number filenames command-line arguments uses variation command print list unique species appearing files separately.","code":"2013-11-05,deer,5 2013-11-05,rabbit,22 2013-11-05,raccoon,7 2013-11-06,rabbit,19 2013-11-06,deer,2 2013-11-06,fox,1 2013-11-07,rabbit,18 2013-11-07,bear,1"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"why-record-commands-in-the-history-before-running-them","dir":"Instructor","previous_headings":"","what":"Why Record Commands in the History Before Running Them?","title":null,"text":"run command: last command file history command , .e., shell added history command log actually running . fact, shell always adds commands log running . think ?","code":"$ history | tail -n 5 > recent.sh"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"variables-in-shell-scripts","dir":"Instructor","previous_headings":"","what":"Variables in Shell Scripts","title":null,"text":"alkanes directory, imagine shell script called script.sh containing following commands: alkanes directory, type following command: following outputs expect see? lines first last lines file ending .pdb alkanes directory first last line file ending .pdb alkanes directory first last line file alkanes directory error quotes around *.pdb","code":"head -n $2 $1 tail -n $3 $1 $ bash script.sh '*.pdb' 1 1"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"find-the-longest-file-with-a-given-extension","dir":"Instructor","previous_headings":"","what":"Find the Longest File With a Given Extension","title":null,"text":"Write shell script called longest.sh takes name directory filename extension arguments, prints name file lines directory extension. example: print name .pdb file shell-lesson-data/exercise-data/alkanes lines. Feel free test script another directory e.g.","code":"$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb $ bash longest.sh shell-lesson-data/exercise-data/writing txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"script-reading-comprehension","dir":"Instructor","previous_headings":"","what":"Script Reading Comprehension","title":null,"text":"question, consider shell-lesson-data/exercise-data/alkanes directory . contains number .pdb files addition files may created. Explain following three scripts run bash script1.sh *.pdb, bash script2.sh *.pdb, bash script3.sh *.pdb respectively.","code":"# Script 1 echo *.* # Script 2 for filename in $1 $2 $3 do     cat $filename done # Script 3 echo $@.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"debugging-scripts","dir":"Instructor","previous_headings":"","what":"Debugging Scripts","title":null,"text":"Suppose saved following script file called -errors.sh Nelle’s north-pacific-gyre directory: run north-pacific-gyre directory: output blank. figure , re-run script using -x option: output showing ? line responsible error?","code":"# Calculate stats for data files. for datafile in \"$@\" do     echo $datfile     bash goostats.sh $datafile stats-$datafile done $ bash do-errors.sh NENE*A.txt NENE*B.txt $ bash -x do-errors.sh NENE*A.txt NENE*B.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Save commands files (usually called shell scripts) re-use. bash [filename] runs commands saved file. $@ refers shell script’s command-line arguments. $1, $2, etc., refer first command-line argument, second command-line argument, etc. Place variables quotes values might spaces . Letting users decide files process flexible consistent built-Unix commands.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"using-grep","dir":"Instructor","previous_headings":"","what":"Using grep","title":null,"text":"command result following output: grep \"\" haiku.txt grep -E \"\" haiku.txt grep -w \"\" haiku.txt grep -\"\" haiku.txt","code":"and the presence of absence:"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"wildcards","dir":"Instructor","previous_headings":"","what":"Wildcards","title":null,"text":"grep‘s real power doesn’t come options, though; comes fact patterns can include wildcards. (technical name regular expressions, ’re’ ‘grep’ stands .) Regular expressions complex powerful; want complex searches, please look lesson website. taster, can find lines ‘o’ second position like : use -E option put pattern quotes prevent shell trying interpret . (pattern contained *, example, shell try expand running grep.) ^ pattern anchors match start line. . matches single character (just like ? shell), o matches actual ‘o’.","code":"$ grep -E \"^.o\" haiku.txt You bring fresh toner. Today it is not working Software is like that."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"tracking-a-species","dir":"Instructor","previous_headings":"","what":"Tracking a Species","title":null,"text":"Leah several hundred data files saved one directory, formatted like : wants write shell script takes species first command-line argument directory second argument. script return one file called <species>.txt containing list dates number species seen date. example using data shown , rabbit.txt contain: , line contains individual command, pipe. Arrange sequence one command order achieve Leah’s goal: Hint: use man grep look grep text recursively directory man cut select one field line. example file provided shell-lesson-data/exercise-data/animal-counts/animals.csv","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 2012-11-05,22 2012-11-06,19 2012-11-07,16 cut -d : -f 2 > | grep -w $1 -r $2 | $1.txt cut -d , -f 1,3"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"little-women","dir":"Instructor","previous_headings":"","what":"Little Women","title":null,"text":"friend, just finished reading Little Women Louisa May Alcott, argument. four sisters book, Jo, Meg, Beth, Amy, friend thinks Jo mentioned. , however, certain Amy. Luckily, file LittleWomen.txt containing full text novel (shell-lesson-data/exercise-data/writing/LittleWomen.txt). Using loop, tabulate number times four sisters mentioned? Hint: one solution might employ commands grep wc |, another might utilize grep options. often one way solve programming task, particular solution usually chosen based combination yielding correct result, elegance, readability, speed.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"listing-vs--finding","dir":"Instructor","previous_headings":"","what":"Listing vs. Finding","title":null,"text":"ls find can made similar things given right options, normal circumstances, ls lists everything can, find searches things certain properties shows .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"matching-and-subtracting","dir":"Instructor","previous_headings":"","what":"Matching and Subtracting","title":null,"text":"-v option grep inverts pattern matching, lines match pattern printed. Given , following commands find .dat files creatures except unicorn.dat? thought answer, can test commands shell-lesson-data/exercise-data directory. find creatures -name \"*.dat\" | grep -v unicorn find creatures -name *.dat | grep -v unicorn grep -v \"unicorn\" $(find creatures -name \"*.dat\") None .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"binary-files","dir":"Instructor","previous_headings":"","what":"Binary Files","title":null,"text":"focused exclusively finding patterns text files. data stored images, databases, format? handful tools extend grep handle non text formats. generalizable approach convert data text, extract text-like elements data. one hand, makes simple things easy . hand, complex things usually impossible. example, ’s easy enough write program extract X Y dimensions image files grep play , write something find values spreadsheet whose cells contained formulas? last option recognize shell text processing limits, use another programming language. time comes , don’t hard shell. Many modern programming languages borrowed lot ideas , imitation also sincerest form praise.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"find-pipeline-reading-comprehension","dir":"Instructor","previous_headings":"","what":"find Pipeline Reading Comprehension","title":null,"text":"Write short explanatory comment following shell script:","code":"wc -l $(find . -name \"*.dat\") | sort -n"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"find finds files specific properties match patterns. grep selects lines files match patterns. --help option supported many bash commands, programs can run within Bash, display information use commands programs. man [command] displays manual page given command. $([command]) inserts command’s output place.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"background","dir":"Instructor","previous_headings":"","what":"Background","title":null,"text":"Humans computers commonly interact many different ways, keyboard mouse, touch screen interfaces, using speech recognition systems. widely used way interact personal computers called graphical user interface (GUI). GUI, give instructions clicking mouse using menu-driven interactions. visual aid GUI makes intuitive learn, way delivering instructions computer scales poorly. Imagine following task: literature search, copy third line one thousand text files one thousand different directories paste single file. Using GUI, clicking desk several hours, potentially also commit error process completing repetitive task. take advantage Unix shell. Unix shell command-line interface (CLI) scripting language, allowing repetitive tasks done automatically fast. proper commands, shell can repeat tasks without modification many times want. Using shell, task literature example can accomplished seconds.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"the-shell","dir":"Instructor","previous_headings":"","what":"The Shell","title":null,"text":"shell program users can type commands. shell, ’s possible invoke complicated programs like climate modeling software simple commands create empty directory one line code. popular Unix shell Bash (Bourne SHell — -called ’s derived shell written Stephen Bourne). Bash default shell modern implementations Unix packages provide Unix-like tools Windows. Note ‘Git Bash’ piece software enables Windows users use Bash like interface interacting Git. Using shell take effort time learn. GUI presents choices select, CLI choices automatically presented , must learn commands like new vocabulary language ’re studying. However, unlike spoken language, small number “words” (.e. commands) gets long way, ’ll cover essential today. grammar shell allows combine existing tools powerful pipelines handle large volumes data automatically. Sequences commands can written script, improving reproducibility workflows. addition, command line often easiest way interact remote machines supercomputers. Familiarity shell near essential run variety specialized tools resources including high-performance computing systems. clusters cloud computing systems become popular scientific data crunching, able interact shell becoming necessary skill. can build command-line skills covered tackle wide range scientific questions computational challenges. Let’s get started. shell first opened, presented prompt, indicating shell waiting input. shell typically uses $ prompt, may use different symbol. examples lesson, ’ll show prompt $. importantly, type prompt typing commands. type command follows prompt. rule applies lessons lessons sources. Also note type command, press Enter key execute . prompt followed text cursor, character indicates position typing appear. cursor usually flashing solid block, can also underscore pipe. may seen text editor program, example. Note prompt might look little different. particular, popular shell environments default put user name host name $. prompt might look like, e.g.: prompt might even include . worry prompt just short $. lesson depend additional information also get way. important item focus $ character see later . let’s try first command, ls, short listing. command list contents current directory:","code":"$ nelle@localhost $ $ ls Desktop     Downloads   Movies      Pictures Documents   Library     Music       Public"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"command-not-found","dir":"Instructor","previous_headings":"","what":"Command not found","title":null,"text":"shell can’t find program whose name command typed, print error message : might happen command mis-typed program corresponding command installed.","code":"$ ks ks: command not found"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"shell program whose primary purpose read commands run programs. lesson uses Bash, default shell many implementations Unix. Programs can run Bash entering commands command-line prompt. shell’s main advantages high action--keystroke ratio, support automating repetitive tasks, capacity access networked machines. significant challenge using shell can knowing commands need run run .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"home-directory-variation","dir":"Instructor","previous_headings":"","what":"Home Directory Variation","title":null,"text":"home directory path look different different operating systems. Linux, may look like /home/nelle, Windows, similar C:\\Documents Settings\\nelle C:\\Users\\nelle. (Note may look slightly different different versions Windows.) future examples, ’ve used Mac output default - Linux Windows output may differ slightly generally similar. also assume pwd command returns user’s home directory. pwd returns something different, may need navigate using cd commands lesson work written. See Exploring Directories details cd command.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"slashes","dir":"Instructor","previous_headings":"","what":"Slashes","title":null,"text":"Notice two meanings / character. appears front file directory name, refers root directory. appears inside path, ’s just separator.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"clearing-your-terminal","dir":"Instructor","previous_headings":"","what":"Clearing your terminal","title":null,"text":"screen gets cluttered, can clear terminal using clear command. can still access previous commands using ↑ ↓ move line--line, scrolling terminal.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"getting-help","dir":"Instructor","previous_headings":"","what":"Getting help","title":null,"text":"ls lots options. two common ways find use command options accepts — depending environment, might find one ways works: can pass --help option command (available Linux Git Bash), example: can read manual man (available Linux macOS): ’ll describe ways next.","code":"$ ls --help $ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"help-for-built-in-commands","dir":"Instructor","previous_headings":"","what":"Help for built-in commands","title":null,"text":"commands built Bash shell, rather existing separate programs filesystem. One example cd (change directory) command. get message like manual entry cd, try help cd instead. help command get usage information Bash built-ins.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"the---help-option","dir":"Instructor","previous_headings":"Getting help","what":"The --help option","title":null,"text":"bash commands programs people written run within bash, support --help option displays information use command program.","code":"$ ls --help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.  Mandatory arguments to long options are mandatory for short options, too.   -a, --all                  do not ignore entries starting with .   -A, --almost-all           do not list implied . and ..       --author               with -l, print the author of each file   -b, --escape               print C-style escapes for nongraphic characters       --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,                                '--block-size=M' prints sizes in units of                                1,048,576 bytes; see SIZE format below   -B, --ignore-backups       do not list implied entries ending with ~   -c                         with -lt: sort by, and show, ctime (time of last                                modification of file status information);                                with -l: show ctime and sort by name;                                otherwise: sort by ctime, newest first   -C                         list entries by columns       --color[=WHEN]         colorize the output; WHEN can be 'always' (default                                if omitted), 'auto', or 'never'; more info below   -d, --directory            list directories themselves, not their contents   -D, --dired                generate output designed for Emacs' dired mode   -f                         do not sort, enable -aU, disable -ls --color   -F, --classify             append indicator (one of */=>@|) to entries ...        ...        ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"unsupported-command-line-options","dir":"Instructor","previous_headings":"","what":"Unsupported command-line options","title":null,"text":"try use option supported, ls commands usually print error message similar :","code":"$ ls -j ls: invalid option -- 'j' Try 'ls --help' for more information."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"the-man-command","dir":"Instructor","previous_headings":"Getting help","what":"The man command","title":null,"text":"way learn ls type command turn terminal page description ls command options. navigate man pages, may use ↑ ↓ move line--line, try B Spacebar skip full page. search character word man pages, use / followed character word searching . Sometimes search result multiple hits. , can move hits using N (moving forward) Shift+N (moving backward). quit man pages, press Q. -l option makes ls use long listing format, showing file/directory names also additional information, file size time last modification. use -h option -l option, makes file size ‘human readable’, .e. displaying something like 5.3K instead 5369. recently changed file listed last using -rt. can useful finding recent edits checking see new output file written.","code":"$ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"manual-pages-on-the-web","dir":"Instructor","previous_headings":"","what":"Manual pages on the web","title":null,"text":"course, third way access help commands: searching internet via web browser. using internet search, including phrase unix man page search query help find relevant results. GNU provides links manuals including core GNU utilities, covers many commands introduced within lesson.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"exploring-more-ls-options","dir":"Instructor","previous_headings":"","what":"Exploring More ls Options","title":null,"text":"can also use two options time. command ls used -l option? use -l -h option? output properties cover lesson (file permissions ownership), rest useful nevertheless.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"listing-in-reverse-chronological-order","dir":"Instructor","previous_headings":"","what":"Listing in Reverse Chronological Order","title":null,"text":"default, ls lists contents directory alphabetical order name. command ls -t lists items time last change instead alphabetically. command ls -r lists contents directory reverse order. file displayed last combine -t -r options? Hint: may need use -l option see last changed dates.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"exploring-other-directories","dir":"Instructor","previous_headings":"","what":"Exploring Other Directories","title":null,"text":"can use ls current working directory, can use list contents different directory. Let’s take look Desktop directory running ls -F Desktop, .e., command ls -F option argument Desktop. argument Desktop tells ls want listing something current working directory: Note directory named Desktop exist current working directory, command return error. Typically, Desktop directory exists home directory, assume current working directory bash shell. output list files sub-directories Desktop directory, including shell-lesson-data directory downloaded setup lesson. (systems, contents Desktop directory shell show icons graphical user interface behind open windows. See case .) Organizing things hierarchically helps us keep track work. ’s possible put hundreds files home directory just ’s possible pile hundreds printed papers desk, ’s much easier find things ’ve organized sensibly-named subdirectories. Now know shell-lesson-data directory located Desktop directory, can two things. First, using strategy , can look contents passing directory name ls: Second, can actually change location different directory, longer located home directory. command change locations cd followed directory name change working directory. cd stands ‘change directory’, bit misleading. command doesn’t change directory; changes shell’s current working directory. words changes shell’s settings directory . cd command akin double-clicking folder graphical interface get folder. Let’s say want move exercise-data directory saw . can use following series commands get : commands move us home directory Desktop directory, shell-lesson-data directory, exercise-data directory. notice cd doesn’t print anything. normal. Many shell commands output anything screen successfully executed. run pwd , can see now /Users/nelle/Desktop/shell-lesson-data/exercise-data. run ls -F without arguments now, lists contents /Users/nelle/Desktop/shell-lesson-data/exercise-data, ’s now : now know go directory tree (.e. go subdirectory), go (.e. leave directory go parent directory)? might try following: get error! ? methods far, cd can see sub-directories inside current directory. different ways see directories current location; ’ll start simplest. shortcut shell move one directory level. works follows: .. special directory name meaning “directory containing one”, succinctly, parent current directory. Sure enough, run pwd running cd .., ’re back /Users/nelle/Desktop/shell-lesson-data: special directory .. doesn’t usually show run ls. want display , can add -option ls -F: -stands ‘show ’ (including hidden files); forces ls show us file directory names begin ., .. (, ’re /Users/nelle, refers /Users directory). can see, also displays another special directory ’s just called ., means ‘current working directory’. may seem redundant name , ’ll see uses soon. Note command line tools, multiple options can combined single - spaces options; ls -F -equivalent ls -Fa. three commands basic commands navigating filesystem computer: pwd, ls, cd. Let’s explore variations commands. happens type cd , without giving directory? can check happened? pwd gives us answer! turns cd without argument return home directory, great ’ve got lost filesystem. Let’s try returning exercise-data directory . Last time, used three commands, can actually string together list directories move exercise-data one step: Check ’ve moved right place running pwd ls -F. want move one level data directory, use cd ... another way move directory, regardless current location. far, specifying directory names, even directory path (), using relative paths. use relative path command like ls cd, tries find location , rather root file system. However, possible specify absolute path directory including entire path root directory, indicated leading slash. leading / tells computer follow path root file system, always refers exactly one directory, matter run command. allows us move shell-lesson-data directory anywhere filesystem (including inside exercise-data). find absolute path ’re looking , can use pwd extract piece need move shell-lesson-data. Run pwd ls -F ensure ’re directory expect. : . stands current directory. : / stands root directory. : Nelle’s home directory /Users/nelle. : command goes two levels, .e. ends /Users. Yes: ~ stands user’s home directory, case /Users/nelle. : command navigate directory home current directory exists. Yes: unnecessarily complicated, correct. Yes: shortcut go back user’s home directory. Yes: goes one level. : directory backup /Users. : content Users/thing/backup, .., asked one level . : see previous explanation. Yes: ../backup/ refers /Users/backup/. : pwd name directory. Yes: ls without directory argument lists files directories current directory. Yes: uses absolute path explicitly.","code":"$ ls -F Desktop shell-lesson-data/ $ ls -F Desktop/shell-lesson-data exercise-data/  north-pacific-gyre/ $ cd Desktop $ cd shell-lesson-data $ cd exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ ls -F alkanes/  animal-counts/  creatures/  numbers.txt  writing/ $ cd shell-lesson-data -bash: cd: shell-lesson-data: No such file or directory $ cd .. $ pwd /Users/nelle/Desktop/shell-lesson-data $ ls -F -a ./  ../  exercise-data/  north-pacific-gyre/ $ cd $ pwd /Users/nelle $ cd Desktop/shell-lesson-data/exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ cd /Users/nelle/Desktop/shell-lesson-data"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"other-hidden-files","dir":"Instructor","previous_headings":"","what":"Other Hidden Files","title":null,"text":"addition hidden directories .. ., may also see file called .bash_profile. file usually contains shell configuration settings. may also see files directories beginning .. usually files directories used configure different programs computer. prefix . used prevent configuration files cluttering terminal standard ls command used.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"two-more-shortcuts","dir":"Instructor","previous_headings":"","what":"Two More Shortcuts","title":null,"text":"shell interprets tilde (~) character start path mean “current user’s home directory”. example, Nelle’s home directory /Users/nelle, ~/data equivalent /Users/nelle/data. works first character path; //~/elsewhere //Users/nelle/elsewhere. Another shortcut - (dash) character. cd translate - previous directory , faster remember, type, full path. efficient way moving back forth two directories – .e. execute cd - twice, end back starting directory. difference cd .. cd - former brings , latter brings back. Try ! First navigate ~/Desktop/shell-lesson-data (already ). cd exercise-data/creatures directory Now run ’ll see ’re back ~/Desktop/shell-lesson-data. Run cd - ’re back ~/Desktop/shell-lesson-data/exercise-data/creatures","code":"$ cd ~/Desktop/shell-lesson-data $ cd exercise-data/creatures $ cd -"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"absolute-vs-relative-paths","dir":"Instructor","previous_headings":"","what":"Absolute vs Relative Paths","title":null,"text":"Starting /Users/nelle/data, following commands Nelle use navigate home directory, /Users/nelle? cd . cd / cd /home/nelle cd ../.. cd ~ cd home cd ~/data/.. cd cd ..","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"relative-path-resolution","dir":"Instructor","previous_headings":"","what":"Relative Path Resolution","title":null,"text":"Using filesystem diagram , pwd displays /Users/thing, ls -F ../backup display? ../backup: file directory 2012-12-01 2013-01-08 2013-01-27 2012-12-01/ 2013-01-08/ 2013-01-27/ original/ pnas_final/ pnas_sub/","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"ls-reading-comprehension","dir":"Instructor","previous_headings":"","what":"ls Reading Comprehension","title":null,"text":"Using filesystem diagram , pwd displays /Users/backup, -r tells ls display things reverse order, command(s) result following output: ls pwd ls -r -F ls -r -F /Users/backup","code":"pnas_sub/ pnas_final/ original/"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"when-to-use-short-or-long-options","dir":"Instructor","previous_headings":"","what":"When to use short or long options","title":null,"text":"options exist short long options: Use short option typing commands directly shell minimize keystrokes get task done faster. Use long option scripts provide clarity. read many times typed .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"nelles-pipeline-organizing-files","dir":"Instructor","previous_headings":"","what":"Nelle’s Pipeline: Organizing Files","title":null,"text":"Knowing much files directories, Nelle ready organize files protein assay machine create. creates directory called north-pacific-gyre (remind data came ), contain data files assay machine data processing scripts. physical samples labelled according lab’s convention unique ten-character ID, ‘NENE01729A’. ID used collection log record location, time, depth, characteristics sample, decides use within filename data file. Since output assay machine plain text, call files NENE01729A.txt, NENE01812A.txt, . 1520 files go directory. Now current directory shell-lesson-data, Nelle can see files using command: command lot type, can let shell work called tab completion. types: presses Tab (tab key keyboard), shell automatically completes directory name : Pressing Tab nothing, since multiple possibilities; pressing Tab twice brings list files. Nelle presses G presses Tab , shell append ‘goo’ since files start ‘g’ share first three characters ‘goo’. see files, can press Tab twice . called tab completion, see many tools go .","code":"$ ls north-pacific-gyre/ $ ls nor $ ls north-pacific-gyre/ $ ls north-pacific-gyre/goo ls north-pacific-gyre/goo goodiff.sh   goostats.sh"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"file system responsible managing information disk. Information stored files, stored directories (folders). Directories can also store directories, form directory tree. pwd prints user’s current working directory. ls [path] prints listing specific file directory; ls lists current working directory. cd [path] changes current working directory. commands take options begin single -. Directory names path separated / Unix, \\ Windows. / root directory whole file system. absolute path specifies location root file system. relative path specifies location starting current location. . means ‘current directory’; .. means ‘directory current one’.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"step-one-see-where-we-are-and-what-we-already-have","dir":"Instructor","previous_headings":"","what":"Step one: see where we are and what we already have","title":null,"text":"still shell-lesson-data directory Desktop, can check using: Next ’ll move exercise-data/writing directory see contains:","code":"$ pwd /Users/nelle/Desktop/shell-lesson-data $ cd exercise-data/writing/ $ ls -F haiku.txt  LittleWomen.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"create-a-directory","dir":"Instructor","previous_headings":"","what":"Create a directory","title":null,"text":"Let’s create new directory called thesis using command mkdir thesis (output): might guess name, mkdir means ‘make directory’. Since thesis relative path (.e., leading slash, like //ever/thesis), new directory created current working directory: Since ’ve just created thesis directory, ’s nothing yet: Note mkdir limited creating single directories one time. -p option allows mkdir create directory nested subdirectories single operation: -R option ls command list nested subdirectories within directory. Let’s use ls -FR recursively list new directory hierarchy just created project directory: Learners can sometimes get trapped within command-line text editors Vim, Emacs, Nano. Closing terminal emulator opening new one can frustrating learners navigate correct folder . recommendation mitigate problem instructors use text editor learners workshops (cases Nano).","code":"$ mkdir thesis $ ls -F haiku.txt  LittleWomen.txt  thesis/ $ ls -F thesis $ mkdir -p ../project/data ../project/results $ ls -FR ../project ../project/: data/  results/  ../project/data:  ../project/results:"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"two-ways-of-doing-the-same-thing","dir":"Instructor","previous_headings":"","what":"Two ways of doing the same thing","title":null,"text":"Using shell create directory different using file explorer. open current directory using operating system’s graphical file explorer, thesis directory appear . shell file explorer two different ways interacting files, files directories .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"good-names-for-files-and-directories","dir":"Instructor","previous_headings":"","what":"Good names for files and directories","title":null,"text":"Complicated names files directories can make life painful working command line. provide useful tips names files directories. Don’t use spaces. Spaces can make name meaningful, since spaces used separate arguments command line better avoid names files directories. can use - _ instead (e.g. north-pacific-gyre/ rather north pacific gyre/). test , try typing mkdir north pacific gyre see directory (directories!) made check ls -F. Don’t begin name - (dash). Commands treat names starting - options. Stick letters, numbers, . (period ‘full stop’), - (dash) _ (underscore). Many characters special meanings command line. learn lesson. special characters can cause command work expected can even result data loss. need refer names files directories spaces special characters, surround name quotes (\"\").","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"create-a-text-file","dir":"Instructor","previous_headings":"","what":"Create a text file","title":null,"text":"Let’s change working directory thesis using cd, run text editor called Nano create file called draft.txt: Let’s type lines text. ’re happy text, can press Ctrl+O (press Ctrl Control key , holding , press O key) write data disk. asked provide name file contain text. Press Return accept suggested default draft.txt. file saved, can use Ctrl+X quit editor return shell. nano doesn’t leave output screen exits, ls now shows created file called draft.txt: touch command generates new file called my_file.txt current directory. can observe newly generated file typing ls command line prompt. my_file.txt can also viewed GUI file explorer. inspect file ls -l, note size my_file.txt 0 bytes. words, contains data. open my_file.txt using text editor blank. programs generate output files , instead require empty files already generated. program run, searches existing file populate output. touch command allows efficiently generate blank text file used programs.","code":"$ cd thesis $ nano draft.txt $ ls draft.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"which-editor","dir":"Instructor","previous_headings":"","what":"Which Editor?","title":null,"text":"say, ‘nano text editor’ really mean ‘text’. can work plain character data, tables, images, human-friendly media. use examples one least complex text editors. However, trait, may powerful enough flexible enough work need workshop. Unix systems (Linux macOS), many programmers use Emacs Vim (require time learn), graphical editor Gedit VScode. Windows, may wish use Notepad++. Windows also built-editor called notepad can run command line way nano purposes lesson. matter editor use, need know searches saves files. start shell, (probably) use current working directory default location. use computer’s start menu, may want save files Desktop Documents directory instead. can change navigating another directory first time ‘Save …’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"control-ctrl-or-key","dir":"Instructor","previous_headings":"","what":"Control, Ctrl, or ^ Key","title":null,"text":"Control key also called ‘Ctrl’ key. various ways using Control key may described. example, may see instruction press Control key , holding , press X key, described : Control-X Control+X Ctrl-X Ctrl+X ^X C-x nano, along bottom screen ’ll see ^G Get Help ^O WriteOut. means can use Control-G get help Control-O save file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"creating-files-a-different-way","dir":"Instructor","previous_headings":"","what":"Creating Files a Different Way","title":null,"text":"seen create text files using nano editor. Now, try following command: touch command ? look current directory using GUI file explorer, file show ? Use ls -l inspect files. large my_file.txt? might want create file way?","code":"$ touch my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"creating-files-a-different-way-1","dir":"Instructor","previous_headings":"","what":"Creating Files a Different Way (continued)","title":null,"text":"avoid confusion later , suggest removing file ’ve just created proceeding rest episode, otherwise future outputs may vary given lesson. , use following command:","code":"$ rm my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"whats-in-a-name","dir":"Instructor","previous_headings":"","what":"What’s In A Name?","title":null,"text":"may noticed Nelle’s files named ‘something dot something’, part lesson, always used extension .txt. just convention; can call file mythesis almost anything else want. However, people use two-part names time help (programs) tell different kinds files apart. second part name called filename extension indicates type data file holds: .txt signals plain text file, .pdf indicates PDF document, .cfg configuration file full parameters program , .png PNG image, . just convention, albeit important one. Files merely contain bytes; ’s us programs interpret bytes according rules plain text files, PDF documents, configuration files, images, . Naming PNG image whale whale.mp3 doesn’t somehow magically turn recording whale song, though might cause operating system associate file music player program. case, someone double-clicked whale.mp3 file explorer program,music player automatically (erroneously) attempt open whale.mp3 file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"moving-files-to-a-new-folder","dir":"Instructor","previous_headings":"","what":"Moving Files to a new folder","title":null,"text":"running following commands, Jamie realizes put files sucrose.dat maltose.dat wrong folder. files placed raw folder. Fill blanks move files raw/ folder (.e. one forgot put )","code":"$ ls -F  analyzed/ raw/ $ ls -F analyzed fructose.dat glucose.dat maltose.dat sucrose.dat $ cd analyzed $ mv sucrose.dat maltose.dat ____/____"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"renaming-files","dir":"Instructor","previous_headings":"","what":"Renaming Files","title":null,"text":"Suppose created plain-text file current directory contain list statistical tests need analyze data, named statstics.txt creating saving file realize misspelled filename! want correct mistake, following commands use ? cp statstics.txt statistics.txt mv statstics.txt statistics.txt mv statstics.txt . cp statstics.txt .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"moving-and-copying","dir":"Instructor","previous_headings":"","what":"Moving and Copying","title":null,"text":"output closing ls command sequence shown ? proteins-saved.dat recombined recombined proteins.dat recombined proteins-saved.dat","code":"$ pwd /Users/jamie/data $ ls proteins.dat $ mkdir recombined $ mv proteins.dat recombined/ $ cp recombined/proteins.dat ../proteins-saved.dat $ ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"deleting-is-forever","dir":"Instructor","previous_headings":"","what":"Deleting Is Forever","title":null,"text":"Unix shell doesn’t trash bin can recover deleted files (though graphical interfaces Unix ). Instead, delete files, unlinked file system storage space disk can recycled. Tools finding recovering deleted files exist, ’s guarantee ’ll work particular situation, since computer may recycle file’s disk space right away.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"using-rm-safely","dir":"Instructor","previous_headings":"","what":"Using rm Safely","title":null,"text":"happens execute rm -thesis_backup/quotations.txt? want protection using rm?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"copy-with-multiple-filenames","dir":"Instructor","previous_headings":"","what":"Copy with Multiple Filenames","title":null,"text":"exercise, can test commands shell-lesson-data/exercise-data directory. example , cp given several filenames directory name? example , cp given three file names?","code":"$ mkdir backup $ cp creatures/minotaur.dat creatures/unicorn.dat backup/ $ cd creatures $ ls -F basilisk.dat  minotaur.dat  unicorn.dat $ cp minotaur.dat unicorn.dat basilisk.dat"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"using-wildcards-for-accessing-multiple-files-at-once","dir":"Instructor","previous_headings":"","what":"Using wildcards for accessing multiple files at once","title":null,"text":"solution 3. 1. shows files whose names contain zero characters (*) followed letter t, zero characters (*) followed ane.pdb. gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb. 2. shows files whose names start zero characters (*) followed letter t, single character (?), ne. followed zero characters (*). give us octane.pdb pentane.pdb doesn’t match anything ends thane.pdb. 3. fixes problems option 2 matching two characters (??) t ne. solution. 4. shows files starting ethane.. Jamie needs move files fructose.dat sucrose.dat analyzed directory. shell expand *.dat match .dat files current directory. mv command moves list .dat files ‘analyzed’ directory. first two sets commands achieve objective. first set uses relative paths create top-level directory subdirectories. third set commands give error default behavior mkdir won’t create subdirectory non-existent directory: intermediate level folders must created first. fourth set commands achieve objective. Remember, -p option, followed path one directories, cause mkdir create intermediate subdirectories required. final set commands generates ‘raw’ ‘processed’ directories level ‘data’ directory.","code":"$ cp *calibration.txt backup/calibration $ cp 2015-11-* send_to_bob/all_november_files/ $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/ mv *.dat analyzed"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"wildcards","dir":"Instructor","previous_headings":"","what":"Wildcards","title":null,"text":"* wildcard, represents zero characters. Let’s consider shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, every file ends ‘.pdb’. hand, p*.pdb represents pentane.pdb propane.pdb, ‘p’ front can represent filenames begin letter ‘p’. ? also wildcard, represents exactly one character. ?ethane.pdb represent methane.pdb whereas *ethane.pdb represents ethane.pdb methane.pdb. Wildcards can used combination . example, ???ane.pdb indicates three characters followed ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb. shell sees wildcard, expands wildcard create list matching filenames running preceding command. exception, wildcard expression match file, Bash pass expression argument command . example, typing ls *.pdf alkanes directory (contains files names ending .pdb) results error message file called *.pdf. However, generally commands like wc ls see lists file names matching expressions, wildcards . shell, programs, expands wildcards.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"list-filenames-matching-a-pattern","dir":"Instructor","previous_headings":"","what":"List filenames matching a pattern","title":null,"text":"run alkanes directory, ls command(s) produce output? ethane.pdb   methane.pdb ls *t*ane.pdb ls *t?ne.* ls *t??ne.pdb ls ethane.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"more-on-wildcards","dir":"Instructor","previous_headings":"","what":"More on Wildcards","title":null,"text":"Sam directory containing calibration data, datasets, descriptions datasets: heading another field trip, wants back data send datasets colleague Bob. Sam uses following commands get job done: Help Sam filling blanks. resulting directory structure look like ","code":". ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   └── datasets └── send_to_bob     ├── all_datasets_created_on_a_23rd     └── all_november_files $ cp *dataset* backup/datasets $ cp ____calibration____ backup/calibration $ cp 2015-____-____ send_to_bob/all_november_files/ $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/ . ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   │   ├── 2015-10-23-calibration.txt │   │   ├── 2015-10-26-calibration.txt │   │   └── 2015-11-23-calibration.txt │   └── datasets │       ├── 2015-10-23-dataset1.txt │       ├── 2015-10-23-dataset2.txt │       ├── 2015-10-23-dataset_overview.txt │       ├── 2015-10-26-dataset1.txt │       ├── 2015-10-26-dataset2.txt │       ├── 2015-10-26-dataset_overview.txt │       ├── 2015-11-23-dataset1.txt │       ├── 2015-11-23-dataset2.txt │       └── 2015-11-23-dataset_overview.txt └── send_to_bob     ├── all_datasets_created_on_a_23rd     │   ├── 2015-10-23-dataset1.txt     │   ├── 2015-10-23-dataset2.txt     │   ├── 2015-10-23-dataset_overview.txt     │   ├── 2015-11-23-dataset1.txt     │   ├── 2015-11-23-dataset2.txt     │   └── 2015-11-23-dataset_overview.txt     └── all_november_files         ├── 2015-11-23-calibration.txt         ├── 2015-11-23-dataset1.txt         ├── 2015-11-23-dataset2.txt         └── 2015-11-23-dataset_overview.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"organizing-directories-and-files","dir":"Instructor","previous_headings":"","what":"Organizing Directories and Files","title":null,"text":"Jamie working project, sees files aren’t well organized: fructose.dat sucrose.dat files contain output data analysis. command(s) covered lesson need run commands produce output shown?","code":"$ ls -F analyzed/  fructose.dat    raw/   sucrose.dat $ ls -F analyzed/   raw/ $ ls analyzed fructose.dat    sucrose.dat"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"reproduce-a-folder-structure","dir":"Instructor","previous_headings":"","what":"Reproduce a folder structure","title":null,"text":"’re starting new experiment like duplicate directory structure previous experiment can add new data. Assume previous experiment folder called 2016-05-18, contains data folder turn contains folders named raw processed contain data files. goal copy folder structure 2016-05-18 folder folder called 2016-05-20 final directory structure looks like : following set commands achieve objective? commands ?","code":"2016-05-20/ └── data    ├── processed    └── raw $ mkdir 2016-05-20 $ mkdir 2016-05-20/data $ mkdir 2016-05-20/data/processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ cd data $ mkdir raw processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20/data/processed $ mkdir -p 2016-05-20/data/raw $ mkdir -p 2016-05-20/data/processed $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ mkdir raw processed"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"cp [old] [new] copies file. mkdir [path] creates new directory. mv [old] [new] moves (renames) file directory. rm [path] removes (deletes) file. * matches zero characters filename, *.txt matches files ending .txt. ? matches single character filename, ?.txt matches .txt .txt. Use Control key may described many ways, including Ctrl-X, Control-X, ^X. shell trash bin: something deleted, ’s really gone. files’ names something.extension. extension isn’t required, doesn’t guarantee anything, normally used indicate type data file. Depending type work , may need powerful text editor Nano.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"why-isnt-it-doing-anything","dir":"Instructor","previous_headings":"","what":"Why Isn’t It Doing Anything?","title":null,"text":"happens command supposed process file, don’t give filename? example, type: don’t type *.pdb (anything else) command? Since doesn’t filenames, wc assumes supposed process input given command prompt, just sits waits us give data interactively. outside, though, see sitting , command doesn’t appear anything. make kind mistake, can escape state holding control key (Ctrl) pressing letter C : Ctrl+C. release keys.","code":"$ wc -l"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"output-page-by-page","dir":"Instructor","previous_headings":"","what":"Output Page by Page","title":null,"text":"’ll continue use cat lesson, convenience consistency, disadvantage always dumps whole file onto screen. useful practice command less (e.g. less lengths.txt). displays screenful file, stops. can go forward one screenful pressing spacebar, back one pressing b. Press q quit.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"what-does-sort--n-do","dir":"Instructor","previous_headings":"","what":"What Does sort -n Do?","title":null,"text":"file shell-lesson-data/exercise-data/numbers.txt contains following lines: run sort file, output : run sort -n file, get instead: Explain -n effect.","code":"10 2 19 22 6 10 19 2 22 6 2 6 10 19 22"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"redirecting-to-the-same-file","dir":"Instructor","previous_headings":"","what":"Redirecting to the same file","title":null,"text":"’s bad idea try redirecting output command operates file file. example: something like may give incorrect results /delete contents lengths.txt.","code":"$ sort -n lengths.txt > lengths.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"what-does-mean","dir":"Instructor","previous_headings":"","what":"What Does >> Mean?","title":null,"text":"seen use >, similar operator >> works slightly differently. ’ll learn differences two operators printing strings. can use echo command print strings e.g. Now test commands reveal difference two operators: : Hint: Try executing command twice row examining output files.","code":"$ echo The echo command prints text The echo command prints text $ echo hello > testfile01.txt $ echo hello >> testfile02.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"appending-data","dir":"Instructor","previous_headings":"","what":"Appending Data","title":null,"text":"already met head command, prints lines start file. tail similar, prints lines end file instead. Consider file shell-lesson-data/exercise-data/animal-counts/animals.csv. commands, select answer corresponds file animals-subset.csv: first three lines animals.csv last two lines animals.csv first three lines last two lines animals.csv second third lines animals.csv","code":"$ head -n 3 animals.csv > animals-subset.csv $ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"piping-commands-together","dir":"Instructor","previous_headings":"","what":"Piping Commands Together","title":null,"text":"current directory, want find 3 files least number lines. command listed work? wc -l * > sort -n > head -n 3 wc -l * | sort -n | head -n 1-3 wc -l * | head -n 3 | sort -n wc -l * | sort -n | head -n 3","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"pipe-reading-comprehension","dir":"Instructor","previous_headings":"","what":"Pipe Reading Comprehension","title":null,"text":"file called animals.csv (shell-lesson-data/exercise-data/animal-counts folder) contains following data: text passes pipes final redirect pipeline ? Note, sort -r command sorts reverse order. Hint: build pipeline one command time test understanding","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"pipe-construction","dir":"Instructor","previous_headings":"","what":"Pipe Construction","title":null,"text":"file animals.csv previous exercise, consider following command: cut command used remove ‘cut ’ certain sections line file, cut expects lines separated columns Tab character. character used way called delimiter. example use -d option specify comma delimiter character. also used -f option specify want extract second field (column). gives following output: uniq command filters adjacent matching lines file. extend pipeline (using uniq another command) find animals file contains (without duplicates names)?","code":"$ cut -d , -f 2 animals.csv deer rabbit raccoon rabbit deer fox rabbit bear"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"which-pipe","dir":"Instructor","previous_headings":"","what":"Which Pipe?","title":null,"text":"file animals.csv contains 8 lines data formatted follows: uniq command -c option gives count number times line occurs input. Assuming current directory shell-lesson-data/exercise-data/animal-counts, command use produce table shows total count type animal file? sort animals.csv | uniq -c sort -t, -k2,2 animals.csv | uniq -c cut -d, -f 2 animals.csv | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c | wc -l","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"removing-unneeded-files","dir":"Instructor","previous_headings":"","what":"Removing Unneeded Files","title":null,"text":"Suppose want delete processed data files, keep raw files processing script save storage. raw files end .dat processed files end .txt. following remove processed data files, processed data files? rm ?.txt rm *.txt rm * .txt rm *.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"wc counts lines, words, characters inputs. cat displays contents inputs. sort sorts inputs. head displays first 10 lines input. tail displays last 10 lines input. command > [file] redirects command’s output file (overwriting existing content). command >> [file] appends command’s output file. [first] | [second] pipeline: output first command used input second. best way use shell use pipes combine simple single-purpose programs (filters).","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"follow-the-prompt","dir":"Instructor","previous_headings":"","what":"Follow the Prompt","title":null,"text":"shell prompt changes $ > back typing loop. second prompt, >, different remind us haven’t finished typing complete command yet. semicolon, ;, can used separate two commands written single line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"same-symbols-different-meanings","dir":"Instructor","previous_headings":"","what":"Same Symbols, Different Meanings","title":null,"text":"see > used shell prompt, whereas > also used redirect output. Similarly, $ used shell prompt, , saw earlier, also used ask shell get value variable. shell prints > $ expects type something, symbol prompt. type > $ , instruction shell redirect output get value variable.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"write-your-own-loop","dir":"Instructor","previous_headings":"","what":"Write your own loop","title":null,"text":"write loop echoes 10 numbers 0 9?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"variables-in-loops","dir":"Instructor","previous_headings":"","what":"Variables in Loops","title":null,"text":"exercise refers shell-lesson-data/exercise-data/alkanes directory. ls *.pdb gives following output: output following code? Now, output following code? two loops give different outputs?","code":"cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb $ for datafile in *.pdb > do >     ls *.pdb > done $ for datafile in *.pdb > do >     ls $datafile > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"limiting-sets-of-files","dir":"Instructor","previous_headings":"","what":"Limiting Sets of Files","title":null,"text":"output running following loop shell-lesson-data/exercise-data/alkanes directory? files listed. files listed. cubane.pdb, octane.pdb pentane.pdb listed. cubane.pdb listed.","code":"$ for filename in c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"limiting-sets-of-files-1","dir":"Instructor","previous_headings":"","what":"Limiting Sets of Files (continued)","title":null,"text":"output differ using command instead? files listed. files listed time. files listed time. files cubane.pdb octane.pdb listed. file octane.pdb listed.","code":"$ for filename in *c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"saving-to-a-file-in-a-loop---part-one","dir":"Instructor","previous_headings":"","what":"Saving to a File in a Loop - Part One","title":null,"text":"shell-lesson-data/exercise-data/alkanes directory, effect loop? Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb, text propane.pdb saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, text three files concatenated saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb, text propane.pdb saved file called alkanes.pdb. None .","code":"for alkanes in *.pdb do     echo $alkanes     cat $alkanes > alkanes.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"saving-to-a-file-in-a-loop---part-two","dir":"Instructor","previous_headings":"","what":"Saving to a File in a Loop - Part Two","title":null,"text":"Also shell-lesson-data/exercise-data/alkanes directory, output following loop? text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb concatenated saved file called .pdb. text ethane.pdb saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb concatenated saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb printed screen saved file called .pdb.","code":"for datafile in *.pdb do     cat $datafile >> all.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"spaces-in-names","dir":"Instructor","previous_headings":"","what":"Spaces in Names","title":null,"text":"Spaces used separate elements list going loop . one elements contains space character, need surround quotes, thing loop variable. Suppose data files named: loop files, need add double quotes like : simpler avoid using spaces (special characters) filenames. files don’t exist, run code, head command unable find ; however, error message returned show name files expecting: Try removing quotes around $filename loop see effect quote marks spaces. Note get result loop command unicorn.dat run code creatures directory:","code":"red dragon.dat purple unicorn.dat $ for filename in \"red dragon.dat\" \"purple unicorn.dat\" > do >     head -n 100 \"$filename\" | tail -n 20 > done head: cannot open ‘red dragon.dat' for reading: No such file or directory head: cannot open ‘purple unicorn.dat' for reading: No such file or directory head: cannot open ‘red' for reading: No such file or directory head: cannot open ‘dragon.dat' for reading: No such file or directory head: cannot open ‘purple' for reading: No such file or directory CGGTACCGAA AAGGGTCGCG CAAGTGTTCC ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"beginning-and-end","dir":"Instructor","previous_headings":"","what":"Beginning and End","title":null,"text":"can move beginning line shell typing Ctrl+end using Ctrl+E.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"those-who-know-history-can-choose-to-repeat-it","dir":"Instructor","previous_headings":"","what":"Those Who Know History Can Choose to Repeat It","title":null,"text":"Another way repeat previous work use history command get list last hundred commands executed, use !123 (‘123’ replaced command number) repeat one commands. example, Nelle types : can re-run goostats.sh files simply typing !459.","code":"$ history | tail -n 5 456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done 457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done 458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done 459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done 460  history | tail -n 5"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"other-history-commands","dir":"Instructor","previous_headings":"","what":"Other History Commands","title":null,"text":"number shortcut commands getting history. Ctrl+R enters history search mode ‘reverse--search’ finds recent command history matches text enter next. Press Ctrl+R one additional times search earlier matches. can use left right arrow keys choose line edit hit Return run command. !! retrieves immediately preceding command (may may find convenient using ↑) !$ retrieves last word last command. ’s useful often might expect: bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, can type less !$ look file stats-NENE01729B.txt, quicker ↑ editing command-line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"doing-a-dry-run","dir":"Instructor","previous_headings":"","what":"Doing a Dry Run","title":null,"text":"loop way many things — make many mistakes wrong thing. One way check loop echo commands run instead actually running . Suppose want preview commands following loop execute without actually running commands: difference two loops , one want run?","code":"$ for datafile in *.pdb > do >     cat $datafile >> all.pdb > done # Version 1 $ for datafile in *.pdb > do >     echo cat $datafile >> all.pdb > done # Version 2 $ for datafile in *.pdb > do >     echo \"cat $datafile >> all.pdb\" > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"nested-loops","dir":"Instructor","previous_headings":"","what":"Nested Loops","title":null,"text":"Suppose want set directory structure organize experiments measuring reaction rate constants different compounds different temperatures. result following code:","code":"$ for species in cubane ethane methane > do >     for temperature in 25 30 37 40 >     do >         mkdir $species-$temperature >     done > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"loop repeats commands every thing list. Every loop needs variable refer thing currently operating . Use $name expand variable (.e., get value). ${name} can also used. use spaces, quotes, wildcard characters ‘*’ ‘?’ filenames, complicates variable expansion. Give files consistent names easy match wildcard patterns make easy select looping. Use -arrow key scroll previous commands edit repeat . Use Ctrl+R search previously entered commands. Use history display recent commands, ![number] repeat command number.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"text-vs--whatever","dir":"Instructor","previous_headings":"","what":"Text vs. Whatever","title":null,"text":"usually call programs like Microsoft Word LibreOffice Writer “text editors”, need bit careful comes programming. default, Microsoft Word uses .docx files store text, also formatting information fonts, headings, . extra information isn’t stored characters doesn’t mean anything tools like head, expects input files contain nothing letters, digits, punctuation standard computer keyboard. editing programs, therefore, must either use plain text editor careful save files plain text.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"double-quotes-around-arguments","dir":"Instructor","previous_headings":"","what":"Double-Quotes Around Arguments","title":null,"text":"reason put loop variable inside double-quotes, case filename happens contain spaces, surround $1 double-quotes.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"list-unique-species","dir":"Instructor","previous_headings":"","what":"List Unique Species","title":null,"text":"Leah several hundred data files, formatted like : example type file given shell-lesson-data/exercise-data/animal-counts/animals.csv. can use command cut -d , -f 2 animals.csv | sort | uniq produce unique species animals.csv. order avoid type series commands every time, scientist may choose write shell script instead. Write shell script called species.sh takes number filenames command-line arguments uses variation command print list unique species appearing files separately.","code":"2013-11-05,deer,5 2013-11-05,rabbit,22 2013-11-05,raccoon,7 2013-11-06,rabbit,19 2013-11-06,deer,2 2013-11-06,fox,1 2013-11-07,rabbit,18 2013-11-07,bear,1"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"why-record-commands-in-the-history-before-running-them","dir":"Instructor","previous_headings":"","what":"Why Record Commands in the History Before Running Them?","title":null,"text":"run command: last command file history command , .e., shell added history command log actually running . fact, shell always adds commands log running . think ?","code":"$ history | tail -n 5 > recent.sh"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"variables-in-shell-scripts","dir":"Instructor","previous_headings":"","what":"Variables in Shell Scripts","title":null,"text":"alkanes directory, imagine shell script called script.sh containing following commands: alkanes directory, type following command: following outputs expect see? lines first last lines file ending .pdb alkanes directory first last line file ending .pdb alkanes directory first last line file alkanes directory error quotes around *.pdb","code":"head -n $2 $1 tail -n $3 $1 $ bash script.sh '*.pdb' 1 1"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"find-the-longest-file-with-a-given-extension","dir":"Instructor","previous_headings":"","what":"Find the Longest File With a Given Extension","title":null,"text":"Write shell script called longest.sh takes name directory filename extension arguments, prints name file lines directory extension. example: print name .pdb file shell-lesson-data/exercise-data/alkanes lines. Feel free test script another directory e.g.","code":"$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb $ bash longest.sh shell-lesson-data/exercise-data/writing txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"script-reading-comprehension","dir":"Instructor","previous_headings":"","what":"Script Reading Comprehension","title":null,"text":"question, consider shell-lesson-data/exercise-data/alkanes directory . contains number .pdb files addition files may created. Explain following three scripts run bash script1.sh *.pdb, bash script2.sh *.pdb, bash script3.sh *.pdb respectively.","code":"# Script 1 echo *.* # Script 2 for filename in $1 $2 $3 do     cat $filename done # Script 3 echo $@.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"debugging-scripts","dir":"Instructor","previous_headings":"","what":"Debugging Scripts","title":null,"text":"Suppose saved following script file called -errors.sh Nelle’s north-pacific-gyre directory: run north-pacific-gyre directory: output blank. figure , re-run script using -x option: output showing ? line responsible error?","code":"# Calculate stats for data files. for datafile in \"$@\" do     echo $datfile     bash goostats.sh $datafile stats-$datafile done $ bash do-errors.sh NENE*A.txt NENE*B.txt $ bash -x do-errors.sh NENE*A.txt NENE*B.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Save commands files (usually called shell scripts) re-use. bash [filename] runs commands saved file. $@ refers shell script’s command-line arguments. $1, $2, etc., refer first command-line argument, second command-line argument, etc. Place variables quotes values might spaces . Letting users decide files process flexible consistent built-Unix commands.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"using-grep","dir":"Instructor","previous_headings":"","what":"Using grep","title":null,"text":"command result following output: grep \"\" haiku.txt grep -E \"\" haiku.txt grep -w \"\" haiku.txt grep -\"\" haiku.txt","code":"and the presence of absence:"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"wildcards","dir":"Instructor","previous_headings":"","what":"Wildcards","title":null,"text":"grep‘s real power doesn’t come options, though; comes fact patterns can include wildcards. (technical name regular expressions, ’re’ ‘grep’ stands .) Regular expressions complex powerful; want complex searches, please look lesson website. taster, can find lines ‘o’ second position like : use -E option put pattern quotes prevent shell trying interpret . (pattern contained *, example, shell try expand running grep.) ^ pattern anchors match start line. . matches single character (just like ? shell), o matches actual ‘o’.","code":"$ grep -E \"^.o\" haiku.txt You bring fresh toner. Today it is not working Software is like that."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"tracking-a-species","dir":"Instructor","previous_headings":"","what":"Tracking a Species","title":null,"text":"Leah several hundred data files saved one directory, formatted like : wants write shell script takes species first command-line argument directory second argument. script return one file called <species>.txt containing list dates number species seen date. example using data shown , rabbit.txt contain: , line contains individual command, pipe. Arrange sequence one command order achieve Leah’s goal: Hint: use man grep look grep text recursively directory man cut select one field line. example file provided shell-lesson-data/exercise-data/animal-counts/animals.csv","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 2012-11-05,22 2012-11-06,19 2012-11-07,16 cut -d : -f 2 > | grep -w $1 -r $2 | $1.txt cut -d , -f 1,3"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"little-women","dir":"Instructor","previous_headings":"","what":"Little Women","title":null,"text":"friend, just finished reading Little Women Louisa May Alcott, argument. four sisters book, Jo, Meg, Beth, Amy, friend thinks Jo mentioned. , however, certain Amy. Luckily, file LittleWomen.txt containing full text novel (shell-lesson-data/exercise-data/writing/LittleWomen.txt). Using loop, tabulate number times four sisters mentioned? Hint: one solution might employ commands grep wc |, another might utilize grep options. often one way solve programming task, particular solution usually chosen based combination yielding correct result, elegance, readability, speed.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"listing-vs--finding","dir":"Instructor","previous_headings":"","what":"Listing vs. Finding","title":null,"text":"ls find can made similar things given right options, normal circumstances, ls lists everything can, find searches things certain properties shows .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"matching-and-subtracting","dir":"Instructor","previous_headings":"","what":"Matching and Subtracting","title":null,"text":"-v option grep inverts pattern matching, lines match pattern printed. Given , following commands find .dat files creatures except unicorn.dat? thought answer, can test commands shell-lesson-data/exercise-data directory. find creatures -name \"*.dat\" | grep -v unicorn find creatures -name *.dat | grep -v unicorn grep -v \"unicorn\" $(find creatures -name \"*.dat\") None .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"binary-files","dir":"Instructor","previous_headings":"","what":"Binary Files","title":null,"text":"focused exclusively finding patterns text files. data stored images, databases, format? handful tools extend grep handle non text formats. generalizable approach convert data text, extract text-like elements data. one hand, makes simple things easy . hand, complex things usually impossible. example, ’s easy enough write program extract X Y dimensions image files grep play , write something find values spreadsheet whose cells contained formulas? last option recognize shell text processing limits, use another programming language. time comes , don’t hard shell. Many modern programming languages borrowed lot ideas , imitation also sincerest form praise.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"find-pipeline-reading-comprehension","dir":"Instructor","previous_headings":"","what":"find Pipeline Reading Comprehension","title":null,"text":"Write short explanatory comment following shell script:","code":"wc -l $(find . -name \"*.dat\") | sort -n"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"find finds files specific properties match patterns. grep selects lines files match patterns. --help option supported many bash commands, programs can run within Bash, display information use commands programs. man [command] displays manual page given command. $([command]) inserts command’s output place.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/index.html","id":"prerequisites","dir":"Instructor","previous_headings":"","what":"Prerequisites","title":null,"text":"lesson guides basics file systems shell. stored files computer recognize word “file” either “directory” “folder” (two common words thing), ’re ready lesson. ’re already comfortable manipulating files directories, searching files grep find, writing simple loops scripts, probably want explore next lesson: shell-extras.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/index.html","id":"where-to-type-commands-how-to-open-a-new-shell","dir":"Instructor","previous_headings":"","what":"Where to type commands: How to open a new shell","title":null,"text":"shell program enables us send commands computer receive output. also referred terminal command line. computers include default Unix Shell program. steps describe methods identifying opening Unix Shell program already one installed. also options identifying downloading Unix Shell program, Linux/UNIX emulator, program access Unix Shell server. none options address circumstances, try online search : Unix shell [computer model] [operating system].","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/reference.html","id":"opening-a-terminal","dir":"Instructor","previous_headings":"","what":"Opening a terminal","title":null,"text":"Use Terminal Mac Git Windows Install Bash shell command-line tool Windows 10 Install Use Linux Bash Shell Windows 10 Using Windows 10 Bash Shell Using UNIX/Linux emulator (Cygwin) Secure Shell (SSH) client (Putty)","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/reference.html","id":"manuals","dir":"Instructor","previous_headings":"","what":"Manuals","title":null,"text":"GNU manuals Core GNU utilities","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/reference.html","id":"miscellaneous","dir":"Instructor","previous_headings":"","what":"Miscellaneous","title":null,"text":"North Pacific Gyre Great Pacific Garbage Patch ‘Ensuring longevity digital information’ Jeff Rothenberg Computer error haikus name files nicely, Jenny Bryan","code":""},{"path":"https://ErinBecker.github.io/shell-novice/reference.html","id":"opening-a-terminal","dir":"","previous_headings":"","what":"Opening a terminal","title":null,"text":"Use Terminal Mac Git Windows Install Bash shell command-line tool Windows 10 Install Use Linux Bash Shell Windows 10 Using Windows 10 Bash Shell Using UNIX/Linux emulator (Cygwin) Secure Shell (SSH) client (Putty)","code":""},{"path":"https://ErinBecker.github.io/shell-novice/reference.html","id":"manuals","dir":"","previous_headings":"","what":"Manuals","title":null,"text":"GNU manuals Core GNU utilities","code":""},{"path":"https://ErinBecker.github.io/shell-novice/reference.html","id":"miscellaneous","dir":"","previous_headings":"","what":"Miscellaneous","title":null,"text":"North Pacific Gyre Great Pacific Garbage Patch ‘Ensuring longevity digital information’ Jeff Rothenberg Computer error haikus name files nicely, Jenny Bryan","code":""}]
