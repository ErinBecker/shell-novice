[{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":"background","dir":"","previous_headings":"","what":"Background","title":null,"text":"Humans computers commonly interact many different ways, keyboard mouse, touch screen interfaces, using speech recognition systems. widely used way interact personal computers called graphical user interface (GUI). GUI, give instructions clicking mouse using menu-driven interactions. visual aid GUI makes intuitive learn, way delivering instructions computer scales poorly. Imagine following task: literature search, copy third line one thousand text files one thousand different directories paste single file. Using GUI, clicking desk several hours, potentially also commit error process completing repetitive task. take advantage Unix shell. Unix shell command-line interface (CLI) scripting language, allowing repetitive tasks done automatically fast. proper commands, shell can repeat tasks without modification many times want. Using shell, task literature example can accomplished seconds.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":"the-shell","dir":"","previous_headings":"","what":"The Shell","title":null,"text":"shell program users can type commands. shell, ’s possible invoke complicated programs like climate modeling software simple commands create empty directory one line code. popular Unix shell Bash (Bourne SHell — -called ’s derived shell written Stephen Bourne). Bash default shell modern implementations Unix packages provide Unix-like tools Windows. Note ‘Git Bash’ piece software enables Windows users use Bash like interface interacting Git. Using shell take effort time learn. GUI presents choices select, CLI choices automatically presented , must learn commands like new vocabulary language ’re studying. However, unlike spoken language, small number “words” (.e. commands) gets long way, ’ll cover essential today. grammar shell allows combine existing tools powerful pipelines handle large volumes data automatically. Sequences commands can written script, improving reproducibility workflows. addition, command line often easiest way interact remote machines supercomputers. Familiarity shell near essential run variety specialized tools resources including high-performance computing systems. clusters cloud computing systems become popular scientific data crunching, able interact shell becoming necessary skill. can build command-line skills covered tackle wide range scientific questions computational challenges. Let’s get started. shell first opened, presented prompt, indicating shell waiting input. shell typically uses $ prompt, may use different symbol. examples lesson, ’ll show prompt $. importantly, type prompt typing commands. type command follows prompt. rule applies lessons lessons sources. Also note type command, press Enter key execute . prompt followed text cursor, character indicates position typing appear. cursor usually flashing solid block, can also underscore pipe. may seen text editor program, example. Note prompt might look little different. particular, popular shell environments default put user name host name $. prompt might look like, e.g.: prompt might even include . worry prompt just short $. lesson depend additional information also get way. important item focus $ character see later . let’s try first command, ls, short listing. command list contents current directory:","code":"$ nelle@localhost $ $ ls Desktop     Downloads   Movies      Pictures Documents   Library     Music       Public"},{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":"command-not-found","dir":"","previous_headings":"","what":"Command not found","title":null,"text":"shell can’t find program whose name command typed, print error message : might happen command mis-typed program corresponding command installed.","code":"$ ks ks: command not found"},{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nelle Nemo, marine biologist, just returned six-month survey North Pacific Gyre, sampling gelatinous marine life Great Pacific Garbage Patch. 1520 samples ’s run assay machine measure relative abundance 300 proteins. needs run 1520 files imaginary program called goostats.sh. addition huge task, write results end month, paper can appear special issue Aquatic Goo Letters. Nelle chooses run goostats.sh hand using GUI, ’ll select open file 1520 times. goostats.sh takes 30 seconds run file, whole process take 12 hours Nelle’s attention. shell, Nelle can instead assign computer mundane task focuses attention writing paper. next lessons explore ways Nelle can achieve . specifically, lessons explain can use command shell run goostats.sh program, using loops automate repetitive steps entering file names, computer can work writes paper. bonus, put processing pipeline together, able use whenever collects data. order achieve task, Nelle needs know : navigate file/directory create file/directory check length file chain commands together retrieve set files iterate files run shell script containing pipeline","code":""},{"path":"https://ErinBecker.github.io/shell-novice/01-intro.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"shell program whose primary purpose read commands run programs. lesson uses Bash, default shell many implementations Unix. Programs can run Bash entering commands command-line prompt. shell’s main advantages high action--keystroke ratio, support automating repetitive tasks, capacity access networked machines. significant challenge using shell can knowing commands need run run .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"home-directory-variation","dir":"","previous_headings":"","what":"Home Directory Variation","title":null,"text":"home directory path look different different operating systems. Linux, may look like /home/nelle, Windows, similar C:\\Documents Settings\\nelle C:\\Users\\nelle. (Note may look slightly different different versions Windows.) future examples, ’ve used Mac output default - Linux Windows output may differ slightly generally similar. also assume pwd command returns user’s home directory. pwd returns something different, may need navigate using cd commands lesson work written. See Exploring Directories details cd command.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"slashes","dir":"","previous_headings":"","what":"Slashes","title":null,"text":"Notice two meanings / character. appears front file directory name, refers root directory. appears inside path, ’s just separator.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"clearing-your-terminal","dir":"","previous_headings":"","what":"Clearing your terminal","title":null,"text":"screen gets cluttered, can clear terminal using clear command. can still access previous commands using ↑ ↓ move line--line, scrolling terminal.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":null,"text":"ls lots options. two common ways find use command options accepts — depending environment, might find one ways works: can pass --help option command (available Linux Git Bash), example: can read manual man (available Linux macOS): ’ll describe ways next.","code":"$ ls --help $ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"help-for-built-in-commands","dir":"","previous_headings":"","what":"Help for built-in commands","title":null,"text":"commands built Bash shell, rather existing separate programs filesystem. One example cd (change directory) command. get message like manual entry cd, try help cd instead. help command get usage information Bash built-ins.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"the---help-option","dir":"","previous_headings":"Getting help","what":"The --help option","title":null,"text":"bash commands programs people written run within bash, support --help option displays information use command program.","code":"$ ls --help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.  Mandatory arguments to long options are mandatory for short options, too.   -a, --all                  do not ignore entries starting with .   -A, --almost-all           do not list implied . and ..       --author               with -l, print the author of each file   -b, --escape               print C-style escapes for nongraphic characters       --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,                                '--block-size=M' prints sizes in units of                                1,048,576 bytes; see SIZE format below   -B, --ignore-backups       do not list implied entries ending with ~   -c                         with -lt: sort by, and show, ctime (time of last                                modification of file status information);                                with -l: show ctime and sort by name;                                otherwise: sort by ctime, newest first   -C                         list entries by columns       --color[=WHEN]         colorize the output; WHEN can be 'always' (default                                if omitted), 'auto', or 'never'; more info below   -d, --directory            list directories themselves, not their contents   -D, --dired                generate output designed for Emacs' dired mode   -f                         do not sort, enable -aU, disable -ls --color   -F, --classify             append indicator (one of */=>@|) to entries ...        ...        ..."},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"unsupported-command-line-options","dir":"","previous_headings":"","what":"Unsupported command-line options","title":null,"text":"try use option supported, ls commands usually print error message similar :","code":"$ ls -j ls: invalid option -- 'j' Try 'ls --help' for more information."},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"the-man-command","dir":"","previous_headings":"Getting help","what":"The man command","title":null,"text":"way learn ls type command turn terminal page description ls command options. navigate man pages, may use ↑ ↓ move line--line, try B Spacebar skip full page. search character word man pages, use / followed character word searching . Sometimes search result multiple hits. , can move hits using N (moving forward) Shift+N (moving backward). quit man pages, press Q. -l option makes ls use long listing format, showing file/directory names also additional information, file size time last modification. use -h option -l option, makes file size ‘human readable’, .e. displaying something like 5.3K instead 5369. recently changed file listed last using -rt. can useful finding recent edits checking see new output file written.","code":"$ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"manual-pages-on-the-web","dir":"","previous_headings":"","what":"Manual pages on the web","title":null,"text":"course, third way access help commands: searching internet via web browser. using internet search, including phrase unix man page search query help find relevant results. GNU provides links manuals including core GNU utilities, covers many commands introduced within lesson.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"exploring-more-ls-options","dir":"","previous_headings":"","what":"Exploring More ls Options","title":null,"text":"can also use two options time. command ls used -l option? use -l -h option? output properties cover lesson (file permissions ownership), rest useful nevertheless.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"listing-in-reverse-chronological-order","dir":"","previous_headings":"","what":"Listing in Reverse Chronological Order","title":null,"text":"default, ls lists contents directory alphabetical order name. command ls -t lists items time last change instead alphabetically. command ls -r lists contents directory reverse order. file displayed last combine -t -r options? Hint: may need use -l option see last changed dates.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"exploring-other-directories","dir":"","previous_headings":"","what":"Exploring Other Directories","title":null,"text":"can use ls current working directory, can use list contents different directory. Let’s take look Desktop directory running ls -F Desktop, .e., command ls -F option argument Desktop. argument Desktop tells ls want listing something current working directory: Note directory named Desktop exist current working directory, command return error. Typically, Desktop directory exists home directory, assume current working directory bash shell. output list files sub-directories Desktop directory, including shell-lesson-data directory downloaded setup lesson. (systems, contents Desktop directory shell show icons graphical user interface behind open windows. See case .) Organizing things hierarchically helps us keep track work. ’s possible put hundreds files home directory just ’s possible pile hundreds printed papers desk, ’s much easier find things ’ve organized sensibly-named subdirectories. Now know shell-lesson-data directory located Desktop directory, can two things. First, using strategy , can look contents passing directory name ls: Second, can actually change location different directory, longer located home directory. command change locations cd followed directory name change working directory. cd stands ‘change directory’, bit misleading. command doesn’t change directory; changes shell’s current working directory. words changes shell’s settings directory . cd command akin double-clicking folder graphical interface get folder. Let’s say want move exercise-data directory saw . can use following series commands get : commands move us home directory Desktop directory, shell-lesson-data directory, exercise-data directory. notice cd doesn’t print anything. normal. Many shell commands output anything screen successfully executed. run pwd , can see now /Users/nelle/Desktop/shell-lesson-data/exercise-data. run ls -F without arguments now, lists contents /Users/nelle/Desktop/shell-lesson-data/exercise-data, ’s now : now know go directory tree (.e. go subdirectory), go (.e. leave directory go parent directory)? might try following: get error! ? methods far, cd can see sub-directories inside current directory. different ways see directories current location; ’ll start simplest. shortcut shell move one directory level. works follows: .. special directory name meaning “directory containing one”, succinctly, parent current directory. Sure enough, run pwd running cd .., ’re back /Users/nelle/Desktop/shell-lesson-data: special directory .. doesn’t usually show run ls. want display , can add -option ls -F: -stands ‘show ’ (including hidden files); forces ls show us file directory names begin ., .. (, ’re /Users/nelle, refers /Users directory). can see, also displays another special directory ’s just called ., means ‘current working directory’. may seem redundant name , ’ll see uses soon. Note command line tools, multiple options can combined single - spaces options; ls -F -equivalent ls -Fa. three commands basic commands navigating filesystem computer: pwd, ls, cd. Let’s explore variations commands. happens type cd , without giving directory? can check happened? pwd gives us answer! turns cd without argument return home directory, great ’ve got lost filesystem. Let’s try returning exercise-data directory . Last time, used three commands, can actually string together list directories move exercise-data one step: Check ’ve moved right place running pwd ls -F. want move one level data directory, use cd ... another way move directory, regardless current location. far, specifying directory names, even directory path (), using relative paths. use relative path command like ls cd, tries find location , rather root file system. However, possible specify absolute path directory including entire path root directory, indicated leading slash. leading / tells computer follow path root file system, always refers exactly one directory, matter run command. allows us move shell-lesson-data directory anywhere filesystem (including inside exercise-data). find absolute path ’re looking , can use pwd extract piece need move shell-lesson-data. Run pwd ls -F ensure ’re directory expect. : . stands current directory. : / stands root directory. : Nelle’s home directory /Users/nelle. : command goes two levels, .e. ends /Users. Yes: ~ stands user’s home directory, case /Users/nelle. : command navigate directory home current directory exists. Yes: unnecessarily complicated, correct. Yes: shortcut go back user’s home directory. Yes: goes one level. : directory backup /Users. : content Users/thing/backup, .., asked one level . : see previous explanation. Yes: ../backup/ refers /Users/backup/. : pwd name directory. Yes: ls without directory argument lists files directories current directory. Yes: uses absolute path explicitly.","code":"$ ls -F Desktop shell-lesson-data/ $ ls -F Desktop/shell-lesson-data exercise-data/  north-pacific-gyre/ $ cd Desktop $ cd shell-lesson-data $ cd exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ ls -F alkanes/  animal-counts/  creatures/  numbers.txt  writing/ $ cd shell-lesson-data -bash: cd: shell-lesson-data: No such file or directory $ cd .. $ pwd /Users/nelle/Desktop/shell-lesson-data $ ls -F -a ./  ../  exercise-data/  north-pacific-gyre/ $ cd $ pwd /Users/nelle $ cd Desktop/shell-lesson-data/exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ cd /Users/nelle/Desktop/shell-lesson-data"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"other-hidden-files","dir":"","previous_headings":"","what":"Other Hidden Files","title":null,"text":"addition hidden directories .. ., may also see file called .bash_profile. file usually contains shell configuration settings. may also see files directories beginning .. usually files directories used configure different programs computer. prefix . used prevent configuration files cluttering terminal standard ls command used.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"two-more-shortcuts","dir":"","previous_headings":"","what":"Two More Shortcuts","title":null,"text":"shell interprets tilde (~) character start path mean “current user’s home directory”. example, Nelle’s home directory /Users/nelle, ~/data equivalent /Users/nelle/data. works first character path; //~/elsewhere //Users/nelle/elsewhere. Another shortcut - (dash) character. cd translate - previous directory , faster remember, type, full path. efficient way moving back forth two directories – .e. execute cd - twice, end back starting directory. difference cd .. cd - former brings , latter brings back. Try ! First navigate ~/Desktop/shell-lesson-data (already ). cd exercise-data/creatures directory Now run ’ll see ’re back ~/Desktop/shell-lesson-data. Run cd - ’re back ~/Desktop/shell-lesson-data/exercise-data/creatures","code":"$ cd ~/Desktop/shell-lesson-data $ cd exercise-data/creatures $ cd -"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"absolute-vs-relative-paths","dir":"","previous_headings":"","what":"Absolute vs Relative Paths","title":null,"text":"Starting /Users/nelle/data, following commands Nelle use navigate home directory, /Users/nelle? cd . cd / cd /home/nelle cd ../.. cd ~ cd home cd ~/data/.. cd cd ..","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"relative-path-resolution","dir":"","previous_headings":"","what":"Relative Path Resolution","title":null,"text":"Using filesystem diagram , pwd displays /Users/thing, ls -F ../backup display? ../backup: file directory 2012-12-01 2013-01-08 2013-01-27 2012-12-01/ 2013-01-08/ 2013-01-27/ original/ pnas_final/ pnas_sub/","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"ls-reading-comprehension","dir":"","previous_headings":"","what":"ls Reading Comprehension","title":null,"text":"Using filesystem diagram , pwd displays /Users/backup, -r tells ls display things reverse order, command(s) result following output: ls pwd ls -r -F ls -r -F /Users/backup","code":"pnas_sub/ pnas_final/ original/"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"now encountered commands, options, arguments, perhaps useful formalise terminology. Consider command general example command, dissect component parts: ls command, option -F argument /. ’ve already encountered options either start single dash (-), known short options, two dashes (--), known long options. [Options] change behavior command Arguments tell command operate (e.g. files directories). Sometimes options arguments referred parameters. command can called one option one argument, command doesn’t always require argument option. might sometimes see options referred switches flags, especially options take argument. lesson stick using term option. part separated spaces. omit space ls -F shell look command called ls-F, doesn’t exist. Also, capitalization can important. example, ls -s display size files directories alongside names, ls -S sort files directories size, shown : Note sizes returned ls -s blocks. defined differently different operating systems, may obtain figures example. Putting together, command ls -F / gives us listing files directories root directory /. example output might get command given :","code":"$ ls -F / $ cd ~/Desktop/shell-lesson-data $ ls -s exercise-data total 28  4 animal-counts   4 creatures  12 numbers.txt   4 alkanes   4 writing $ ls -S exercise-data animal-counts  creatures  alkanes  writing  numbers.txt $ ls -F / Applications/         System/ Library/              Users/ Network/              Volumes/"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"when-to-use-short-or-long-options","dir":"","previous_headings":"","what":"When to use short or long options","title":null,"text":"options exist short long options: Use short option typing commands directly shell minimize keystrokes get task done faster. Use long option scripts provide clarity. read many times typed .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":"nelles-pipeline-organizing-files","dir":"","previous_headings":"","what":"Nelle’s Pipeline: Organizing Files","title":null,"text":"Knowing much files directories, Nelle ready organize files protein assay machine create. creates directory called north-pacific-gyre (remind data came ), contain data files assay machine data processing scripts. physical samples labelled according lab’s convention unique ten-character ID, ‘NENE01729A’. ID used collection log record location, time, depth, characteristics sample, decides use within filename data file. Since output assay machine plain text, call files NENE01729A.txt, NENE01812A.txt, . 1520 files go directory. Now current directory shell-lesson-data, Nelle can see files using command: command lot type, can let shell work called tab completion. types: presses Tab (tab key keyboard), shell automatically completes directory name : Pressing Tab nothing, since multiple possibilities; pressing Tab twice brings list files. Nelle presses G presses Tab , shell append ‘goo’ since files start ‘g’ share first three characters ‘goo’. see files, can press Tab twice . called tab completion, see many tools go .","code":"$ ls north-pacific-gyre/ $ ls nor $ ls north-pacific-gyre/ $ ls north-pacific-gyre/goo ls north-pacific-gyre/goo goodiff.sh   goostats.sh"},{"path":"https://ErinBecker.github.io/shell-novice/02-filedir.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"file system responsible managing information disk. Information stored files, stored directories (folders). Directories can also store directories, form directory tree. pwd prints user’s current working directory. ls [path] prints listing specific file directory; ls lists current working directory. cd [path] changes current working directory. commands take options begin single -. Directory names path separated / Unix, \\ Windows. / root directory whole file system. absolute path specifies location root file system. relative path specifies location starting current location. . means ‘current directory’; .. means ‘directory current one’.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"now know explore files directories, create first place? episode learn creating moving files directories, using exercise-data/writing directory example.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"step-one-see-where-we-are-and-what-we-already-have","dir":"","previous_headings":"","what":"Step one: see where we are and what we already have","title":null,"text":"still shell-lesson-data directory Desktop, can check using: Next ’ll move exercise-data/writing directory see contains:","code":"$ pwd /Users/nelle/Desktop/shell-lesson-data $ cd exercise-data/writing/ $ ls -F haiku.txt  LittleWomen.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"create-a-directory","dir":"","previous_headings":"","what":"Create a directory","title":null,"text":"Let’s create new directory called thesis using command mkdir thesis (output): might guess name, mkdir means ‘make directory’. Since thesis relative path (.e., leading slash, like //ever/thesis), new directory created current working directory: Since ’ve just created thesis directory, ’s nothing yet: Note mkdir limited creating single directories one time. -p option allows mkdir create directory nested subdirectories single operation: -R option ls command list nested subdirectories within directory. Let’s use ls -FR recursively list new directory hierarchy just created project directory:","code":"$ mkdir thesis $ ls -F haiku.txt  LittleWomen.txt  thesis/ $ ls -F thesis $ mkdir -p ../project/data ../project/results $ ls -FR ../project ../project/: data/  results/  ../project/data:  ../project/results:"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"two-ways-of-doing-the-same-thing","dir":"","previous_headings":"","what":"Two ways of doing the same thing","title":null,"text":"Using shell create directory different using file explorer. open current directory using operating system’s graphical file explorer, thesis directory appear . shell file explorer two different ways interacting files, files directories .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"good-names-for-files-and-directories","dir":"","previous_headings":"","what":"Good names for files and directories","title":null,"text":"Complicated names files directories can make life painful working command line. provide useful tips names files directories. Don’t use spaces. Spaces can make name meaningful, since spaces used separate arguments command line better avoid names files directories. can use - _ instead (e.g. north-pacific-gyre/ rather north pacific gyre/). test , try typing mkdir north pacific gyre see directory (directories!) made check ls -F. Don’t begin name - (dash). Commands treat names starting - options. Stick letters, numbers, . (period ‘full stop’), - (dash) _ (underscore). Many characters special meanings command line. learn lesson. special characters can cause command work expected can even result data loss. need refer names files directories spaces special characters, surround name quotes (\"\").","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"create-a-text-file","dir":"","previous_headings":"","what":"Create a text file","title":null,"text":"Let’s change working directory thesis using cd, run text editor called Nano create file called draft.txt: Let’s type lines text. ’re happy text, can press Ctrl+O (press Ctrl Control key , holding , press O key) write data disk. asked provide name file contain text. Press Return accept suggested default draft.txt. file saved, can use Ctrl+X quit editor return shell. nano doesn’t leave output screen exits, ls now shows created file called draft.txt: touch command generates new file called my_file.txt current directory. can observe newly generated file typing ls command line prompt. my_file.txt can also viewed GUI file explorer. inspect file ls -l, note size my_file.txt 0 bytes. words, contains data. open my_file.txt using text editor blank. programs generate output files , instead require empty files already generated. program run, searches existing file populate output. touch command allows efficiently generate blank text file used programs.","code":"$ cd thesis $ nano draft.txt $ ls draft.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"which-editor","dir":"","previous_headings":"","what":"Which Editor?","title":null,"text":"say, ‘nano text editor’ really mean ‘text’. can work plain character data, tables, images, human-friendly media. use examples one least complex text editors. However, trait, may powerful enough flexible enough work need workshop. Unix systems (Linux macOS), many programmers use Emacs Vim (require time learn), graphical editor Gedit VScode. Windows, may wish use Notepad++. Windows also built-editor called notepad can run command line way nano purposes lesson. matter editor use, need know searches saves files. start shell, (probably) use current working directory default location. use computer’s start menu, may want save files Desktop Documents directory instead. can change navigating another directory first time ‘Save …’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"control-ctrl-or-key","dir":"","previous_headings":"","what":"Control, Ctrl, or ^ Key","title":null,"text":"Control key also called ‘Ctrl’ key. various ways using Control key may described. example, may see instruction press Control key , holding , press X key, described : Control-X Control+X Ctrl-X Ctrl+X ^X C-x nano, along bottom screen ’ll see ^G Get Help ^O WriteOut. means can use Control-G get help Control-O save file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"creating-files-a-different-way","dir":"","previous_headings":"","what":"Creating Files a Different Way","title":null,"text":"seen create text files using nano editor. Now, try following command: touch command ? look current directory using GUI file explorer, file show ? Use ls -l inspect files. large my_file.txt? might want create file way?","code":"$ touch my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"creating-files-a-different-way-1","dir":"","previous_headings":"","what":"Creating Files a Different Way (continued)","title":null,"text":"avoid confusion later , suggest removing file ’ve just created proceeding rest episode, otherwise future outputs may vary given lesson. , use following command:","code":"$ rm my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s In A Name?","title":null,"text":"may noticed Nelle’s files named ‘something dot something’, part lesson, always used extension .txt. just convention; can call file mythesis almost anything else want. However, people use two-part names time help (programs) tell different kinds files apart. second part name called filename extension indicates type data file holds: .txt signals plain text file, .pdf indicates PDF document, .cfg configuration file full parameters program , .png PNG image, . just convention, albeit important one. Files merely contain bytes; ’s us programs interpret bytes according rules plain text files, PDF documents, configuration files, images, . Naming PNG image whale whale.mp3 doesn’t somehow magically turn recording whale song, though might cause operating system associate file music player program. case, someone double-clicked whale.mp3 file explorer program,music player automatically (erroneously) attempt open whale.mp3 file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Returning shell-lesson-data/exercise-data/writing directory, thesis directory file draft.txt isn’t particularly informative name, let’s change file’s name using mv, short ‘move’: first argument tells mv ’re ‘moving’, second ’s go. case, ’re moving thesis/draft.txt thesis/quotes.txt, effect renaming file. Sure enough, ls shows us thesis now contains one file called quotes.txt: One must careful specifying target file name, since mv silently overwrite existing file name, lead data loss. default, mv ask confirmation overwriting files. However, additional option, mv -(mv --interactive), cause mv request confirmation. Note mv also works directories. Let’s move quotes.txt current working directory. use mv , time ’ll use just name directory second argument tell mv want keep filename put file somewhere new. (command called ‘move’.) case, directory name use special directory name . mentioned earlier. effect move file directory current working directory. ls now shows us thesis empty: Alternatively, can confirm file quotes.txt longer present thesis directory explicitly trying list : ls filename directory argument lists requested file directory. file given argument doesn’t exist, shell returns error saw . can use see quotes.txt now present current directory: Recall .. refers parent directory (.e. one current directory) . refers current directory.","code":"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing $ mv thesis/draft.txt thesis/quotes.txt $ ls thesis quotes.txt $ mv thesis/quotes.txt . $ ls thesis $ $ ls thesis/quotes.txt ls: cannot access 'thesis/quotes.txt': No such file or directory $ ls quotes.txt quotes.txt $ mv sucrose.dat maltose.dat ../raw"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"moving-files-to-a-new-folder","dir":"","previous_headings":"","what":"Moving Files to a new folder","title":null,"text":"running following commands, Jamie realizes put files sucrose.dat maltose.dat wrong folder. files placed raw folder. Fill blanks move files raw/ folder (.e. one forgot put )","code":"$ ls -F  analyzed/ raw/ $ ls -F analyzed fructose.dat glucose.dat maltose.dat sucrose.dat $ cd analyzed $ mv sucrose.dat maltose.dat ____/____"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"cp command works much like mv, except copies file instead moving . can check right thing using ls two paths arguments — like Unix commands, ls can given multiple paths : can also copy directory contents using recursive option -r, e.g. back directory: can check result listing contents thesis thesis_backup directory: important include -r flag. want copy directory omit option see message directory omitted -r specified. . create file correct name, incorrectly named file still exists directory need deleted. Yes, work rename file. , period(.) indicates move file, provide new file name; identical file names created. , period(.) indicates copy file, provide new file name; identical file names created. start /Users/jamie/data directory, create new folder called recombined. second line moves (mv) file proteins.dat new folder (recombined). third line makes copy file just moved. tricky part file copied . Recall .. means ‘go level’, copied file now /Users/jamie. Notice .. interpreted respect current working directory, respect location file copied. , thing show using ls (/Users/jamie/data) recombined folder. , see explanation . proteins-saved.dat located /Users/jamie Yes , see explanation . proteins.dat located /Users/jamie/data/recombined , see explanation . proteins-saved.dat located /Users/jamie","code":"$ cp quotes.txt thesis/quotations.txt $ ls quotes.txt thesis/quotations.txt quotes.txt   thesis/quotations.txt $ cp -r thesis thesis_backup $ ls thesis thesis_backup thesis: quotations.txt  thesis_backup: quotations.txt $ cp thesis thesis_backup cp: -r not specified; omitting directory 'thesis'"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"renaming-files","dir":"","previous_headings":"","what":"Renaming Files","title":null,"text":"Suppose created plain-text file current directory contain list statistical tests need analyze data, named statstics.txt creating saving file realize misspelled filename! want correct mistake, following commands use ? cp statstics.txt statistics.txt mv statstics.txt statistics.txt mv statstics.txt . cp statstics.txt .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"moving-and-copying","dir":"","previous_headings":"","what":"Moving and Copying","title":null,"text":"output closing ls command sequence shown ? proteins-saved.dat recombined recombined proteins.dat recombined proteins-saved.dat","code":"$ pwd /Users/jamie/data $ ls proteins.dat $ mkdir recombined $ mv proteins.dat recombined/ $ cp recombined/proteins.dat ../proteins-saved.dat $ ls"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Returning shell-lesson-data/exercise-data/writing directory, let’s tidy directory removing quotes.txt file created. Unix command ’ll use rm (short ‘remove’): can confirm file gone using ls: -option prompt (every) removal (use Y confirm deletion N keep file). Unix shell doesn’t trash bin, files removed disappear forever. using -option, chance check deleting files want remove. try remove thesis directory using rm thesis, get error message: happens rm default works files, directories. rm can remove directory contents use recursive option -r, without confirmation prompts: Given way retrieve files deleted using shell, rm -r used great caution (might consider adding interactive option rm -r -).","code":"$ rm quotes.txt $ ls quotes.txt ls: cannot access 'quotes.txt': No such file or directory rm: remove regular file 'thesis_backup/quotations.txt'? y $ rm thesis rm: cannot remove 'thesis': Is a directory $ rm -r thesis"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"deleting-is-forever","dir":"","previous_headings":"","what":"Deleting Is Forever","title":null,"text":"Unix shell doesn’t trash bin can recover deleted files (though graphical interfaces Unix ). Instead, delete files, unlinked file system storage space disk can recycled. Tools finding recovering deleted files exist, ’s guarantee ’ll work particular situation, since computer may recycle file’s disk space right away.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"using-rm-safely","dir":"","previous_headings":"","what":"Using rm Safely","title":null,"text":"happens execute rm -thesis_backup/quotations.txt? want protection using rm?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"headingSolution6","dir":"","previous_headings":"","what":null,"title":null,"text":"Oftentimes one needs copy move several files . can done providing list individual filenames, specifying naming pattern using wildcards. Wildcards special characters can used represent unknown characters sets characters navigating Unix file system. given one file name followed directory name (.e. destination directory must last argument), cp copies files named directory. given three file names, cp throws error one , expecting directory name last argument.","code":"cp: target 'basilisk.dat' is not a directory"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"copy-with-multiple-filenames","dir":"","previous_headings":"","what":"Copy with Multiple Filenames","title":null,"text":"exercise, can test commands shell-lesson-data/exercise-data directory. example , cp given several filenames directory name? example , cp given three file names?","code":"$ mkdir backup $ cp creatures/minotaur.dat creatures/unicorn.dat backup/ $ cd creatures $ ls -F basilisk.dat  minotaur.dat  unicorn.dat $ cp minotaur.dat unicorn.dat basilisk.dat"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"using-wildcards-for-accessing-multiple-files-at-once","dir":"","previous_headings":"","what":"Using wildcards for accessing multiple files at once","title":null,"text":"solution 3. 1. shows files whose names contain zero characters (*) followed letter t, zero characters (*) followed ane.pdb. gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb. 2. shows files whose names start zero characters (*) followed letter t, single character (?), ne. followed zero characters (*). give us octane.pdb pentane.pdb doesn’t match anything ends thane.pdb. 3. fixes problems option 2 matching two characters (??) t ne. solution. 4. shows files starting ethane.. Jamie needs move files fructose.dat sucrose.dat analyzed directory. shell expand *.dat match .dat files current directory. mv command moves list .dat files ‘analyzed’ directory. first two sets commands achieve objective. first set uses relative paths create top-level directory subdirectories. third set commands give error default behavior mkdir won’t create subdirectory non-existent directory: intermediate level folders must created first. fourth set commands achieve objective. Remember, -p option, followed path one directories, cause mkdir create intermediate subdirectories required. final set commands generates ‘raw’ ‘processed’ directories level ‘data’ directory.","code":"$ cp *calibration.txt backup/calibration $ cp 2015-11-* send_to_bob/all_november_files/ $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/ mv *.dat analyzed"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"wildcards","dir":"","previous_headings":"","what":"Wildcards","title":null,"text":"* wildcard, represents zero characters. Let’s consider shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, every file ends ‘.pdb’. hand, p*.pdb represents pentane.pdb propane.pdb, ‘p’ front can represent filenames begin letter ‘p’. ? also wildcard, represents exactly one character. ?ethane.pdb represent methane.pdb whereas *ethane.pdb represents ethane.pdb methane.pdb. Wildcards can used combination . example, ???ane.pdb indicates three characters followed ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb. shell sees wildcard, expands wildcard create list matching filenames running preceding command. exception, wildcard expression match file, Bash pass expression argument command . example, typing ls *.pdf alkanes directory (contains files names ending .pdb) results error message file called *.pdf. However, generally commands like wc ls see lists file names matching expressions, wildcards . shell, programs, expands wildcards.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"list-filenames-matching-a-pattern","dir":"","previous_headings":"","what":"List filenames matching a pattern","title":null,"text":"run alkanes directory, ls command(s) produce output? ethane.pdb   methane.pdb ls *t*ane.pdb ls *t?ne.* ls *t??ne.pdb ls ethane.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"more-on-wildcards","dir":"","previous_headings":"","what":"More on Wildcards","title":null,"text":"Sam directory containing calibration data, datasets, descriptions datasets: heading another field trip, wants back data send datasets colleague Bob. Sam uses following commands get job done: Help Sam filling blanks. resulting directory structure look like ","code":". ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   └── datasets └── send_to_bob     ├── all_datasets_created_on_a_23rd     └── all_november_files $ cp *dataset* backup/datasets $ cp ____calibration____ backup/calibration $ cp 2015-____-____ send_to_bob/all_november_files/ $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/ . ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   │   ├── 2015-10-23-calibration.txt │   │   ├── 2015-10-26-calibration.txt │   │   └── 2015-11-23-calibration.txt │   └── datasets │       ├── 2015-10-23-dataset1.txt │       ├── 2015-10-23-dataset2.txt │       ├── 2015-10-23-dataset_overview.txt │       ├── 2015-10-26-dataset1.txt │       ├── 2015-10-26-dataset2.txt │       ├── 2015-10-26-dataset_overview.txt │       ├── 2015-11-23-dataset1.txt │       ├── 2015-11-23-dataset2.txt │       └── 2015-11-23-dataset_overview.txt └── send_to_bob     ├── all_datasets_created_on_a_23rd     │   ├── 2015-10-23-dataset1.txt     │   ├── 2015-10-23-dataset2.txt     │   ├── 2015-10-23-dataset_overview.txt     │   ├── 2015-11-23-dataset1.txt     │   ├── 2015-11-23-dataset2.txt     │   └── 2015-11-23-dataset_overview.txt     └── all_november_files         ├── 2015-11-23-calibration.txt         ├── 2015-11-23-dataset1.txt         ├── 2015-11-23-dataset2.txt         └── 2015-11-23-dataset_overview.txt"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"organizing-directories-and-files","dir":"","previous_headings":"","what":"Organizing Directories and Files","title":null,"text":"Jamie working project, sees files aren’t well organized: fructose.dat sucrose.dat files contain output data analysis. command(s) covered lesson need run commands produce output shown?","code":"$ ls -F analyzed/  fructose.dat    raw/   sucrose.dat $ ls -F analyzed/   raw/ $ ls analyzed fructose.dat    sucrose.dat"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":"reproduce-a-folder-structure","dir":"","previous_headings":"","what":"Reproduce a folder structure","title":null,"text":"’re starting new experiment like duplicate directory structure previous experiment can add new data. Assume previous experiment folder called 2016-05-18, contains data folder turn contains folders named raw processed contain data files. goal copy folder structure 2016-05-18 folder folder called 2016-05-20 final directory structure looks like : following set commands achieve objective? commands ?","code":"2016-05-20/ └── data    ├── processed    └── raw $ mkdir 2016-05-20 $ mkdir 2016-05-20/data $ mkdir 2016-05-20/data/processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ cd data $ mkdir raw processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20/data/processed $ mkdir -p 2016-05-20/data/raw $ mkdir -p 2016-05-20/data/processed $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ mkdir raw processed"},{"path":"https://ErinBecker.github.io/shell-novice/03-create.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"cp [old] [new] copies file. mkdir [path] creates new directory. mv [old] [new] moves (renames) file directory. rm [path] removes (deletes) file. * matches zero characters filename, *.txt matches files ending .txt. ? matches single character filename, ?.txt matches .txt .txt. Use Control key may described many ways, including Ctrl-X, Control-X, ^X. shell trash bin: something deleted, ’s really gone. files’ names something.extension. extension isn’t required, doesn’t guarantee anything, normally used indicate type data file. Depending type work , may need powerful text editor Nano.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"why-isnt-it-doing-anything","dir":"","previous_headings":"","what":"Why Isn’t It Doing Anything?","title":null,"text":"happens command supposed process file, don’t give filename? example, type: don’t type *.pdb (anything else) command? Since doesn’t filenames, wc assumes supposed process input given command prompt, just sits waits us give data interactively. outside, though, see sitting , command doesn’t appear anything. make kind mistake, can escape state holding control key (Ctrl) pressing letter C : Ctrl+C. release keys.","code":"$ wc -l"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"files contains fewest lines? ’s easy question answer six files, 6000? first step toward solution run command: greater symbol, >, tells shell redirect command’s output file instead printing screen. command prints screen output, everything wc printed gone file lengths.txt instead. file doesn’t exist prior issuing command, shell create file. file exists already, silently overwritten, may lead data loss. Thus, redirect commands require caution. ls lengths.txt confirms file exists: can now send content lengths.txt screen using cat lengths.txt. cat command gets name ‘concatenate’ .e. join together, prints contents files one another. ’s one file case, cat just shows us contains:","code":"$ wc -l *.pdb > lengths.txt $ ls lengths.txt lengths.txt $ cat lengths.txt 20  cubane.pdb   12  ethane.pdb    9  methane.pdb   30  octane.pdb   21  pentane.pdb   15  propane.pdb  107  total"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"output-page-by-page","dir":"","previous_headings":"","what":"Output Page by Page","title":null,"text":"’ll continue use cat lesson, convenience consistency, disadvantage always dumps whole file onto screen. useful practice command less (e.g. less lengths.txt). displays screenful file, stops. can go forward one screenful pressing spacebar, back one pressing b. Press q quit.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"headingSolution1","dir":"","previous_headings":"","what":null,"title":null,"text":"Next ’ll use sort command sort contents lengths.txt file. first ’ll exercise learn little sort command: -n option specifies numerical rather alphanumerical sort. also use -n option specify sort numerical instead alphanumerical. change file; instead, sends sorted result screen: can put sorted list lines another temporary file called sorted-lengths.txt putting > sorted-lengths.txt command, just used > lengths.txt put output wc lengths.txt. ’ve done , can run another command called head get first lines sorted-lengths.txt: Using -n 1 head tells want first line file; -n 20 get first 20, . Since sorted-lengths.txt contains lengths files ordered least greatest, output head must file fewest lines. first example >, string ‘hello’ written testfile01.txt, file gets overwritten time run command. see second example >> operator also writes ‘hello’ file (case testfile02.txt), appends string file already exists (.e. run second time). Option 3 correct. option 1 correct run head command. option 2 correct run tail command. option 4 correct pipe output head tail -n 2 head -n 3 animals.csv | tail -n 2 > animals-subset.csv","code":"$ sort -n lengths.txt 9  methane.pdb  12  ethane.pdb  15  propane.pdb  20  cubane.pdb  21  pentane.pdb  30  octane.pdb 107  total $ sort -n lengths.txt > sorted-lengths.txt $ head -n 1 sorted-lengths.txt 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"what-does-sort--n-do","dir":"","previous_headings":"","what":"What Does sort -n Do?","title":null,"text":"file shell-lesson-data/exercise-data/numbers.txt contains following lines: run sort file, output : run sort -n file, get instead: Explain -n effect.","code":"10 2 19 22 6 10 19 2 22 6 2 6 10 19 22"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"redirecting-to-the-same-file","dir":"","previous_headings":"","what":"Redirecting to the same file","title":null,"text":"’s bad idea try redirecting output command operates file file. example: something like may give incorrect results /delete contents lengths.txt.","code":"$ sort -n lengths.txt > lengths.txt"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"what-does-mean","dir":"","previous_headings":"","what":"What Does >> Mean?","title":null,"text":"seen use >, similar operator >> works slightly differently. ’ll learn differences two operators printing strings. can use echo command print strings e.g. Now test commands reveal difference two operators: : Hint: Try executing command twice row examining output files.","code":"$ echo The echo command prints text The echo command prints text $ echo hello > testfile01.txt $ echo hello >> testfile02.txt"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"appending-data","dir":"","previous_headings":"","what":"Appending Data","title":null,"text":"already met head command, prints lines start file. tail similar, prints lines end file instead. Consider file shell-lesson-data/exercise-data/animal-counts/animals.csv. commands, select answer corresponds file animals-subset.csv: first three lines animals.csv last two lines animals.csv first three lines last two lines animals.csv second third lines animals.csv","code":"$ head -n 3 animals.csv > animals-subset.csv $ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"example finding file fewest lines, using two intermediate files lengths.txt sorted-lengths.txt store output. confusing way work even understand wc, sort, head , intermediate files make hard follow ’s going . can make easier understand running sort head together: vertical bar, |, two commands called pipe. tells shell want use output command left input command right. removed need sorted-lengths.txt file.","code":"$ sort -n lengths.txt | head -n 1 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nothing prevents us chaining pipes consecutively. can example send output wc directly sort, send resulting output head. removes need intermediate files. ’ll start using pipe send output wc sort: can send output another pipe, head, full pipeline becomes: exactly like mathematician nesting functions like log(3x) saying ‘log three times x’. case, algorithm ‘head sort line count *.pdb’. redirection pipes used last commands illustrated : Option 4 solution. pipe character | used connect output one command input another. > used redirect standard output file. Try shell-lesson-data/exercise-data/alkanes directory!","code":"$ wc -l *.pdb | sort -n 9 methane.pdb   12 ethane.pdb   15 propane.pdb   20 cubane.pdb   21 pentane.pdb   30 octane.pdb  107 total $ wc -l *.pdb | sort -n | head -n 1 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"piping-commands-together","dir":"","previous_headings":"","what":"Piping Commands Together","title":null,"text":"current directory, want find 3 files least number lines. command listed work? wc -l * > sort -n > head -n 3 wc -l * | sort -n | head -n 1-3 wc -l * | head -n 3 | sort -n wc -l * | sort -n | head -n 3","code":""},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"headingSolution5","dir":"","previous_headings":"","what":null,"title":null,"text":"idea linking programs together Unix successful. Instead creating enormous programs try many different things, Unix programmers focus creating lots simple tools one job well, work well . programming model called ‘pipes filters’. ’ve already seen pipes; filter program like wc sort transforms stream input stream output. Almost standard Unix tools can work way. Unless told otherwise, read standard input, something ’ve read, write standard output. key program reads lines text standard input writes lines text standard output can combined every program behaves way well. can write programs way people can put programs pipes multiply power. head command extracts first 5 lines animals.csv. , last 3 lines extracted previous 5 using tail command. sort -r command 3 lines sorted reverse order. Finally, output redirected file: final.txt. content file can checked executing cat final.txt. file contain following lines: Option 4. correct answer. difficulty understanding , try running commands, sub-sections pipelines (make sure shell-lesson-data/exercise-data/animal-counts directory).","code":"2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-05,raccoon,7 $ cut -d , -f 2 animals.csv | sort | uniq"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"pipe-reading-comprehension","dir":"","previous_headings":"","what":"Pipe Reading Comprehension","title":null,"text":"file called animals.csv (shell-lesson-data/exercise-data/animal-counts folder) contains following data: text passes pipes final redirect pipeline ? Note, sort -r command sorts reverse order. Hint: build pipeline one command time test understanding","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"pipe-construction","dir":"","previous_headings":"","what":"Pipe Construction","title":null,"text":"file animals.csv previous exercise, consider following command: cut command used remove ‘cut ’ certain sections line file, cut expects lines separated columns Tab character. character used way called delimiter. example use -d option specify comma delimiter character. also used -f option specify want extract second field (column). gives following output: uniq command filters adjacent matching lines file. extend pipeline (using uniq another command) find animals file contains (without duplicates names)?","code":"$ cut -d , -f 2 animals.csv deer rabbit raccoon rabbit deer fox rabbit bear"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"which-pipe","dir":"","previous_headings":"","what":"Which Pipe?","title":null,"text":"file animals.csv contains 8 lines data formatted follows: uniq command -c option gives count number times line occurs input. Assuming current directory shell-lesson-data/exercise-data/animal-counts, command use produce table shows total count type animal file? sort animals.csv | uniq -c sort -t, -k2,2 animals.csv | uniq -c cut -d, -f 2 animals.csv | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c | wc -l","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 ..."},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nelle run samples assay machines created 17 files north-pacific-gyre directory described earlier. quick check, starting shell-lesson-data directory, Nelle types: output 18 lines look like : Now types : Whoops: one files 60 lines shorter others. goes back checks , sees assay 8:00 Monday morning — someone probably using machine weekend, forgot reset . re-running sample, checks see files much data: numbers look good — ’s ‘Z’ third--last line? samples marked ‘’ ‘B’; convention, lab uses ‘Z’ indicate samples missing information. find others like , : Sure enough, checks log laptop, ’s depth recorded either samples. Since ’s late get information way, must exclude two files analysis. delete using rm, actually analyses might later depth doesn’t matter, instead, ’ll careful later select files using wildcard expressions NENE*.txt NENE*B.txt. remove .txt files one-character names correct answer shell expand * match everything current directory, command try remove matched files additional file called .txt shell expands *.* match filenames containing least one ., including processed files (.txt) raw files (.dat)","code":"$ cd north-pacific-gyre $ wc -l *.txt 300 NENE01729A.txt 300 NENE01729B.txt 300 NENE01736A.txt 300 NENE01751A.txt 300 NENE01751B.txt 300 NENE01812A.txt ... ... $ wc -l *.txt | sort -n | head -n 5 240 NENE02018B.txt  300 NENE01729A.txt  300 NENE01729B.txt  300 NENE01736A.txt  300 NENE01751A.txt $ wc -l *.txt | sort -n | tail -n 5 300 NENE02040B.txt  300 NENE02040Z.txt  300 NENE02043A.txt  300 NENE02043B.txt 5040 total $ ls *Z.txt NENE01971Z.txt    NENE02040Z.txt"},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":"removing-unneeded-files","dir":"","previous_headings":"","what":"Removing Unneeded Files","title":null,"text":"Suppose want delete processed data files, keep raw files processing script save storage. raw files end .dat processed files end .txt. following remove processed data files, processed data files? rm ?.txt rm *.txt rm * .txt rm *.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/04-pipefilter.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"wc counts lines, words, characters inputs. cat displays contents inputs. sort sorts inputs. head displays first 10 lines input. tail displays last 10 lines input. command > [file] redirects command’s output file (overwriting existing content). command >> [file] appends command’s output file. [first] | [second] pipeline: output first command used input second. best way use shell use pipes combine simple single-purpose programs (filters).","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"follow-the-prompt","dir":"","previous_headings":"","what":"Follow the Prompt","title":null,"text":"shell prompt changes $ > back typing loop. second prompt, >, different remind us haven’t finished typing complete command yet. semicolon, ;, can used separate two commands written single line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"same-symbols-different-meanings","dir":"","previous_headings":"","what":"Same Symbols, Different Meanings","title":null,"text":"see > used shell prompt, whereas > also used redirect output. Similarly, $ used shell prompt, , saw earlier, also used ask shell get value variable. shell prints > $ expects type something, symbol prompt. type > $ , instruction shell redirect output get value variable.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"write-your-own-loop","dir":"","previous_headings":"","what":"Write your own loop","title":null,"text":"write loop echoes 10 numbers 0 9?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"variables-in-loops","dir":"","previous_headings":"","what":"Variables in Loops","title":null,"text":"exercise refers shell-lesson-data/exercise-data/alkanes directory. ls *.pdb gives following output: output following code? Now, output following code? two loops give different outputs?","code":"cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb $ for datafile in *.pdb > do >     ls *.pdb > done $ for datafile in *.pdb > do >     ls $datafile > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"limiting-sets-of-files","dir":"","previous_headings":"","what":"Limiting Sets of Files","title":null,"text":"output running following loop shell-lesson-data/exercise-data/alkanes directory? files listed. files listed. cubane.pdb, octane.pdb pentane.pdb listed. cubane.pdb listed.","code":"$ for filename in c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"limiting-sets-of-files-1","dir":"","previous_headings":"","what":"Limiting Sets of Files (continued)","title":null,"text":"output differ using command instead? files listed. files listed time. files listed time. files cubane.pdb octane.pdb listed. file octane.pdb listed.","code":"$ for filename in *c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"saving-to-a-file-in-a-loop---part-one","dir":"","previous_headings":"","what":"Saving to a File in a Loop - Part One","title":null,"text":"shell-lesson-data/exercise-data/alkanes directory, effect loop? Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb, text propane.pdb saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, text three files concatenated saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb, text propane.pdb saved file called alkanes.pdb. None .","code":"for alkanes in *.pdb do     echo $alkanes     cat $alkanes > alkanes.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"saving-to-a-file-in-a-loop---part-two","dir":"","previous_headings":"","what":"Saving to a File in a Loop - Part Two","title":null,"text":"Also shell-lesson-data/exercise-data/alkanes directory, output following loop? text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb concatenated saved file called .pdb. text ethane.pdb saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb concatenated saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb printed screen saved file called .pdb.","code":"for datafile in *.pdb do     cat $datafile >> all.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"spaces-in-names","dir":"","previous_headings":"","what":"Spaces in Names","title":null,"text":"Spaces used separate elements list going loop . one elements contains space character, need surround quotes, thing loop variable. Suppose data files named: loop files, need add double quotes like : simpler avoid using spaces (special characters) filenames. files don’t exist, run code, head command unable find ; however, error message returned show name files expecting: Try removing quotes around $filename loop see effect quote marks spaces. Note get result loop command unicorn.dat run code creatures directory:","code":"red dragon.dat purple unicorn.dat $ for filename in \"red dragon.dat\" \"purple unicorn.dat\" > do >     head -n 100 \"$filename\" | tail -n 20 > done head: cannot open ‘red dragon.dat' for reading: No such file or directory head: cannot open ‘purple unicorn.dat' for reading: No such file or directory head: cannot open ‘red' for reading: No such file or directory head: cannot open ‘dragon.dat' for reading: No such file or directory head: cannot open ‘purple' for reading: No such file or directory CGGTACCGAA AAGGGTCGCG CAAGTGTTCC ..."},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nelle now ready process data files using goostats.sh — shell script written supervisor. calculates statistics protein sample file takes two arguments: input file (containing raw data) output file (store calculated statistics) Since ’s still learning use shell, decides build required commands stages. first step make sure can select right input files — remember, ones whose names end ‘’ ‘B’, rather ‘Z’. Moving north-pacific-gyre directory, Nelle types: next step decide call files goostats.sh analysis program create. Prefixing input file’s name ‘stats’ seems simple, modifies loop : hasn’t actually run goostats.sh yet, now ’s sure can select right files generate right output filenames. Typing commands becoming tedious, though, Nelle worried making mistakes, instead re-entering loop, presses ↑. response, shell redisplays whole loop one line (using semi-colons separate pieces): Using ←, Nelle navigates echo command changes bash goostats.sh: presses Enter, shell runs modified command. However, nothing appears happen — output. moment, Nelle realizes since script doesn’t print anything screen longer, idea whether running, much less quickly. kills running command typing Ctrl+C, uses ↑ repeat command, edits read: runs program now, produces one line output every five seconds : 1518 times 5 seconds, divided 60, tells script take two hours run. final check, opens another terminal window, goes north-pacific-gyre, uses cat stats-NENE01729B.txt examine one output files. looks good, decides get coffee catch reading. second version one want run. prints screen everything enclosed quote marks, expanding loop variable name prefixed dollar sign. also modify create file .pdb, >> treated literally part string rather redirection instruction. first version appends output command echo cat $datafile file, .pdb. file just contain list; cat cubane.pdb, cat ethane.pdb, cat methane.pdb etc. Try versions see output! sure open .pdb file view contents. nested loop, .e. contained within another loop, species outer loop, inner loop (nested loop) iterates list temperatures, creates new directory combination. Try running code see directories created!","code":"$ cd $ cd Desktop/shell-lesson-data/north-pacific-gyre $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile > done NENE01729A.txt NENE01729B.txt NENE01736A.txt ... NENE02043A.txt NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile stats-$datafile > done NENE01729A.txt stats-NENE01729A.txt NENE01729B.txt stats-NENE01729B.txt NENE01736A.txt stats-NENE01736A.txt ... NENE02043A.txt stats-NENE02043A.txt NENE02043B.txt stats-NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done NENE01729A.txt NENE01729B.txt NENE01736A.txt ..."},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"beginning-and-end","dir":"","previous_headings":"","what":"Beginning and End","title":null,"text":"can move beginning line shell typing Ctrl+end using Ctrl+E.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"those-who-know-history-can-choose-to-repeat-it","dir":"","previous_headings":"","what":"Those Who Know History Can Choose to Repeat It","title":null,"text":"Another way repeat previous work use history command get list last hundred commands executed, use !123 (‘123’ replaced command number) repeat one commands. example, Nelle types : can re-run goostats.sh files simply typing !459.","code":"$ history | tail -n 5 456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done 457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done 458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done 459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done 460  history | tail -n 5"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"other-history-commands","dir":"","previous_headings":"","what":"Other History Commands","title":null,"text":"number shortcut commands getting history. Ctrl+R enters history search mode ‘reverse--search’ finds recent command history matches text enter next. Press Ctrl+R one additional times search earlier matches. can use left right arrow keys choose line edit hit Return run command. !! retrieves immediately preceding command (may may find convenient using ↑) !$ retrieves last word last command. ’s useful often might expect: bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, can type less !$ look file stats-NENE01729B.txt, quicker ↑ editing command-line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"doing-a-dry-run","dir":"","previous_headings":"","what":"Doing a Dry Run","title":null,"text":"loop way many things — make many mistakes wrong thing. One way check loop echo commands run instead actually running . Suppose want preview commands following loop execute without actually running commands: difference two loops , one want run?","code":"$ for datafile in *.pdb > do >     cat $datafile >> all.pdb > done # Version 1 $ for datafile in *.pdb > do >     echo cat $datafile >> all.pdb > done # Version 2 $ for datafile in *.pdb > do >     echo \"cat $datafile >> all.pdb\" > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":"nested-loops","dir":"","previous_headings":"","what":"Nested Loops","title":null,"text":"Suppose want set directory structure organize experiments measuring reaction rate constants different compounds different temperatures. result following code:","code":"$ for species in cubane ethane methane > do >     for temperature in 25 30 37 40 >     do >         mkdir $species-$temperature >     done > done"},{"path":"https://ErinBecker.github.io/shell-novice/05-loop.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"loop repeats commands every thing list. Every loop needs variable refer thing currently operating . Use $name expand variable (.e., get value). ${name} can also used. use spaces, quotes, wildcard characters ‘*’ ‘?’ filenames, complicates variable expansion. Give files consistent names easy match wildcard patterns make easy select looping. Use -arrow key scroll previous commands edit repeat . Use Ctrl+R search previously entered commands. Use history display recent commands, ![number] repeat command number.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"text-vs--whatever","dir":"","previous_headings":"","what":"Text vs. Whatever","title":null,"text":"usually call programs like Microsoft Word LibreOffice Writer “text editors”, need bit careful comes programming. default, Microsoft Word uses .docx files store text, also formatting information fonts, headings, . extra information isn’t stored characters doesn’t mean anything tools like head, expects input files contain nothing letters, digits, punctuation standard computer keyboard. editing programs, therefore, must either use plain text editor careful save files plain text.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"double-quotes-around-arguments","dir":"","previous_headings":"","what":"Double-Quotes Around Arguments","title":null,"text":"reason put loop variable inside double-quotes, case filename happens contain spaces, surround $1 double-quotes.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"list-unique-species","dir":"","previous_headings":"","what":"List Unique Species","title":null,"text":"Leah several hundred data files, formatted like : example type file given shell-lesson-data/exercise-data/animal-counts/animals.csv. can use command cut -d , -f 2 animals.csv | sort | uniq produce unique species animals.csv. order avoid type series commands every time, scientist may choose write shell script instead. Write shell script called species.sh takes number filenames command-line arguments uses variation command print list unique species appearing files separately.","code":"2013-11-05,deer,5 2013-11-05,rabbit,22 2013-11-05,raccoon,7 2013-11-06,rabbit,19 2013-11-06,deer,2 2013-11-06,fox,1 2013-11-07,rabbit,18 2013-11-07,bear,1"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"why-record-commands-in-the-history-before-running-them","dir":"","previous_headings":"","what":"Why Record Commands in the History Before Running Them?","title":null,"text":"run command: last command file history command , .e., shell added history command log actually running . fact, shell always adds commands log running . think ?","code":"$ history | tail -n 5 > recent.sh"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nelle’s supervisor insisted analytics must reproducible. easiest way capture steps script. First return Nelle’s project directory: creates file using nano … …contains following: saves file called -stats.sh can now re-first stage analysis typing: can also : output just number files processed rather names files processed. One thing note Nelle’s script lets person running decide files process. written : advantage always selects right files: doesn’t remember exclude ‘Z’ files. disadvantage always selects just files — can’t run files (including ‘Z’ files), ‘G’ ‘H’ files colleagues Antarctica producing, without editing script. wanted adventurous, modify script check command-line arguments, use NENE*.txt NENE*B.txt none provided. course, introduces another tradeoff flexibility complexity. correct answer 2. special variables $1, $2 $3 represent command line arguments given script, commands run : shell expand '*.pdb' enclosed quote marks. , first argument script '*.pdb' gets expanded within script head tail. first part pipeline, wc -l $1/*.$2 | sort -n, counts lines file sorts numerically (largest last). ’s one file, wc also outputs final summary line, giving total number lines across files. use tail -n 2 | head -n 1 throw away last line. wc -l $1/*.$2 | sort -n | tail -n 1 ’ll see final summary line: can build pipeline pieces sure understand output. case, shell expands wildcard *.pdb passing resulting list file names arguments script. Script 1 print list files containing dot name. arguments passed script actually used anywhere script. Script 2 print contents first 3 files .pdb file extension. $1, $2, $3 refer first, second, third argument respectively. Script 3 print arguments script (.e. .pdb files), followed .pdb. $@ refers arguments given shell script. -x option causes bash run debug mode. prints command run, help locate errors. example, can see echo isn’t printing anything. made typo loop variable name, variable datfile doesn’t exist, hence returning empty string.","code":"$ cd ../../north-pacific-gyre/ $ nano do-stats.sh # Calculate stats for data files. for datafile in \"$@\" do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ bash do-stats.sh NENE*A.txt NENE*B.txt $ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l # Calculate stats for Site A and Site B data files. for datafile in NENE*A.txt NENE*B.txt do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb # Shell script which takes two arguments: #    1. a directory name #    2. a file extension # and prints the name of the file in that directory # with the most lines which matches the file extension.  wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1 cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"variables-in-shell-scripts","dir":"","previous_headings":"","what":"Variables in Shell Scripts","title":null,"text":"alkanes directory, imagine shell script called script.sh containing following commands: alkanes directory, type following command: following outputs expect see? lines first last lines file ending .pdb alkanes directory first last line file ending .pdb alkanes directory first last line file alkanes directory error quotes around *.pdb","code":"head -n $2 $1 tail -n $3 $1 $ bash script.sh '*.pdb' 1 1"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"find-the-longest-file-with-a-given-extension","dir":"","previous_headings":"","what":"Find the Longest File With a Given Extension","title":null,"text":"Write shell script called longest.sh takes name directory filename extension arguments, prints name file lines directory extension. example: print name .pdb file shell-lesson-data/exercise-data/alkanes lines. Feel free test script another directory e.g.","code":"$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb $ bash longest.sh shell-lesson-data/exercise-data/writing txt"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"script-reading-comprehension","dir":"","previous_headings":"","what":"Script Reading Comprehension","title":null,"text":"question, consider shell-lesson-data/exercise-data/alkanes directory . contains number .pdb files addition files may created. Explain following three scripts run bash script1.sh *.pdb, bash script2.sh *.pdb, bash script3.sh *.pdb respectively.","code":"# Script 1 echo *.* # Script 2 for filename in $1 $2 $3 do     cat $filename done # Script 3 echo $@.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":"debugging-scripts","dir":"","previous_headings":"","what":"Debugging Scripts","title":null,"text":"Suppose saved following script file called -errors.sh Nelle’s north-pacific-gyre directory: run north-pacific-gyre directory: output blank. figure , re-run script using -x option: output showing ? line responsible error?","code":"# Calculate stats for data files. for datafile in \"$@\" do     echo $datfile     bash goostats.sh $datafile stats-$datafile done $ bash do-errors.sh NENE*A.txt NENE*B.txt $ bash -x do-errors.sh NENE*A.txt NENE*B.txt"},{"path":"https://ErinBecker.github.io/shell-novice/06-script.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Save commands files (usually called shell scripts) re-use. bash [filename] runs commands saved file. $@ refers shell script’s command-line arguments. $1, $2, etc., refer first command-line argument, second command-line argument, etc. Place variables quotes values might spaces . Letting users decide files process flexible consistent built-Unix commands.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"using-grep","dir":"","previous_headings":"","what":"Using grep","title":null,"text":"command result following output: grep \"\" haiku.txt grep -E \"\" haiku.txt grep -w \"\" haiku.txt grep -\"\" haiku.txt","code":"and the presence of absence:"},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"wildcards","dir":"","previous_headings":"","what":"Wildcards","title":null,"text":"grep‘s real power doesn’t come options, though; comes fact patterns can include wildcards. (technical name regular expressions, ’re’ ‘grep’ stands .) Regular expressions complex powerful; want complex searches, please look lesson website. taster, can find lines ‘o’ second position like : use -E option put pattern quotes prevent shell trying interpret . (pattern contained *, example, shell try expand running grep.) ^ pattern anchors match start line. . matches single character (just like ? shell), o matches actual ‘o’.","code":"$ grep -E \"^.o\" haiku.txt You bring fresh toner. Today it is not working Software is like that."},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"tracking-a-species","dir":"","previous_headings":"","what":"Tracking a Species","title":null,"text":"Leah several hundred data files saved one directory, formatted like : wants write shell script takes species first command-line argument directory second argument. script return one file called <species>.txt containing list dates number species seen date. example using data shown , rabbit.txt contain: , line contains individual command, pipe. Arrange sequence one command order achieve Leah’s goal: Hint: use man grep look grep text recursively directory man cut select one field line. example file provided shell-lesson-data/exercise-data/animal-counts/animals.csv","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 2012-11-05,22 2012-11-06,19 2012-11-07,16 cut -d : -f 2 > | grep -w $1 -r $2 | $1.txt cut -d , -f 1,3"},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"little-women","dir":"","previous_headings":"","what":"Little Women","title":null,"text":"friend, just finished reading Little Women Louisa May Alcott, argument. four sisters book, Jo, Meg, Beth, Amy, friend thinks Jo mentioned. , however, certain Amy. Luckily, file LittleWomen.txt containing full text novel (shell-lesson-data/exercise-data/writing/LittleWomen.txt). Using loop, tabulate number times four sisters mentioned? Hint: one solution might employ commands grep wc |, another might utilize grep options. often one way solve programming task, particular solution usually chosen based combination yielding correct result, elegance, readability, speed.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"listing-vs--finding","dir":"","previous_headings":"","what":"Listing vs. Finding","title":null,"text":"ls find can made similar things given right options, normal circumstances, ls lists everything can, find searches things certain properties shows .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"matching-and-subtracting","dir":"","previous_headings":"","what":"Matching and Subtracting","title":null,"text":"-v option grep inverts pattern matching, lines match pattern printed. Given , following commands find .dat files creatures except unicorn.dat? thought answer, can test commands shell-lesson-data/exercise-data directory. find creatures -name \"*.dat\" | grep -v unicorn find creatures -name *.dat | grep -v unicorn grep -v \"unicorn\" $(find creatures -name \"*.dat\") None .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"binary-files","dir":"","previous_headings":"","what":"Binary Files","title":null,"text":"focused exclusively finding patterns text files. data stored images, databases, format? handful tools extend grep handle non text formats. generalizable approach convert data text, extract text-like elements data. one hand, makes simple things easy . hand, complex things usually impossible. example, ’s easy enough write program extract X Y dimensions image files grep play , write something find values spreadsheet whose cells contained formulas? last option recognize shell text processing limits, use another programming language. time comes , don’t hard shell. Many modern programming languages borrowed lot ideas , imitation also sincerest form praise.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":"find-pipeline-reading-comprehension","dir":"","previous_headings":"","what":"find Pipeline Reading Comprehension","title":null,"text":"Write short explanatory comment following shell script:","code":"wc -l $(find . -name \"*.dat\") | sort -n"},{"path":"https://ErinBecker.github.io/shell-novice/07-find.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"find finds files specific properties match patterns. grep selects lines files match patterns. --help option supported many bash commands, programs can run within Bash, display information use commands programs. man [command] displays manual page given command. $([command]) inserts command’s output place.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Carpentries (Software Carpentry, Data Carpentry, Library Carpentry) instructional material made available Creative Commons Attribution license. following human-readable summary (substitute ) full legal text CC 4.0 license. free: Share—copy redistribute material medium format Adapt—remix, transform, build upon material purpose, even commercially. licensor revoke freedoms long follow license terms. following terms: Attribution—must give appropriate credit (mentioning work derived work Copyright (c) Carpentries , practical, linking https://carpentries.org/), provide link license, indicate changes made. may reasonable manner, way suggests licensor endorses use. additional restrictions—may apply legal terms technological measures legally restrict others anything license permits. understanding : Notices: comply license elements material public domain use permitted applicable exception limitation. warranties given. license may give permissions necessary intended use. example, rights publicity, privacy, moral rights may limit use material.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Except otherwise noted, example programs software provided Carpentries made available OSI-approved MIT license. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"“Carpentries”, “Software Carpentry”, “Data Carpentry”, “Library Carpentry” respective logos registered trademarks Community Initiatives.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Introducing Shell  command shell use one? Explain shell relates keyboard, screen, operating system, users’ programs. Explain command-line interfaces used instead graphical interfaces. Nelle Nemo, marine biologist, just returned six-month survey North Pacific Gyre, sampling gelatinous marine life Great Pacific Garbage Patch. 1520 samples ’s run assay machine measure relative abundance 300 proteins. needs run 1520 files imaginary program called goostats.sh. addition huge task, write results end month, paper can appear special issue Aquatic Goo Letters. Nelle chooses run goostats.sh hand using GUI, ’ll select open file 1520 times. goostats.sh takes 30 seconds run file, whole process take 12 hours Nelle’s attention. shell, Nelle can instead assign computer mundane task focuses attention writing paper. next lessons explore ways Nelle can achieve . specifically, lessons explain can use command shell run goostats.sh program, using loops automate repetitive steps entering file names, computer can work writes paper. bonus, put processing pipeline together, able use whenever collects data. order achieve task, Nelle needs know : navigate file/directory create file/directory check length file chain commands together retrieve set files iterate files run shell script containing pipeline","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"background","dir":"","previous_headings":"","what":"Background","title":null,"text":"Humans computers commonly interact many different ways, keyboard mouse, touch screen interfaces, using speech recognition systems. widely used way interact personal computers called graphical user interface (GUI). GUI, give instructions clicking mouse using menu-driven interactions. visual aid GUI makes intuitive learn, way delivering instructions computer scales poorly. Imagine following task: literature search, copy third line one thousand text files one thousand different directories paste single file. Using GUI, clicking desk several hours, potentially also commit error process completing repetitive task. take advantage Unix shell. Unix shell command-line interface (CLI) scripting language, allowing repetitive tasks done automatically fast. proper commands, shell can repeat tasks without modification many times want. Using shell, task literature example can accomplished seconds.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"the-shell","dir":"","previous_headings":"","what":"The Shell","title":null,"text":"shell program users can type commands. shell, ’s possible invoke complicated programs like climate modeling software simple commands create empty directory one line code. popular Unix shell Bash (Bourne SHell — -called ’s derived shell written Stephen Bourne). Bash default shell modern implementations Unix packages provide Unix-like tools Windows. Note ‘Git Bash’ piece software enables Windows users use Bash like interface interacting Git. Using shell take effort time learn. GUI presents choices select, CLI choices automatically presented , must learn commands like new vocabulary language ’re studying. However, unlike spoken language, small number “words” (.e. commands) gets long way, ’ll cover essential today. grammar shell allows combine existing tools powerful pipelines handle large volumes data automatically. Sequences commands can written script, improving reproducibility workflows. addition, command line often easiest way interact remote machines supercomputers. Familiarity shell near essential run variety specialized tools resources including high-performance computing systems. clusters cloud computing systems become popular scientific data crunching, able interact shell becoming necessary skill. can build command-line skills covered tackle wide range scientific questions computational challenges. Let’s get started. shell first opened, presented prompt, indicating shell waiting input. shell typically uses $ prompt, may use different symbol. examples lesson, ’ll show prompt $. importantly, type prompt typing commands. type command follows prompt. rule applies lessons lessons sources. Also note type command, press Enter key execute . prompt followed text cursor, character indicates position typing appear. cursor usually flashing solid block, can also underscore pipe. may seen text editor program, example. Note prompt might look little different. particular, popular shell environments default put user name host name $. prompt might look like, e.g.: prompt might even include . worry prompt just short $. lesson depend additional information also get way. important item focus $ character see later . let’s try first command, ls, short listing. command list contents current directory:","code":"$ nelle@localhost $ $ ls Desktop     Downloads   Movies      Pictures Documents   Library     Music       Public"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"command-not-found","dir":"","previous_headings":"","what":"Command not found","title":null,"text":"shell can’t find program whose name command typed, print error message : might happen command mis-typed program corresponding command installed.","code":"$ ks ks: command not found"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nelle Nemo, marine biologist, just returned six-month survey North Pacific Gyre, sampling gelatinous marine life Great Pacific Garbage Patch. 1520 samples ’s run assay machine measure relative abundance 300 proteins. needs run 1520 files imaginary program called goostats.sh. addition huge task, write results end month, paper can appear special issue Aquatic Goo Letters. Nelle chooses run goostats.sh hand using GUI, ’ll select open file 1520 times. goostats.sh takes 30 seconds run file, whole process take 12 hours Nelle’s attention. shell, Nelle can instead assign computer mundane task focuses attention writing paper. next lessons explore ways Nelle can achieve . specifically, lessons explain can use command shell run goostats.sh program, using loops automate repetitive steps entering file names, computer can work writes paper. bonus, put processing pipeline together, able use whenever collects data. order achieve task, Nelle needs know : navigate file/directory create file/directory check length file chain commands together retrieve set files iterate files run shell script containing pipeline","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"shell program whose primary purpose read commands run programs. lesson uses Bash, default shell many implementations Unix. Programs can run Bash entering commands command-line prompt. shell’s main advantages high action--keystroke ratio, support automating repetitive tasks, capacity access networked machines. significant challenge using shell can knowing commands need run run .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Navigating Files Directories  can move around computer? can see files directories ? can specify location file directory computer? Explain similarities differences file directory. Translate absolute path relative path vice versa. Construct absolute relative paths identify specific files directories. Use options arguments change behaviour shell command. Demonstrate use tab completion explain advantages. part operating system responsible managing files directories called file system. organizes data files, hold information, directories (also called ‘folders’), hold files directories. Several commands frequently used create, inspect, rename, delete files directories. start exploring , ’ll go open shell window. First, let’s find running command called pwd (stands ‘print working directory’). Directories like places — time using shell, exactly one place called current working directory. Commands mostly read write files current working directory, .e. ‘’, knowing running command important. pwd shows : , computer’s response /Users/nelle, Nelle’s home directory: understand ‘home directory’ , let’s look file system whole organized. sake example, ’ll illustrating filesystem scientist Nelle’s computer. illustration, ’ll learning commands explore filesystem, constructed similar way, exactly identical. Nelle’s computer, filesystem looks like : filesystem looks like upside tree. topmost directory root directory holds everything else. refer using slash character, /, ; character leading slash /Users/nelle. Inside directory several directories: bin (built-programs stored), data (miscellaneous data files), Users (users’ personal directories located), tmp (temporary files don’t need stored long-term), . know current working directory /Users/nelle stored inside /Users /Users first part name. Similarly, know /Users stored inside root directory / name begins /. Underneath /Users, find one directory user account Nelle’s machine, colleagues imhotep larry. user imhotep’s files stored /Users/imhotep, user larry’s /Users/larry, Nelle’s /Users/nelle. Nelle user examples ; therefore, get /Users/nelle home directory. Typically, open new command prompt, home directory start. Now let’s learn command let us see contents filesystem. can see ’s home directory running ls: (, results may slightly different depending operating system customized filesystem.) ls prints names files directories current directory. can make output comprehensible using -F option tells ls classify output adding marker file directory names indicate : trailing / indicates directory @ indicates link * indicates executable Depending shell’s default settings, shell might also use colors indicate whether entry file directory. , can see home directory contains sub-directories. names output don’t classification symbol files current working directory. now encountered commands, options, arguments, perhaps useful formalise terminology. Consider command general example command, dissect component parts: ls command, option -F argument /. ’ve already encountered options either start single dash (-), known short options, two dashes (--), known long options. [Options] change behavior command Arguments tell command operate (e.g. files directories). Sometimes options arguments referred parameters. command can called one option one argument, command doesn’t always require argument option. might sometimes see options referred switches flags, especially options take argument. lesson stick using term option. part separated spaces. omit space ls -F shell look command called ls-F, doesn’t exist. Also, capitalization can important. example, ls -s display size files directories alongside names, ls -S sort files directories size, shown : Note sizes returned ls -s blocks. defined differently different operating systems, may obtain figures example. Putting together, command ls -F / gives us listing files directories root directory /. example output might get command given :","code":"$ pwd /Users/nelle $ ls Applications Documents    Library      Music        Public Desktop      Downloads    Movies       Pictures $ ls -F Applications/ Documents/    Library/      Music/        Public/ Desktop/      Downloads/    Movies/       Pictures/ $ ls -F / $ cd ~/Desktop/shell-lesson-data $ ls -s exercise-data total 28  4 animal-counts   4 creatures  12 numbers.txt   4 alkanes   4 writing $ ls -S exercise-data animal-counts  creatures  alkanes  writing  numbers.txt $ ls -F / Applications/         System/ Library/              Users/ Network/              Volumes/"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"home-directory-variation","dir":"","previous_headings":"","what":"Home Directory Variation","title":null,"text":"home directory path look different different operating systems. Linux, may look like /home/nelle, Windows, similar C:\\Documents Settings\\nelle C:\\Users\\nelle. (Note may look slightly different different versions Windows.) future examples, ’ve used Mac output default - Linux Windows output may differ slightly generally similar. also assume pwd command returns user’s home directory. pwd returns something different, may need navigate using cd commands lesson work written. See Exploring Directories details cd command.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"slashes","dir":"","previous_headings":"","what":"Slashes","title":null,"text":"Notice two meanings / character. appears front file directory name, refers root directory. appears inside path, ’s just separator.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"clearing-your-terminal","dir":"","previous_headings":"","what":"Clearing your terminal","title":null,"text":"screen gets cluttered, can clear terminal using clear command. can still access previous commands using ↑ ↓ move line--line, scrolling terminal.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":null,"text":"ls lots options. two common ways find use command options accepts — depending environment, might find one ways works: can pass --help option command (available Linux Git Bash), example: can read manual man (available Linux macOS): ’ll describe ways next.","code":"$ ls --help $ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"help-for-built-in-commands","dir":"","previous_headings":"","what":"Help for built-in commands","title":null,"text":"commands built Bash shell, rather existing separate programs filesystem. One example cd (change directory) command. get message like manual entry cd, try help cd instead. help command get usage information Bash built-ins.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"the---help-option","dir":"","previous_headings":"Getting help","what":"The --help option","title":null,"text":"bash commands programs people written run within bash, support --help option displays information use command program.","code":"$ ls --help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.  Mandatory arguments to long options are mandatory for short options, too.   -a, --all                  do not ignore entries starting with .   -A, --almost-all           do not list implied . and ..       --author               with -l, print the author of each file   -b, --escape               print C-style escapes for nongraphic characters       --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,                                '--block-size=M' prints sizes in units of                                1,048,576 bytes; see SIZE format below   -B, --ignore-backups       do not list implied entries ending with ~   -c                         with -lt: sort by, and show, ctime (time of last                                modification of file status information);                                with -l: show ctime and sort by name;                                otherwise: sort by ctime, newest first   -C                         list entries by columns       --color[=WHEN]         colorize the output; WHEN can be 'always' (default                                if omitted), 'auto', or 'never'; more info below   -d, --directory            list directories themselves, not their contents   -D, --dired                generate output designed for Emacs' dired mode   -f                         do not sort, enable -aU, disable -ls --color   -F, --classify             append indicator (one of */=>@|) to entries ...        ...        ..."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"unsupported-command-line-options","dir":"","previous_headings":"","what":"Unsupported command-line options","title":null,"text":"try use option supported, ls commands usually print error message similar :","code":"$ ls -j ls: invalid option -- 'j' Try 'ls --help' for more information."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"the-man-command","dir":"","previous_headings":"Getting help","what":"The man command","title":null,"text":"way learn ls type command turn terminal page description ls command options. navigate man pages, may use ↑ ↓ move line--line, try B Spacebar skip full page. search character word man pages, use / followed character word searching . Sometimes search result multiple hits. , can move hits using N (moving forward) Shift+N (moving backward). quit man pages, press Q. -l option makes ls use long listing format, showing file/directory names also additional information, file size time last modification. use -h option -l option, makes file size ‘human readable’, .e. displaying something like 5.3K instead 5369. recently changed file listed last using -rt. can useful finding recent edits checking see new output file written.","code":"$ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"manual-pages-on-the-web","dir":"","previous_headings":"","what":"Manual pages on the web","title":null,"text":"course, third way access help commands: searching internet via web browser. using internet search, including phrase unix man page search query help find relevant results. GNU provides links manuals including core GNU utilities, covers many commands introduced within lesson.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"exploring-more-ls-options","dir":"","previous_headings":"","what":"Exploring More ls Options","title":null,"text":"can also use two options time. command ls used -l option? use -l -h option? output properties cover lesson (file permissions ownership), rest useful nevertheless.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"listing-in-reverse-chronological-order","dir":"","previous_headings":"","what":"Listing in Reverse Chronological Order","title":null,"text":"default, ls lists contents directory alphabetical order name. command ls -t lists items time last change instead alphabetically. command ls -r lists contents directory reverse order. file displayed last combine -t -r options? Hint: may need use -l option see last changed dates.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"exploring-other-directories","dir":"","previous_headings":"","what":"Exploring Other Directories","title":null,"text":"can use ls current working directory, can use list contents different directory. Let’s take look Desktop directory running ls -F Desktop, .e., command ls -F option argument Desktop. argument Desktop tells ls want listing something current working directory: Note directory named Desktop exist current working directory, command return error. Typically, Desktop directory exists home directory, assume current working directory bash shell. output list files sub-directories Desktop directory, including shell-lesson-data directory downloaded setup lesson. (systems, contents Desktop directory shell show icons graphical user interface behind open windows. See case .) Organizing things hierarchically helps us keep track work. ’s possible put hundreds files home directory just ’s possible pile hundreds printed papers desk, ’s much easier find things ’ve organized sensibly-named subdirectories. Now know shell-lesson-data directory located Desktop directory, can two things. First, using strategy , can look contents passing directory name ls: Second, can actually change location different directory, longer located home directory. command change locations cd followed directory name change working directory. cd stands ‘change directory’, bit misleading. command doesn’t change directory; changes shell’s current working directory. words changes shell’s settings directory . cd command akin double-clicking folder graphical interface get folder. Let’s say want move exercise-data directory saw . can use following series commands get : commands move us home directory Desktop directory, shell-lesson-data directory, exercise-data directory. notice cd doesn’t print anything. normal. Many shell commands output anything screen successfully executed. run pwd , can see now /Users/nelle/Desktop/shell-lesson-data/exercise-data. run ls -F without arguments now, lists contents /Users/nelle/Desktop/shell-lesson-data/exercise-data, ’s now : now know go directory tree (.e. go subdirectory), go (.e. leave directory go parent directory)? might try following: get error! ? methods far, cd can see sub-directories inside current directory. different ways see directories current location; ’ll start simplest. shortcut shell move one directory level. works follows: .. special directory name meaning “directory containing one”, succinctly, parent current directory. Sure enough, run pwd running cd .., ’re back /Users/nelle/Desktop/shell-lesson-data: special directory .. doesn’t usually show run ls. want display , can add -option ls -F: -stands ‘show ’ (including hidden files); forces ls show us file directory names begin ., .. (, ’re /Users/nelle, refers /Users directory). can see, also displays another special directory ’s just called ., means ‘current working directory’. may seem redundant name , ’ll see uses soon. Note command line tools, multiple options can combined single - spaces options; ls -F -equivalent ls -Fa. three commands basic commands navigating filesystem computer: pwd, ls, cd. Let’s explore variations commands. happens type cd , without giving directory? can check happened? pwd gives us answer! turns cd without argument return home directory, great ’ve got lost filesystem. Let’s try returning exercise-data directory . Last time, used three commands, can actually string together list directories move exercise-data one step: Check ’ve moved right place running pwd ls -F. want move one level data directory, use cd ... another way move directory, regardless current location. far, specifying directory names, even directory path (), using relative paths. use relative path command like ls cd, tries find location , rather root file system. However, possible specify absolute path directory including entire path root directory, indicated leading slash. leading / tells computer follow path root file system, always refers exactly one directory, matter run command. allows us move shell-lesson-data directory anywhere filesystem (including inside exercise-data). find absolute path ’re looking , can use pwd extract piece need move shell-lesson-data. Run pwd ls -F ensure ’re directory expect. : . stands current directory. : / stands root directory. : Nelle’s home directory /Users/nelle. : command goes two levels, .e. ends /Users. Yes: ~ stands user’s home directory, case /Users/nelle. : command navigate directory home current directory exists. Yes: unnecessarily complicated, correct. Yes: shortcut go back user’s home directory. Yes: goes one level. : directory backup /Users. : content Users/thing/backup, .., asked one level . : see previous explanation. Yes: ../backup/ refers /Users/backup/. : pwd name directory. Yes: ls without directory argument lists files directories current directory. Yes: uses absolute path explicitly.","code":"$ ls -F Desktop shell-lesson-data/ $ ls -F Desktop/shell-lesson-data exercise-data/  north-pacific-gyre/ $ cd Desktop $ cd shell-lesson-data $ cd exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ ls -F alkanes/  animal-counts/  creatures/  numbers.txt  writing/ $ cd shell-lesson-data -bash: cd: shell-lesson-data: No such file or directory $ cd .. $ pwd /Users/nelle/Desktop/shell-lesson-data $ ls -F -a ./  ../  exercise-data/  north-pacific-gyre/ $ cd $ pwd /Users/nelle $ cd Desktop/shell-lesson-data/exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ cd /Users/nelle/Desktop/shell-lesson-data"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"other-hidden-files","dir":"","previous_headings":"","what":"Other Hidden Files","title":null,"text":"addition hidden directories .. ., may also see file called .bash_profile. file usually contains shell configuration settings. may also see files directories beginning .. usually files directories used configure different programs computer. prefix . used prevent configuration files cluttering terminal standard ls command used.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"two-more-shortcuts","dir":"","previous_headings":"","what":"Two More Shortcuts","title":null,"text":"shell interprets tilde (~) character start path mean “current user’s home directory”. example, Nelle’s home directory /Users/nelle, ~/data equivalent /Users/nelle/data. works first character path; //~/elsewhere //Users/nelle/elsewhere. Another shortcut - (dash) character. cd translate - previous directory , faster remember, type, full path. efficient way moving back forth two directories – .e. execute cd - twice, end back starting directory. difference cd .. cd - former brings , latter brings back. Try ! First navigate ~/Desktop/shell-lesson-data (already ). cd exercise-data/creatures directory Now run ’ll see ’re back ~/Desktop/shell-lesson-data. Run cd - ’re back ~/Desktop/shell-lesson-data/exercise-data/creatures","code":"$ cd ~/Desktop/shell-lesson-data $ cd exercise-data/creatures $ cd -"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"absolute-vs-relative-paths","dir":"","previous_headings":"","what":"Absolute vs Relative Paths","title":null,"text":"Starting /Users/nelle/data, following commands Nelle use navigate home directory, /Users/nelle? cd . cd / cd /home/nelle cd ../.. cd ~ cd home cd ~/data/.. cd cd ..","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"relative-path-resolution","dir":"","previous_headings":"","what":"Relative Path Resolution","title":null,"text":"Using filesystem diagram , pwd displays /Users/thing, ls -F ../backup display? ../backup: file directory 2012-12-01 2013-01-08 2013-01-27 2012-12-01/ 2013-01-08/ 2013-01-27/ original/ pnas_final/ pnas_sub/","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"ls-reading-comprehension","dir":"","previous_headings":"","what":"ls Reading Comprehension","title":null,"text":"Using filesystem diagram , pwd displays /Users/backup, -r tells ls display things reverse order, command(s) result following output: ls pwd ls -r -F ls -r -F /Users/backup","code":"pnas_sub/ pnas_final/ original/"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"now encountered commands, options, arguments, perhaps useful formalise terminology. Consider command general example command, dissect component parts: ls command, option -F argument /. ’ve already encountered options either start single dash (-), known short options, two dashes (--), known long options. [Options] change behavior command Arguments tell command operate (e.g. files directories). Sometimes options arguments referred parameters. command can called one option one argument, command doesn’t always require argument option. might sometimes see options referred switches flags, especially options take argument. lesson stick using term option. part separated spaces. omit space ls -F shell look command called ls-F, doesn’t exist. Also, capitalization can important. example, ls -s display size files directories alongside names, ls -S sort files directories size, shown : Note sizes returned ls -s blocks. defined differently different operating systems, may obtain figures example. Putting together, command ls -F / gives us listing files directories root directory /. example output might get command given :","code":"$ ls -F / $ cd ~/Desktop/shell-lesson-data $ ls -s exercise-data total 28  4 animal-counts   4 creatures  12 numbers.txt   4 alkanes   4 writing $ ls -S exercise-data animal-counts  creatures  alkanes  writing  numbers.txt $ ls -F / Applications/         System/ Library/              Users/ Network/              Volumes/"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"when-to-use-short-or-long-options","dir":"","previous_headings":"","what":"When to use short or long options","title":null,"text":"options exist short long options: Use short option typing commands directly shell minimize keystrokes get task done faster. Use long option scripts provide clarity. read many times typed .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"nelles-pipeline-organizing-files","dir":"","previous_headings":"","what":"Nelle’s Pipeline: Organizing Files","title":null,"text":"Knowing much files directories, Nelle ready organize files protein assay machine create. creates directory called north-pacific-gyre (remind data came ), contain data files assay machine data processing scripts. physical samples labelled according lab’s convention unique ten-character ID, ‘NENE01729A’. ID used collection log record location, time, depth, characteristics sample, decides use within filename data file. Since output assay machine plain text, call files NENE01729A.txt, NENE01812A.txt, . 1520 files go directory. Now current directory shell-lesson-data, Nelle can see files using command: command lot type, can let shell work called tab completion. types: presses Tab (tab key keyboard), shell automatically completes directory name : Pressing Tab nothing, since multiple possibilities; pressing Tab twice brings list files. Nelle presses G presses Tab , shell append ‘goo’ since files start ‘g’ share first three characters ‘goo’. see files, can press Tab twice . called tab completion, see many tools go .","code":"$ ls north-pacific-gyre/ $ ls nor $ ls north-pacific-gyre/ $ ls north-pacific-gyre/goo ls north-pacific-gyre/goo goodiff.sh   goostats.sh"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"file system responsible managing information disk. Information stored files, stored directories (folders). Directories can also store directories, form directory tree. pwd prints user’s current working directory. ls [path] prints listing specific file directory; ls lists current working directory. cd [path] changes current working directory. commands take options begin single -. Directory names path separated / Unix, \\ Windows. / root directory whole file system. absolute path specifies location root file system. relative path specifies location starting current location. . means ‘current directory’; .. means ‘directory current one’.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Working Files Directories  can create, copy, delete files directories? can edit files? Create directory hierarchy matches given diagram. Create files hierarchy using editor copying renaming existing files. Delete, copy move specified files /directories. now know explore files directories, create first place? episode learn creating moving files directories, using exercise-data/writing directory example. Returning shell-lesson-data/exercise-data/writing directory, thesis directory file draft.txt isn’t particularly informative name, let’s change file’s name using mv, short ‘move’: first argument tells mv ’re ‘moving’, second ’s go. case, ’re moving thesis/draft.txt thesis/quotes.txt, effect renaming file. Sure enough, ls shows us thesis now contains one file called quotes.txt: One must careful specifying target file name, since mv silently overwrite existing file name, lead data loss. default, mv ask confirmation overwriting files. However, additional option, mv -(mv --interactive), cause mv request confirmation. Note mv also works directories. Let’s move quotes.txt current working directory. use mv , time ’ll use just name directory second argument tell mv want keep filename put file somewhere new. (command called ‘move’.) case, directory name use special directory name . mentioned earlier. effect move file directory current working directory. ls now shows us thesis empty: Alternatively, can confirm file quotes.txt longer present thesis directory explicitly trying list : ls filename directory argument lists requested file directory. file given argument doesn’t exist, shell returns error saw . can use see quotes.txt now present current directory: Recall .. refers parent directory (.e. one current directory) . refers current directory. cp command works much like mv, except copies file instead moving . can check right thing using ls two paths arguments — like Unix commands, ls can given multiple paths : can also copy directory contents using recursive option -r, e.g. back directory: can check result listing contents thesis thesis_backup directory: important include -r flag. want copy directory omit option see message directory omitted -r specified. . create file correct name, incorrectly named file still exists directory need deleted. Yes, work rename file. , period(.) indicates move file, provide new file name; identical file names created. , period(.) indicates copy file, provide new file name; identical file names created. start /Users/jamie/data directory, create new folder called recombined. second line moves (mv) file proteins.dat new folder (recombined). third line makes copy file just moved. tricky part file copied . Recall .. means ‘go level’, copied file now /Users/jamie. Notice .. interpreted respect current working directory, respect location file copied. , thing show using ls (/Users/jamie/data) recombined folder. , see explanation . proteins-saved.dat located /Users/jamie Yes , see explanation . proteins.dat located /Users/jamie/data/recombined , see explanation . proteins-saved.dat located /Users/jamie Returning shell-lesson-data/exercise-data/writing directory, let’s tidy directory removing quotes.txt file created. Unix command ’ll use rm (short ‘remove’): can confirm file gone using ls: -option prompt (every) removal (use Y confirm deletion N keep file). Unix shell doesn’t trash bin, files removed disappear forever. using -option, chance check deleting files want remove. try remove thesis directory using rm thesis, get error message: happens rm default works files, directories. rm can remove directory contents use recursive option -r, without confirmation prompts: Given way retrieve files deleted using shell, rm -r used great caution (might consider adding interactive option rm -r -). Oftentimes one needs copy move several files . can done providing list individual filenames, specifying naming pattern using wildcards. Wildcards special characters can used represent unknown characters sets characters navigating Unix file system. given one file name followed directory name (.e. destination directory must last argument), cp copies files named directory. given three file names, cp throws error one , expecting directory name last argument.","code":"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing $ mv thesis/draft.txt thesis/quotes.txt $ ls thesis quotes.txt $ mv thesis/quotes.txt . $ ls thesis $ $ ls thesis/quotes.txt ls: cannot access 'thesis/quotes.txt': No such file or directory $ ls quotes.txt quotes.txt $ mv sucrose.dat maltose.dat ../raw $ cp quotes.txt thesis/quotations.txt $ ls quotes.txt thesis/quotations.txt quotes.txt   thesis/quotations.txt $ cp -r thesis thesis_backup $ ls thesis thesis_backup thesis: quotations.txt  thesis_backup: quotations.txt $ cp thesis thesis_backup cp: -r not specified; omitting directory 'thesis' $ rm quotes.txt $ ls quotes.txt ls: cannot access 'quotes.txt': No such file or directory rm: remove regular file 'thesis_backup/quotations.txt'? y $ rm thesis rm: cannot remove 'thesis': Is a directory $ rm -r thesis cp: target 'basilisk.dat' is not a directory"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"now know explore files directories, create first place? episode learn creating moving files directories, using exercise-data/writing directory example.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"step-one-see-where-we-are-and-what-we-already-have","dir":"","previous_headings":"","what":"Step one: see where we are and what we already have","title":null,"text":"still shell-lesson-data directory Desktop, can check using: Next ’ll move exercise-data/writing directory see contains:","code":"$ pwd /Users/nelle/Desktop/shell-lesson-data $ cd exercise-data/writing/ $ ls -F haiku.txt  LittleWomen.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"create-a-directory","dir":"","previous_headings":"","what":"Create a directory","title":null,"text":"Let’s create new directory called thesis using command mkdir thesis (output): might guess name, mkdir means ‘make directory’. Since thesis relative path (.e., leading slash, like //ever/thesis), new directory created current working directory: Since ’ve just created thesis directory, ’s nothing yet: Note mkdir limited creating single directories one time. -p option allows mkdir create directory nested subdirectories single operation: -R option ls command list nested subdirectories within directory. Let’s use ls -FR recursively list new directory hierarchy just created project directory:","code":"$ mkdir thesis $ ls -F haiku.txt  LittleWomen.txt  thesis/ $ ls -F thesis $ mkdir -p ../project/data ../project/results $ ls -FR ../project ../project/: data/  results/  ../project/data:  ../project/results:"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"two-ways-of-doing-the-same-thing","dir":"","previous_headings":"","what":"Two ways of doing the same thing","title":null,"text":"Using shell create directory different using file explorer. open current directory using operating system’s graphical file explorer, thesis directory appear . shell file explorer two different ways interacting files, files directories .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"good-names-for-files-and-directories","dir":"","previous_headings":"","what":"Good names for files and directories","title":null,"text":"Complicated names files directories can make life painful working command line. provide useful tips names files directories. Don’t use spaces. Spaces can make name meaningful, since spaces used separate arguments command line better avoid names files directories. can use - _ instead (e.g. north-pacific-gyre/ rather north pacific gyre/). test , try typing mkdir north pacific gyre see directory (directories!) made check ls -F. Don’t begin name - (dash). Commands treat names starting - options. Stick letters, numbers, . (period ‘full stop’), - (dash) _ (underscore). Many characters special meanings command line. learn lesson. special characters can cause command work expected can even result data loss. need refer names files directories spaces special characters, surround name quotes (\"\").","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"create-a-text-file","dir":"","previous_headings":"","what":"Create a text file","title":null,"text":"Let’s change working directory thesis using cd, run text editor called Nano create file called draft.txt: Let’s type lines text. ’re happy text, can press Ctrl+O (press Ctrl Control key , holding , press O key) write data disk. asked provide name file contain text. Press Return accept suggested default draft.txt. file saved, can use Ctrl+X quit editor return shell. nano doesn’t leave output screen exits, ls now shows created file called draft.txt: touch command generates new file called my_file.txt current directory. can observe newly generated file typing ls command line prompt. my_file.txt can also viewed GUI file explorer. inspect file ls -l, note size my_file.txt 0 bytes. words, contains data. open my_file.txt using text editor blank. programs generate output files , instead require empty files already generated. program run, searches existing file populate output. touch command allows efficiently generate blank text file used programs.","code":"$ cd thesis $ nano draft.txt $ ls draft.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"which-editor","dir":"","previous_headings":"","what":"Which Editor?","title":null,"text":"say, ‘nano text editor’ really mean ‘text’. can work plain character data, tables, images, human-friendly media. use examples one least complex text editors. However, trait, may powerful enough flexible enough work need workshop. Unix systems (Linux macOS), many programmers use Emacs Vim (require time learn), graphical editor Gedit VScode. Windows, may wish use Notepad++. Windows also built-editor called notepad can run command line way nano purposes lesson. matter editor use, need know searches saves files. start shell, (probably) use current working directory default location. use computer’s start menu, may want save files Desktop Documents directory instead. can change navigating another directory first time ‘Save …’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"control-ctrl-or-key","dir":"","previous_headings":"","what":"Control, Ctrl, or ^ Key","title":null,"text":"Control key also called ‘Ctrl’ key. various ways using Control key may described. example, may see instruction press Control key , holding , press X key, described : Control-X Control+X Ctrl-X Ctrl+X ^X C-x nano, along bottom screen ’ll see ^G Get Help ^O WriteOut. means can use Control-G get help Control-O save file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"creating-files-a-different-way","dir":"","previous_headings":"","what":"Creating Files a Different Way","title":null,"text":"seen create text files using nano editor. Now, try following command: touch command ? look current directory using GUI file explorer, file show ? Use ls -l inspect files. large my_file.txt? might want create file way?","code":"$ touch my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"creating-files-a-different-way-1","dir":"","previous_headings":"","what":"Creating Files a Different Way (continued)","title":null,"text":"avoid confusion later , suggest removing file ’ve just created proceeding rest episode, otherwise future outputs may vary given lesson. , use following command:","code":"$ rm my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s In A Name?","title":null,"text":"may noticed Nelle’s files named ‘something dot something’, part lesson, always used extension .txt. just convention; can call file mythesis almost anything else want. However, people use two-part names time help (programs) tell different kinds files apart. second part name called filename extension indicates type data file holds: .txt signals plain text file, .pdf indicates PDF document, .cfg configuration file full parameters program , .png PNG image, . just convention, albeit important one. Files merely contain bytes; ’s us programs interpret bytes according rules plain text files, PDF documents, configuration files, images, . Naming PNG image whale whale.mp3 doesn’t somehow magically turn recording whale song, though might cause operating system associate file music player program. case, someone double-clicked whale.mp3 file explorer program,music player automatically (erroneously) attempt open whale.mp3 file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Returning shell-lesson-data/exercise-data/writing directory, thesis directory file draft.txt isn’t particularly informative name, let’s change file’s name using mv, short ‘move’: first argument tells mv ’re ‘moving’, second ’s go. case, ’re moving thesis/draft.txt thesis/quotes.txt, effect renaming file. Sure enough, ls shows us thesis now contains one file called quotes.txt: One must careful specifying target file name, since mv silently overwrite existing file name, lead data loss. default, mv ask confirmation overwriting files. However, additional option, mv -(mv --interactive), cause mv request confirmation. Note mv also works directories. Let’s move quotes.txt current working directory. use mv , time ’ll use just name directory second argument tell mv want keep filename put file somewhere new. (command called ‘move’.) case, directory name use special directory name . mentioned earlier. effect move file directory current working directory. ls now shows us thesis empty: Alternatively, can confirm file quotes.txt longer present thesis directory explicitly trying list : ls filename directory argument lists requested file directory. file given argument doesn’t exist, shell returns error saw . can use see quotes.txt now present current directory: Recall .. refers parent directory (.e. one current directory) . refers current directory.","code":"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing $ mv thesis/draft.txt thesis/quotes.txt $ ls thesis quotes.txt $ mv thesis/quotes.txt . $ ls thesis $ $ ls thesis/quotes.txt ls: cannot access 'thesis/quotes.txt': No such file or directory $ ls quotes.txt quotes.txt $ mv sucrose.dat maltose.dat ../raw"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"moving-files-to-a-new-folder","dir":"","previous_headings":"","what":"Moving Files to a new folder","title":null,"text":"running following commands, Jamie realizes put files sucrose.dat maltose.dat wrong folder. files placed raw folder. Fill blanks move files raw/ folder (.e. one forgot put )","code":"$ ls -F  analyzed/ raw/ $ ls -F analyzed fructose.dat glucose.dat maltose.dat sucrose.dat $ cd analyzed $ mv sucrose.dat maltose.dat ____/____"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"cp command works much like mv, except copies file instead moving . can check right thing using ls two paths arguments — like Unix commands, ls can given multiple paths : can also copy directory contents using recursive option -r, e.g. back directory: can check result listing contents thesis thesis_backup directory: important include -r flag. want copy directory omit option see message directory omitted -r specified. . create file correct name, incorrectly named file still exists directory need deleted. Yes, work rename file. , period(.) indicates move file, provide new file name; identical file names created. , period(.) indicates copy file, provide new file name; identical file names created. start /Users/jamie/data directory, create new folder called recombined. second line moves (mv) file proteins.dat new folder (recombined). third line makes copy file just moved. tricky part file copied . Recall .. means ‘go level’, copied file now /Users/jamie. Notice .. interpreted respect current working directory, respect location file copied. , thing show using ls (/Users/jamie/data) recombined folder. , see explanation . proteins-saved.dat located /Users/jamie Yes , see explanation . proteins.dat located /Users/jamie/data/recombined , see explanation . proteins-saved.dat located /Users/jamie","code":"$ cp quotes.txt thesis/quotations.txt $ ls quotes.txt thesis/quotations.txt quotes.txt   thesis/quotations.txt $ cp -r thesis thesis_backup $ ls thesis thesis_backup thesis: quotations.txt  thesis_backup: quotations.txt $ cp thesis thesis_backup cp: -r not specified; omitting directory 'thesis'"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"renaming-files","dir":"","previous_headings":"","what":"Renaming Files","title":null,"text":"Suppose created plain-text file current directory contain list statistical tests need analyze data, named statstics.txt creating saving file realize misspelled filename! want correct mistake, following commands use ? cp statstics.txt statistics.txt mv statstics.txt statistics.txt mv statstics.txt . cp statstics.txt .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"moving-and-copying","dir":"","previous_headings":"","what":"Moving and Copying","title":null,"text":"output closing ls command sequence shown ? proteins-saved.dat recombined recombined proteins.dat recombined proteins-saved.dat","code":"$ pwd /Users/jamie/data $ ls proteins.dat $ mkdir recombined $ mv proteins.dat recombined/ $ cp recombined/proteins.dat ../proteins-saved.dat $ ls"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Returning shell-lesson-data/exercise-data/writing directory, let’s tidy directory removing quotes.txt file created. Unix command ’ll use rm (short ‘remove’): can confirm file gone using ls: -option prompt (every) removal (use Y confirm deletion N keep file). Unix shell doesn’t trash bin, files removed disappear forever. using -option, chance check deleting files want remove. try remove thesis directory using rm thesis, get error message: happens rm default works files, directories. rm can remove directory contents use recursive option -r, without confirmation prompts: Given way retrieve files deleted using shell, rm -r used great caution (might consider adding interactive option rm -r -).","code":"$ rm quotes.txt $ ls quotes.txt ls: cannot access 'quotes.txt': No such file or directory rm: remove regular file 'thesis_backup/quotations.txt'? y $ rm thesis rm: cannot remove 'thesis': Is a directory $ rm -r thesis"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"deleting-is-forever","dir":"","previous_headings":"","what":"Deleting Is Forever","title":null,"text":"Unix shell doesn’t trash bin can recover deleted files (though graphical interfaces Unix ). Instead, delete files, unlinked file system storage space disk can recycled. Tools finding recovering deleted files exist, ’s guarantee ’ll work particular situation, since computer may recycle file’s disk space right away.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"using-rm-safely","dir":"","previous_headings":"","what":"Using rm Safely","title":null,"text":"happens execute rm -thesis_backup/quotations.txt? want protection using rm?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"headingSolution6","dir":"","previous_headings":"","what":null,"title":null,"text":"Oftentimes one needs copy move several files . can done providing list individual filenames, specifying naming pattern using wildcards. Wildcards special characters can used represent unknown characters sets characters navigating Unix file system. given one file name followed directory name (.e. destination directory must last argument), cp copies files named directory. given three file names, cp throws error one , expecting directory name last argument.","code":"cp: target 'basilisk.dat' is not a directory"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"copy-with-multiple-filenames","dir":"","previous_headings":"","what":"Copy with Multiple Filenames","title":null,"text":"exercise, can test commands shell-lesson-data/exercise-data directory. example , cp given several filenames directory name? example , cp given three file names?","code":"$ mkdir backup $ cp creatures/minotaur.dat creatures/unicorn.dat backup/ $ cd creatures $ ls -F basilisk.dat  minotaur.dat  unicorn.dat $ cp minotaur.dat unicorn.dat basilisk.dat"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"using-wildcards-for-accessing-multiple-files-at-once","dir":"","previous_headings":"","what":"Using wildcards for accessing multiple files at once","title":null,"text":"solution 3. 1. shows files whose names contain zero characters (*) followed letter t, zero characters (*) followed ane.pdb. gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb. 2. shows files whose names start zero characters (*) followed letter t, single character (?), ne. followed zero characters (*). give us octane.pdb pentane.pdb doesn’t match anything ends thane.pdb. 3. fixes problems option 2 matching two characters (??) t ne. solution. 4. shows files starting ethane.. Jamie needs move files fructose.dat sucrose.dat analyzed directory. shell expand *.dat match .dat files current directory. mv command moves list .dat files ‘analyzed’ directory. first two sets commands achieve objective. first set uses relative paths create top-level directory subdirectories. third set commands give error default behavior mkdir won’t create subdirectory non-existent directory: intermediate level folders must created first. fourth set commands achieve objective. Remember, -p option, followed path one directories, cause mkdir create intermediate subdirectories required. final set commands generates ‘raw’ ‘processed’ directories level ‘data’ directory.","code":"$ cp *calibration.txt backup/calibration $ cp 2015-11-* send_to_bob/all_november_files/ $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/ mv *.dat analyzed"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"wildcards","dir":"","previous_headings":"","what":"Wildcards","title":null,"text":"* wildcard, represents zero characters. Let’s consider shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, every file ends ‘.pdb’. hand, p*.pdb represents pentane.pdb propane.pdb, ‘p’ front can represent filenames begin letter ‘p’. ? also wildcard, represents exactly one character. ?ethane.pdb represent methane.pdb whereas *ethane.pdb represents ethane.pdb methane.pdb. Wildcards can used combination . example, ???ane.pdb indicates three characters followed ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb. shell sees wildcard, expands wildcard create list matching filenames running preceding command. exception, wildcard expression match file, Bash pass expression argument command . example, typing ls *.pdf alkanes directory (contains files names ending .pdb) results error message file called *.pdf. However, generally commands like wc ls see lists file names matching expressions, wildcards . shell, programs, expands wildcards.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"list-filenames-matching-a-pattern","dir":"","previous_headings":"","what":"List filenames matching a pattern","title":null,"text":"run alkanes directory, ls command(s) produce output? ethane.pdb   methane.pdb ls *t*ane.pdb ls *t?ne.* ls *t??ne.pdb ls ethane.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"more-on-wildcards","dir":"","previous_headings":"","what":"More on Wildcards","title":null,"text":"Sam directory containing calibration data, datasets, descriptions datasets: heading another field trip, wants back data send datasets colleague Bob. Sam uses following commands get job done: Help Sam filling blanks. resulting directory structure look like ","code":". ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   └── datasets └── send_to_bob     ├── all_datasets_created_on_a_23rd     └── all_november_files $ cp *dataset* backup/datasets $ cp ____calibration____ backup/calibration $ cp 2015-____-____ send_to_bob/all_november_files/ $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/ . ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   │   ├── 2015-10-23-calibration.txt │   │   ├── 2015-10-26-calibration.txt │   │   └── 2015-11-23-calibration.txt │   └── datasets │       ├── 2015-10-23-dataset1.txt │       ├── 2015-10-23-dataset2.txt │       ├── 2015-10-23-dataset_overview.txt │       ├── 2015-10-26-dataset1.txt │       ├── 2015-10-26-dataset2.txt │       ├── 2015-10-26-dataset_overview.txt │       ├── 2015-11-23-dataset1.txt │       ├── 2015-11-23-dataset2.txt │       └── 2015-11-23-dataset_overview.txt └── send_to_bob     ├── all_datasets_created_on_a_23rd     │   ├── 2015-10-23-dataset1.txt     │   ├── 2015-10-23-dataset2.txt     │   ├── 2015-10-23-dataset_overview.txt     │   ├── 2015-11-23-dataset1.txt     │   ├── 2015-11-23-dataset2.txt     │   └── 2015-11-23-dataset_overview.txt     └── all_november_files         ├── 2015-11-23-calibration.txt         ├── 2015-11-23-dataset1.txt         ├── 2015-11-23-dataset2.txt         └── 2015-11-23-dataset_overview.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"organizing-directories-and-files","dir":"","previous_headings":"","what":"Organizing Directories and Files","title":null,"text":"Jamie working project, sees files aren’t well organized: fructose.dat sucrose.dat files contain output data analysis. command(s) covered lesson need run commands produce output shown?","code":"$ ls -F analyzed/  fructose.dat    raw/   sucrose.dat $ ls -F analyzed/   raw/ $ ls analyzed fructose.dat    sucrose.dat"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"reproduce-a-folder-structure","dir":"","previous_headings":"","what":"Reproduce a folder structure","title":null,"text":"’re starting new experiment like duplicate directory structure previous experiment can add new data. Assume previous experiment folder called 2016-05-18, contains data folder turn contains folders named raw processed contain data files. goal copy folder structure 2016-05-18 folder folder called 2016-05-20 final directory structure looks like : following set commands achieve objective? commands ?","code":"2016-05-20/ └── data    ├── processed    └── raw $ mkdir 2016-05-20 $ mkdir 2016-05-20/data $ mkdir 2016-05-20/data/processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ cd data $ mkdir raw processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20/data/processed $ mkdir -p 2016-05-20/data/raw $ mkdir -p 2016-05-20/data/processed $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ mkdir raw processed"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"cp [old] [new] copies file. mkdir [path] creates new directory. mv [old] [new] moves (renames) file directory. rm [path] removes (deletes) file. * matches zero characters filename, *.txt matches files ending .txt. ? matches single character filename, ?.txt matches .txt .txt. Use Control key may described many ways, including Ctrl-X, Control-X, ^X. shell trash bin: something deleted, ’s really gone. files’ names something.extension. extension isn’t required, doesn’t guarantee anything, normally used indicate type data file. Depending type work , may need powerful text editor Nano.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Pipes Filters  can combine existing commands new things? Redirect command’s output file. Construct command pipelines two stages. Explain usually happens program pipeline isn’t given input process. Explain advantage linking commands pipes filters. Now know basic commands, can finally look shell’s powerful feature: ease lets us combine existing programs new ways. ’ll start directory shell-lesson-data/exercise-data/alkanes contains six files describing simple organic molecules. .pdb extension indicates files Protein Data Bank format, simple text format specifies type position atom molecule. Let’s run example command: wc ‘word count’ command: counts number lines, words, characters files (returning values order left right). run command wc *.pdb, * *.pdb matches zero characters, shell turns *.pdb list .pdb files current directory: Note wc *.pdb also shows total number lines last line output. run wc -l instead just wc, output shows number lines per file: -m -w options can also used wc command show number characters number words, respectively. files contains fewest lines? ’s easy question answer six files, 6000? first step toward solution run command: greater symbol, >, tells shell redirect command’s output file instead printing screen. command prints screen output, everything wc printed gone file lengths.txt instead. file doesn’t exist prior issuing command, shell create file. file exists already, silently overwritten, may lead data loss. Thus, redirect commands require caution. ls lengths.txt confirms file exists: can now send content lengths.txt screen using cat lengths.txt. cat command gets name ‘concatenate’ .e. join together, prints contents files one another. ’s one file case, cat just shows us contains: Next ’ll use sort command sort contents lengths.txt file. first ’ll exercise learn little sort command: -n option specifies numerical rather alphanumerical sort. also use -n option specify sort numerical instead alphanumerical. change file; instead, sends sorted result screen: can put sorted list lines another temporary file called sorted-lengths.txt putting > sorted-lengths.txt command, just used > lengths.txt put output wc lengths.txt. ’ve done , can run another command called head get first lines sorted-lengths.txt: Using -n 1 head tells want first line file; -n 20 get first 20, . Since sorted-lengths.txt contains lengths files ordered least greatest, output head must file fewest lines. first example >, string ‘hello’ written testfile01.txt, file gets overwritten time run command. see second example >> operator also writes ‘hello’ file (case testfile02.txt), appends string file already exists (.e. run second time). Option 3 correct. option 1 correct run head command. option 2 correct run tail command. option 4 correct pipe output head tail -n 2 head -n 3 animals.csv | tail -n 2 > animals-subset.csv example finding file fewest lines, using two intermediate files lengths.txt sorted-lengths.txt store output. confusing way work even understand wc, sort, head , intermediate files make hard follow ’s going . can make easier understand running sort head together: vertical bar, |, two commands called pipe. tells shell want use output command left input command right. removed need sorted-lengths.txt file. Nothing prevents us chaining pipes consecutively. can example send output wc directly sort, send resulting output head. removes need intermediate files. ’ll start using pipe send output wc sort: can send output another pipe, head, full pipeline becomes: exactly like mathematician nesting functions like log(3x) saying ‘log three times x’. case, algorithm ‘head sort line count *.pdb’. redirection pipes used last commands illustrated : Option 4 solution. pipe character | used connect output one command input another. > used redirect standard output file. Try shell-lesson-data/exercise-data/alkanes directory! idea linking programs together Unix successful. Instead creating enormous programs try many different things, Unix programmers focus creating lots simple tools one job well, work well . programming model called ‘pipes filters’. ’ve already seen pipes; filter program like wc sort transforms stream input stream output. Almost standard Unix tools can work way. Unless told otherwise, read standard input, something ’ve read, write standard output. key program reads lines text standard input writes lines text standard output can combined every program behaves way well. can write programs way people can put programs pipes multiply power. head command extracts first 5 lines animals.csv. , last 3 lines extracted previous 5 using tail command. sort -r command 3 lines sorted reverse order. Finally, output redirected file: final.txt. content file can checked executing cat final.txt. file contain following lines: Option 4. correct answer. difficulty understanding , try running commands, sub-sections pipelines (make sure shell-lesson-data/exercise-data/animal-counts directory). Nelle run samples assay machines created 17 files north-pacific-gyre directory described earlier. quick check, starting shell-lesson-data directory, Nelle types: output 18 lines look like : Now types : Whoops: one files 60 lines shorter others. goes back checks , sees assay 8:00 Monday morning — someone probably using machine weekend, forgot reset . re-running sample, checks see files much data: numbers look good — ’s ‘Z’ third--last line? samples marked ‘’ ‘B’; convention, lab uses ‘Z’ indicate samples missing information. find others like , : Sure enough, checks log laptop, ’s depth recorded either samples. Since ’s late get information way, must exclude two files analysis. delete using rm, actually analyses might later depth doesn’t matter, instead, ’ll careful later select files using wildcard expressions NENE*.txt NENE*B.txt. remove .txt files one-character names correct answer shell expand * match everything current directory, command try remove matched files additional file called .txt shell expands *.* match filenames containing least one ., including processed files (.txt) raw files (.dat)","code":"$ ls cubane.pdb    methane.pdb    pentane.pdb ethane.pdb    octane.pdb     propane.pdb $ wc cubane.pdb 20  156 1158 cubane.pdb $ wc *.pdb 20  156  1158  cubane.pdb   12  84   622   ethane.pdb    9  57   422   methane.pdb   30  246  1828  octane.pdb   21  165  1226  pentane.pdb   15  111  825   propane.pdb  107  819  6081  total $ wc -l *.pdb 20  cubane.pdb   12  ethane.pdb    9  methane.pdb   30  octane.pdb   21  pentane.pdb   15  propane.pdb  107  total $ wc -l *.pdb > lengths.txt $ ls lengths.txt lengths.txt $ cat lengths.txt 20  cubane.pdb   12  ethane.pdb    9  methane.pdb   30  octane.pdb   21  pentane.pdb   15  propane.pdb  107  total $ sort -n lengths.txt 9  methane.pdb  12  ethane.pdb  15  propane.pdb  20  cubane.pdb  21  pentane.pdb  30  octane.pdb 107  total $ sort -n lengths.txt > sorted-lengths.txt $ head -n 1 sorted-lengths.txt 9  methane.pdb $ sort -n lengths.txt | head -n 1 9  methane.pdb $ wc -l *.pdb | sort -n 9 methane.pdb   12 ethane.pdb   15 propane.pdb   20 cubane.pdb   21 pentane.pdb   30 octane.pdb  107 total $ wc -l *.pdb | sort -n | head -n 1 9  methane.pdb 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-05,raccoon,7 $ cut -d , -f 2 animals.csv | sort | uniq $ cd north-pacific-gyre $ wc -l *.txt 300 NENE01729A.txt 300 NENE01729B.txt 300 NENE01736A.txt 300 NENE01751A.txt 300 NENE01751B.txt 300 NENE01812A.txt ... ... $ wc -l *.txt | sort -n | head -n 5 240 NENE02018B.txt  300 NENE01729A.txt  300 NENE01729B.txt  300 NENE01736A.txt  300 NENE01751A.txt $ wc -l *.txt | sort -n | tail -n 5 300 NENE02040B.txt  300 NENE02040Z.txt  300 NENE02043A.txt  300 NENE02043B.txt 5040 total $ ls *Z.txt NENE01971Z.txt    NENE02040Z.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"why-isnt-it-doing-anything","dir":"","previous_headings":"","what":"Why Isn’t It Doing Anything?","title":null,"text":"happens command supposed process file, don’t give filename? example, type: don’t type *.pdb (anything else) command? Since doesn’t filenames, wc assumes supposed process input given command prompt, just sits waits us give data interactively. outside, though, see sitting , command doesn’t appear anything. make kind mistake, can escape state holding control key (Ctrl) pressing letter C : Ctrl+C. release keys.","code":"$ wc -l"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"files contains fewest lines? ’s easy question answer six files, 6000? first step toward solution run command: greater symbol, >, tells shell redirect command’s output file instead printing screen. command prints screen output, everything wc printed gone file lengths.txt instead. file doesn’t exist prior issuing command, shell create file. file exists already, silently overwritten, may lead data loss. Thus, redirect commands require caution. ls lengths.txt confirms file exists: can now send content lengths.txt screen using cat lengths.txt. cat command gets name ‘concatenate’ .e. join together, prints contents files one another. ’s one file case, cat just shows us contains:","code":"$ wc -l *.pdb > lengths.txt $ ls lengths.txt lengths.txt $ cat lengths.txt 20  cubane.pdb   12  ethane.pdb    9  methane.pdb   30  octane.pdb   21  pentane.pdb   15  propane.pdb  107  total"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"output-page-by-page","dir":"","previous_headings":"","what":"Output Page by Page","title":null,"text":"’ll continue use cat lesson, convenience consistency, disadvantage always dumps whole file onto screen. useful practice command less (e.g. less lengths.txt). displays screenful file, stops. can go forward one screenful pressing spacebar, back one pressing b. Press q quit.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"headingSolution1","dir":"","previous_headings":"","what":null,"title":null,"text":"Next ’ll use sort command sort contents lengths.txt file. first ’ll exercise learn little sort command: -n option specifies numerical rather alphanumerical sort. also use -n option specify sort numerical instead alphanumerical. change file; instead, sends sorted result screen: can put sorted list lines another temporary file called sorted-lengths.txt putting > sorted-lengths.txt command, just used > lengths.txt put output wc lengths.txt. ’ve done , can run another command called head get first lines sorted-lengths.txt: Using -n 1 head tells want first line file; -n 20 get first 20, . Since sorted-lengths.txt contains lengths files ordered least greatest, output head must file fewest lines. first example >, string ‘hello’ written testfile01.txt, file gets overwritten time run command. see second example >> operator also writes ‘hello’ file (case testfile02.txt), appends string file already exists (.e. run second time). Option 3 correct. option 1 correct run head command. option 2 correct run tail command. option 4 correct pipe output head tail -n 2 head -n 3 animals.csv | tail -n 2 > animals-subset.csv","code":"$ sort -n lengths.txt 9  methane.pdb  12  ethane.pdb  15  propane.pdb  20  cubane.pdb  21  pentane.pdb  30  octane.pdb 107  total $ sort -n lengths.txt > sorted-lengths.txt $ head -n 1 sorted-lengths.txt 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"what-does-sort--n-do","dir":"","previous_headings":"","what":"What Does sort -n Do?","title":null,"text":"file shell-lesson-data/exercise-data/numbers.txt contains following lines: run sort file, output : run sort -n file, get instead: Explain -n effect.","code":"10 2 19 22 6 10 19 2 22 6 2 6 10 19 22"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"redirecting-to-the-same-file","dir":"","previous_headings":"","what":"Redirecting to the same file","title":null,"text":"’s bad idea try redirecting output command operates file file. example: something like may give incorrect results /delete contents lengths.txt.","code":"$ sort -n lengths.txt > lengths.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"what-does-mean","dir":"","previous_headings":"","what":"What Does >> Mean?","title":null,"text":"seen use >, similar operator >> works slightly differently. ’ll learn differences two operators printing strings. can use echo command print strings e.g. Now test commands reveal difference two operators: : Hint: Try executing command twice row examining output files.","code":"$ echo The echo command prints text The echo command prints text $ echo hello > testfile01.txt $ echo hello >> testfile02.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"appending-data","dir":"","previous_headings":"","what":"Appending Data","title":null,"text":"already met head command, prints lines start file. tail similar, prints lines end file instead. Consider file shell-lesson-data/exercise-data/animal-counts/animals.csv. commands, select answer corresponds file animals-subset.csv: first three lines animals.csv last two lines animals.csv first three lines last two lines animals.csv second third lines animals.csv","code":"$ head -n 3 animals.csv > animals-subset.csv $ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"example finding file fewest lines, using two intermediate files lengths.txt sorted-lengths.txt store output. confusing way work even understand wc, sort, head , intermediate files make hard follow ’s going . can make easier understand running sort head together: vertical bar, |, two commands called pipe. tells shell want use output command left input command right. removed need sorted-lengths.txt file.","code":"$ sort -n lengths.txt | head -n 1 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nothing prevents us chaining pipes consecutively. can example send output wc directly sort, send resulting output head. removes need intermediate files. ’ll start using pipe send output wc sort: can send output another pipe, head, full pipeline becomes: exactly like mathematician nesting functions like log(3x) saying ‘log three times x’. case, algorithm ‘head sort line count *.pdb’. redirection pipes used last commands illustrated : Option 4 solution. pipe character | used connect output one command input another. > used redirect standard output file. Try shell-lesson-data/exercise-data/alkanes directory!","code":"$ wc -l *.pdb | sort -n 9 methane.pdb   12 ethane.pdb   15 propane.pdb   20 cubane.pdb   21 pentane.pdb   30 octane.pdb  107 total $ wc -l *.pdb | sort -n | head -n 1 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"piping-commands-together","dir":"","previous_headings":"","what":"Piping Commands Together","title":null,"text":"current directory, want find 3 files least number lines. command listed work? wc -l * > sort -n > head -n 3 wc -l * | sort -n | head -n 1-3 wc -l * | head -n 3 | sort -n wc -l * | sort -n | head -n 3","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"headingSolution5","dir":"","previous_headings":"","what":null,"title":null,"text":"idea linking programs together Unix successful. Instead creating enormous programs try many different things, Unix programmers focus creating lots simple tools one job well, work well . programming model called ‘pipes filters’. ’ve already seen pipes; filter program like wc sort transforms stream input stream output. Almost standard Unix tools can work way. Unless told otherwise, read standard input, something ’ve read, write standard output. key program reads lines text standard input writes lines text standard output can combined every program behaves way well. can write programs way people can put programs pipes multiply power. head command extracts first 5 lines animals.csv. , last 3 lines extracted previous 5 using tail command. sort -r command 3 lines sorted reverse order. Finally, output redirected file: final.txt. content file can checked executing cat final.txt. file contain following lines: Option 4. correct answer. difficulty understanding , try running commands, sub-sections pipelines (make sure shell-lesson-data/exercise-data/animal-counts directory).","code":"2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-05,raccoon,7 $ cut -d , -f 2 animals.csv | sort | uniq"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"pipe-reading-comprehension","dir":"","previous_headings":"","what":"Pipe Reading Comprehension","title":null,"text":"file called animals.csv (shell-lesson-data/exercise-data/animal-counts folder) contains following data: text passes pipes final redirect pipeline ? Note, sort -r command sorts reverse order. Hint: build pipeline one command time test understanding","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"pipe-construction","dir":"","previous_headings":"","what":"Pipe Construction","title":null,"text":"file animals.csv previous exercise, consider following command: cut command used remove ‘cut ’ certain sections line file, cut expects lines separated columns Tab character. character used way called delimiter. example use -d option specify comma delimiter character. also used -f option specify want extract second field (column). gives following output: uniq command filters adjacent matching lines file. extend pipeline (using uniq another command) find animals file contains (without duplicates names)?","code":"$ cut -d , -f 2 animals.csv deer rabbit raccoon rabbit deer fox rabbit bear"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"which-pipe","dir":"","previous_headings":"","what":"Which Pipe?","title":null,"text":"file animals.csv contains 8 lines data formatted follows: uniq command -c option gives count number times line occurs input. Assuming current directory shell-lesson-data/exercise-data/animal-counts, command use produce table shows total count type animal file? sort animals.csv | uniq -c sort -t, -k2,2 animals.csv | uniq -c cut -d, -f 2 animals.csv | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c | wc -l","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 ..."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nelle run samples assay machines created 17 files north-pacific-gyre directory described earlier. quick check, starting shell-lesson-data directory, Nelle types: output 18 lines look like : Now types : Whoops: one files 60 lines shorter others. goes back checks , sees assay 8:00 Monday morning — someone probably using machine weekend, forgot reset . re-running sample, checks see files much data: numbers look good — ’s ‘Z’ third--last line? samples marked ‘’ ‘B’; convention, lab uses ‘Z’ indicate samples missing information. find others like , : Sure enough, checks log laptop, ’s depth recorded either samples. Since ’s late get information way, must exclude two files analysis. delete using rm, actually analyses might later depth doesn’t matter, instead, ’ll careful later select files using wildcard expressions NENE*.txt NENE*B.txt. remove .txt files one-character names correct answer shell expand * match everything current directory, command try remove matched files additional file called .txt shell expands *.* match filenames containing least one ., including processed files (.txt) raw files (.dat)","code":"$ cd north-pacific-gyre $ wc -l *.txt 300 NENE01729A.txt 300 NENE01729B.txt 300 NENE01736A.txt 300 NENE01751A.txt 300 NENE01751B.txt 300 NENE01812A.txt ... ... $ wc -l *.txt | sort -n | head -n 5 240 NENE02018B.txt  300 NENE01729A.txt  300 NENE01729B.txt  300 NENE01736A.txt  300 NENE01751A.txt $ wc -l *.txt | sort -n | tail -n 5 300 NENE02040B.txt  300 NENE02040Z.txt  300 NENE02043A.txt  300 NENE02043B.txt 5040 total $ ls *Z.txt NENE01971Z.txt    NENE02040Z.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"removing-unneeded-files","dir":"","previous_headings":"","what":"Removing Unneeded Files","title":null,"text":"Suppose want delete processed data files, keep raw files processing script save storage. raw files end .dat processed files end .txt. following remove processed data files, processed data files? rm ?.txt rm *.txt rm * .txt rm *.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"wc counts lines, words, characters inputs. cat displays contents inputs. sort sorts inputs. head displays first 10 lines input. tail displays last 10 lines input. command > [file] redirects command’s output file (overwriting existing content). command >> [file] appends command’s output file. [first] | [second] pipeline: output first command used input second. best way use shell use pipes combine simple single-purpose programs (filters).","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Loops  can perform actions many different files? Write loop applies one commands separately file set files. Trace values taken loop variable execution loop. Explain difference variable’s name value. Explain spaces punctuation characters shouldn’t used file names. Demonstrate see commands recently executed. Re-run recently executed commands without retyping . Loops programming construct allow us repeat command set commands item list. key productivity improvements automation. Similar wildcards tab completion, using loops also reduces amount typing required (hence reduces number typing mistakes). Suppose several hundred genome data files named basilisk.dat, minotaur.dat, unicorn.dat. example, ’ll use exercise-data/creatures directory three example files, principles can applied many many files . structure files : common name, classification, updated date presented first three lines, DNA sequences following lines. Let’s look files: like print classification species, given second line file. file, need execute command head -n 2 pipe tail -n 1. ’ll use loop solve problem, first let’s look general form loop, using pseudo-code : can apply example like : shell sees keyword , knows repeat command (group commands) item list. time loop runs (called iteration), item list assigned sequence variable, commands inside loop executed, moving next item list. Inside loop, call variable’s value putting $ front . $ tells shell interpreter treat variable variable name substitute value place, rather treat text external command. example, list three filenames: basilisk.dat, minotaur.dat, unicorn.dat. time loop iterates, first use echo print value variable $filename currently holds. necessary result, beneficial us easier time follow along. Next, run head command file currently referred $filename. first time loop, $filename basilisk.dat. interpreter runs command head basilisk.dat pipes first two lines tail command, prints second line basilisk.dat. second iteration, $filename becomes minotaur.dat. time, shell runs head minotaur.dat pipes first two lines tail command, prints second line minotaur.dat. third iteration, $filename becomes unicorn.dat, shell runs head command file, tail output . Since list three items, shell exits loop. using variables also possible put names curly braces clearly delimit variable name: $filename equivalent ${filename}, different ${file}name. may find notation people’s programs. called variable loop filename order make purpose clearer human readers. shell doesn’t care variable called; wrote loop : : work exactly way. Don’t . Programs useful people can understand , meaningless names (like x) misleading names (like temperature) increase odds program won’t readers think . examples, variables (thing, filename, x temperature) given name, long meaningful person writing code person reading . Note also loops can used things filenames, like list numbers subset data. first code block gives output iteration loop. Bash expands wildcard *.pdb within loop body (well loop starts) match files ending .pdb lists using ls. expanded loop look like : second code block lists different file loop iteration. value datafile variable evaluated using $datafile, listed using ls. 4 correct answer. * matches zero characters, file name starting letter c, followed zero characters matched. 4 correct answer. * matches zero characters, file name zero characters letter c zero characters letter c matched. text file turn gets written alkanes.pdb file. However, file gets overwritten loop iteration, final content alkanes.pdb text propane.pdb file. 3 correct answer. >> appends file, rather overwriting redirected output command. Given output cat command redirected, nothing printed screen. Let’s continue example shell-lesson-data/exercise-data/creatures directory. ’s slightly complicated loop: shell starts expanding *.dat create list files process. loop body executes two commands files. first command, echo, prints command-line arguments standard output. example: prints: case, since shell expands $filename name file, echo $filename prints name file. Note can’t write : first time loop, $filename expanded basilisk.dat, shell try run basilisk.dat program. Finally, head tail combination selects lines 81-100 whatever file processed (assuming file least 100 lines). like modify files shell-lesson-data/exercise-data/creatures, also save version original files. want copy original files new files named original-basilisk.dat original-unicorn.dat, example. can’t use: expand : wouldn’t back files, instead get error: problem arises cp receives two inputs. happens, expects last input directory can copy files passed. Since directory named original-*.dat creatures directory, get error. Instead, can use loop: loop runs cp command filename. first time, $filename expands basilisk.dat, shell executes: second time, command : third last time, command : Since cp command normally produce output, ’s hard check loop working correctly. However, learned earlier print strings using echo, can modify loop use echo print commands without actually executing . can check commands run unmodified loop. following diagram shows happens modified loop executed demonstrates judicious use echo good debugging technique. Nelle now ready process data files using goostats.sh — shell script written supervisor. calculates statistics protein sample file takes two arguments: input file (containing raw data) output file (store calculated statistics) Since ’s still learning use shell, decides build required commands stages. first step make sure can select right input files — remember, ones whose names end ‘’ ‘B’, rather ‘Z’. Moving north-pacific-gyre directory, Nelle types: next step decide call files goostats.sh analysis program create. Prefixing input file’s name ‘stats’ seems simple, modifies loop : hasn’t actually run goostats.sh yet, now ’s sure can select right files generate right output filenames. Typing commands becoming tedious, though, Nelle worried making mistakes, instead re-entering loop, presses ↑. response, shell redisplays whole loop one line (using semi-colons separate pieces): Using ←, Nelle navigates echo command changes bash goostats.sh: presses Enter, shell runs modified command. However, nothing appears happen — output. moment, Nelle realizes since script doesn’t print anything screen longer, idea whether running, much less quickly. kills running command typing Ctrl+C, uses ↑ repeat command, edits read: runs program now, produces one line output every five seconds : 1518 times 5 seconds, divided 60, tells script take two hours run. final check, opens another terminal window, goes north-pacific-gyre, uses cat stats-NENE01729B.txt examine one output files. looks good, decides get coffee catch reading. second version one want run. prints screen everything enclosed quote marks, expanding loop variable name prefixed dollar sign. also modify create file .pdb, >> treated literally part string rather redirection instruction. first version appends output command echo cat $datafile file, .pdb. file just contain list; cat cubane.pdb, cat ethane.pdb, cat methane.pdb etc. Try versions see output! sure open .pdb file view contents. nested loop, .e. contained within another loop, species outer loop, inner loop (nested loop) iterates list temperatures, creates new directory combination. Try running code see directories created!","code":"$ head -n 5 basilisk.dat minotaur.dat unicorn.dat # The word \"for\" indicates the start of a \"For-loop\" command for thing in list_of_things  #The word \"do\" indicates the start of job execution list do      # Indentation within the loop is not required, but aids legibility     operation_using/command $thing  # The word \"done\" indicates the end of a loop done $ for filename in basilisk.dat minotaur.dat unicorn.dat > do >     echo $filename >     head -n 2 $filename | tail -n 1 > done basilisk.dat CLASSIFICATION: basiliscus vulgaris minotaur.dat CLASSIFICATION: bos hominus unicorn.dat CLASSIFICATION: equus monoceros $ for x in basilisk.dat minotaur.dat unicorn.dat > do >     head -n 2 $x | tail -n 1 > done $ for temperature in basilisk.dat minotaur.dat unicorn.dat > do >     head -n 2 $temperature | tail -n 1 > done $ for loop_variable in 0 1 2 3 4 5 6 7 8 9 > do >     echo $loop_variable > done 0 1 2 3 4 5 6 7 8 9 $ for datafile in cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb > do >     ls cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb > done cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb $ for filename in *.dat > do >     echo $filename >     head -n 100 $filename | tail -n 20 > done $ echo hello there hello there $ for filename in *.dat > do >     $filename >     head -n 100 $filename | tail -n 20 > done $ cp *.dat original-*.dat $ cp basilisk.dat minotaur.dat unicorn.dat original-*.dat cp: target `original-*.dat' is not a directory $ for filename in *.dat > do >     cp $filename original-$filename > done cp basilisk.dat original-basilisk.dat cp minotaur.dat original-minotaur.dat cp unicorn.dat original-unicorn.dat $ cd $ cd Desktop/shell-lesson-data/north-pacific-gyre $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile > done NENE01729A.txt NENE01729B.txt NENE01736A.txt ... NENE02043A.txt NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile stats-$datafile > done NENE01729A.txt stats-NENE01729A.txt NENE01729B.txt stats-NENE01729B.txt NENE01736A.txt stats-NENE01736A.txt ... NENE02043A.txt stats-NENE02043A.txt NENE02043B.txt stats-NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done NENE01729A.txt NENE01729B.txt NENE01736A.txt ..."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"follow-the-prompt","dir":"","previous_headings":"","what":"Follow the Prompt","title":null,"text":"shell prompt changes $ > back typing loop. second prompt, >, different remind us haven’t finished typing complete command yet. semicolon, ;, can used separate two commands written single line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"same-symbols-different-meanings","dir":"","previous_headings":"","what":"Same Symbols, Different Meanings","title":null,"text":"see > used shell prompt, whereas > also used redirect output. Similarly, $ used shell prompt, , saw earlier, also used ask shell get value variable. shell prints > $ expects type something, symbol prompt. type > $ , instruction shell redirect output get value variable.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"write-your-own-loop","dir":"","previous_headings":"","what":"Write your own loop","title":null,"text":"write loop echoes 10 numbers 0 9?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"variables-in-loops","dir":"","previous_headings":"","what":"Variables in Loops","title":null,"text":"exercise refers shell-lesson-data/exercise-data/alkanes directory. ls *.pdb gives following output: output following code? Now, output following code? two loops give different outputs?","code":"cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb $ for datafile in *.pdb > do >     ls *.pdb > done $ for datafile in *.pdb > do >     ls $datafile > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"limiting-sets-of-files","dir":"","previous_headings":"","what":"Limiting Sets of Files","title":null,"text":"output running following loop shell-lesson-data/exercise-data/alkanes directory? files listed. files listed. cubane.pdb, octane.pdb pentane.pdb listed. cubane.pdb listed.","code":"$ for filename in c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"limiting-sets-of-files-1","dir":"","previous_headings":"","what":"Limiting Sets of Files (continued)","title":null,"text":"output differ using command instead? files listed. files listed time. files listed time. files cubane.pdb octane.pdb listed. file octane.pdb listed.","code":"$ for filename in *c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"saving-to-a-file-in-a-loop---part-one","dir":"","previous_headings":"","what":"Saving to a File in a Loop - Part One","title":null,"text":"shell-lesson-data/exercise-data/alkanes directory, effect loop? Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb, text propane.pdb saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, text three files concatenated saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb, text propane.pdb saved file called alkanes.pdb. None .","code":"for alkanes in *.pdb do     echo $alkanes     cat $alkanes > alkanes.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"saving-to-a-file-in-a-loop---part-two","dir":"","previous_headings":"","what":"Saving to a File in a Loop - Part Two","title":null,"text":"Also shell-lesson-data/exercise-data/alkanes directory, output following loop? text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb concatenated saved file called .pdb. text ethane.pdb saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb concatenated saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb printed screen saved file called .pdb.","code":"for datafile in *.pdb do     cat $datafile >> all.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"spaces-in-names","dir":"","previous_headings":"","what":"Spaces in Names","title":null,"text":"Spaces used separate elements list going loop . one elements contains space character, need surround quotes, thing loop variable. Suppose data files named: loop files, need add double quotes like : simpler avoid using spaces (special characters) filenames. files don’t exist, run code, head command unable find ; however, error message returned show name files expecting: Try removing quotes around $filename loop see effect quote marks spaces. Note get result loop command unicorn.dat run code creatures directory:","code":"red dragon.dat purple unicorn.dat $ for filename in \"red dragon.dat\" \"purple unicorn.dat\" > do >     head -n 100 \"$filename\" | tail -n 20 > done head: cannot open ‘red dragon.dat' for reading: No such file or directory head: cannot open ‘purple unicorn.dat' for reading: No such file or directory head: cannot open ‘red' for reading: No such file or directory head: cannot open ‘dragon.dat' for reading: No such file or directory head: cannot open ‘purple' for reading: No such file or directory CGGTACCGAA AAGGGTCGCG CAAGTGTTCC ..."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nelle now ready process data files using goostats.sh — shell script written supervisor. calculates statistics protein sample file takes two arguments: input file (containing raw data) output file (store calculated statistics) Since ’s still learning use shell, decides build required commands stages. first step make sure can select right input files — remember, ones whose names end ‘’ ‘B’, rather ‘Z’. Moving north-pacific-gyre directory, Nelle types: next step decide call files goostats.sh analysis program create. Prefixing input file’s name ‘stats’ seems simple, modifies loop : hasn’t actually run goostats.sh yet, now ’s sure can select right files generate right output filenames. Typing commands becoming tedious, though, Nelle worried making mistakes, instead re-entering loop, presses ↑. response, shell redisplays whole loop one line (using semi-colons separate pieces): Using ←, Nelle navigates echo command changes bash goostats.sh: presses Enter, shell runs modified command. However, nothing appears happen — output. moment, Nelle realizes since script doesn’t print anything screen longer, idea whether running, much less quickly. kills running command typing Ctrl+C, uses ↑ repeat command, edits read: runs program now, produces one line output every five seconds : 1518 times 5 seconds, divided 60, tells script take two hours run. final check, opens another terminal window, goes north-pacific-gyre, uses cat stats-NENE01729B.txt examine one output files. looks good, decides get coffee catch reading. second version one want run. prints screen everything enclosed quote marks, expanding loop variable name prefixed dollar sign. also modify create file .pdb, >> treated literally part string rather redirection instruction. first version appends output command echo cat $datafile file, .pdb. file just contain list; cat cubane.pdb, cat ethane.pdb, cat methane.pdb etc. Try versions see output! sure open .pdb file view contents. nested loop, .e. contained within another loop, species outer loop, inner loop (nested loop) iterates list temperatures, creates new directory combination. Try running code see directories created!","code":"$ cd $ cd Desktop/shell-lesson-data/north-pacific-gyre $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile > done NENE01729A.txt NENE01729B.txt NENE01736A.txt ... NENE02043A.txt NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile stats-$datafile > done NENE01729A.txt stats-NENE01729A.txt NENE01729B.txt stats-NENE01729B.txt NENE01736A.txt stats-NENE01736A.txt ... NENE02043A.txt stats-NENE02043A.txt NENE02043B.txt stats-NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done NENE01729A.txt NENE01729B.txt NENE01736A.txt ..."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"beginning-and-end","dir":"","previous_headings":"","what":"Beginning and End","title":null,"text":"can move beginning line shell typing Ctrl+end using Ctrl+E.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"those-who-know-history-can-choose-to-repeat-it","dir":"","previous_headings":"","what":"Those Who Know History Can Choose to Repeat It","title":null,"text":"Another way repeat previous work use history command get list last hundred commands executed, use !123 (‘123’ replaced command number) repeat one commands. example, Nelle types : can re-run goostats.sh files simply typing !459.","code":"$ history | tail -n 5 456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done 457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done 458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done 459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done 460  history | tail -n 5"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"other-history-commands","dir":"","previous_headings":"","what":"Other History Commands","title":null,"text":"number shortcut commands getting history. Ctrl+R enters history search mode ‘reverse--search’ finds recent command history matches text enter next. Press Ctrl+R one additional times search earlier matches. can use left right arrow keys choose line edit hit Return run command. !! retrieves immediately preceding command (may may find convenient using ↑) !$ retrieves last word last command. ’s useful often might expect: bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, can type less !$ look file stats-NENE01729B.txt, quicker ↑ editing command-line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"doing-a-dry-run","dir":"","previous_headings":"","what":"Doing a Dry Run","title":null,"text":"loop way many things — make many mistakes wrong thing. One way check loop echo commands run instead actually running . Suppose want preview commands following loop execute without actually running commands: difference two loops , one want run?","code":"$ for datafile in *.pdb > do >     cat $datafile >> all.pdb > done # Version 1 $ for datafile in *.pdb > do >     echo cat $datafile >> all.pdb > done # Version 2 $ for datafile in *.pdb > do >     echo \"cat $datafile >> all.pdb\" > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"nested-loops","dir":"","previous_headings":"","what":"Nested Loops","title":null,"text":"Suppose want set directory structure organize experiments measuring reaction rate constants different compounds different temperatures. result following code:","code":"$ for species in cubane ethane methane > do >     for temperature in 25 30 37 40 >     do >         mkdir $species-$temperature >     done > done"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"loop repeats commands every thing list. Every loop needs variable refer thing currently operating . Use $name expand variable (.e., get value). ${name} can also used. use spaces, quotes, wildcard characters ‘*’ ‘?’ filenames, complicates variable expansion. Give files consistent names easy match wildcard patterns make easy select looping. Use -arrow key scroll previous commands edit repeat . Use Ctrl+R search previously entered commands. Use history display recent commands, ![number] repeat command number.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Shell Scripts  can save re-use commands? Write shell script runs command series commands fixed set files. Run shell script command line. Write shell script operates set files defined user command line. Create pipelines include shell scripts , others, written. finally ready see makes shell powerful programming environment. going take commands repeat frequently save files can re-run operations later typing single command. historical reasons, bunch commands saved file usually called shell script, make mistake — actually small programs. writing shell scripts make work faster, also won’t retype commands . also make accurate (fewer chances typos) reproducible. come back work later (someone else finds work wants build ), able reproduce results simply running script, rather remember retype long list commands. Let’s start going back alkanes/ creating new file, middle.sh become shell script: command nano middle.sh opens file middle.sh within text editor ‘nano’ (runs within shell). file exist, created. can use text editor directly edit file inserting following line: variation pipe constructed earlier, selects lines 11-15 file octane.pdb. Remember, running command just yet; incorporating commands file. save file (Ctrl-O nano) exit text editor (Ctrl-X nano). Check directory alkanes now contains file called middle.sh. saved file, can ask shell execute commands contains. shell called bash, run following command: Sure enough, script’s output exactly get ran pipeline directly. want select lines arbitrary file? edit middle.sh time change filename, probably take longer typing command shell executing new file name. Instead, let’s edit middle.sh make versatile: Now, within “nano”, replace text octane.pdb special variable called $1: Inside shell script, $1 means ‘first filename (argument) command line’. can now run script like : different file like : Currently, need edit middle.sh time want adjust range lines returned. Let’s fix configuring script instead use three command-line arguments. first command-line argument ($1), additional argument provide accessible via special variables $1, $2, $3, refer first, second, third command-line arguments, respectively. Knowing , can use additional arguments define range lines passed head tail respectively: can now run: changing arguments command, can change script’s behaviour: works, may take next person reads middle.sh moment figure . can improve script adding comments top: comment starts # character runs end line. computer ignores comments, ’re invaluable helping people (including future self) understand use scripts. caveat time modify script, check comment still accurate. explanation sends reader wrong direction worse none . want process many files single pipeline? example, want sort .pdb files length, type: wc -l lists number lines files (recall wc stands ‘word count’, adding -l option means ‘count lines’ instead) sort -n sorts things numerically. put file, ever sort list .pdb files current directory. want able get sorted list kinds files, need way get names script. can’t use $1, $2, don’t know many files . Instead, use special variable $@, means, ‘command-line arguments shell script’. also put $@ inside double-quotes handle case arguments containing spaces (\"$@\" special syntax equivalent \"$1\" \"$2\" …). ’s example: Suppose just run series commands something useful — example, creating graph ’d like use paper. ’d like able re-create graph later need , want save commands file. Instead typing (potentially getting wrong) can : file redo-figure-3.sh now contains: moment’s work editor remove serial numbers commands, remove final line called history command, completely accurate record created figure. command causes something crash hang, might useful know command , order investigate problem. command recorded running , record last command run event crash. practice, people develop shell scripts running commands shell prompt times make sure ’re right thing, saving file re-use. style work allows people recycle discover data workflow one call history bit editing clean output save shell script. Nelle’s supervisor insisted analytics must reproducible. easiest way capture steps script. First return Nelle’s project directory: creates file using nano … …contains following: saves file called -stats.sh can now re-first stage analysis typing: can also : output just number files processed rather names files processed. One thing note Nelle’s script lets person running decide files process. written : advantage always selects right files: doesn’t remember exclude ‘Z’ files. disadvantage always selects just files — can’t run files (including ‘Z’ files), ‘G’ ‘H’ files colleagues Antarctica producing, without editing script. wanted adventurous, modify script check command-line arguments, use NENE*.txt NENE*B.txt none provided. course, introduces another tradeoff flexibility complexity. correct answer 2. special variables $1, $2 $3 represent command line arguments given script, commands run : shell expand '*.pdb' enclosed quote marks. , first argument script '*.pdb' gets expanded within script head tail. first part pipeline, wc -l $1/*.$2 | sort -n, counts lines file sorts numerically (largest last). ’s one file, wc also outputs final summary line, giving total number lines across files. use tail -n 2 | head -n 1 throw away last line. wc -l $1/*.$2 | sort -n | tail -n 1 ’ll see final summary line: can build pipeline pieces sure understand output. case, shell expands wildcard *.pdb passing resulting list file names arguments script. Script 1 print list files containing dot name. arguments passed script actually used anywhere script. Script 2 print contents first 3 files .pdb file extension. $1, $2, $3 refer first, second, third argument respectively. Script 3 print arguments script (.e. .pdb files), followed .pdb. $@ refers arguments given shell script. -x option causes bash run debug mode. prints command run, help locate errors. example, can see echo isn’t printing anything. made typo loop variable name, variable datfile doesn’t exist, hence returning empty string.","code":"$ cd alkanes $ nano middle.sh head -n 15 octane.pdb | tail -n 5 $ bash middle.sh ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00 ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00 ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00 ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00 ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00 $ nano middle.sh head -n 15 \"$1\" | tail -n 5 $ bash middle.sh octane.pdb ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00 ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00 ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00 ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00 ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00 $ bash middle.sh pentane.pdb ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00 ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00 ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00 ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00 ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00 $ nano middle.sh head -n \"$2\" \"$1\" | tail -n \"$3\" $ bash middle.sh pentane.pdb 15 5 ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00 ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00 ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00 ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00 ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00 $ bash middle.sh pentane.pdb 20 5 ATOM     14  H           1      -1.259   1.420   0.112  1.00  0.00 ATOM     15  H           1      -2.608  -0.407   1.130  1.00  0.00 ATOM     16  H           1      -2.540  -1.303  -0.404  1.00  0.00 ATOM     17  H           1      -3.393   0.254  -0.321  1.00  0.00 TER      18              1 $ nano middle.sh # Select lines from the middle of a file. # Usage: bash middle.sh filename end_line num_lines head -n \"$2\" \"$1\" | tail -n \"$3\" $ wc -l *.pdb | sort -n $ nano sorted.sh # Sort files by their length. # Usage: bash sorted.sh one_or_more_filenames wc -l \"$@\" | sort -n $ bash sorted.sh *.pdb ../creatures/*.dat 9 methane.pdb 12 ethane.pdb 15 propane.pdb 20 cubane.pdb 21 pentane.pdb 30 octane.pdb 163 ../creatures/basilisk.dat 163 ../creatures/minotaur.dat 163 ../creatures/unicorn.dat 596 total # Script to find unique species in csv files where species is the second data field # This script accepts any number of file names as command line arguments  # Loop over all files for file in $@ do     echo \"Unique species in $file:\"     # Extract species names     cut -d , -f 2 $file | sort | uniq done $ history | tail -n 5 > redo-figure-3.sh 297 bash goostats.sh NENE01729B.txt stats-NENE01729B.txt 298 bash goodiff.sh stats-NENE01729B.txt /data/validated/01729.txt > 01729-differences.txt 299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt 300 ygraph --format scatter --color bw --borders none 01729-time-series.txt figure-3.png 301 history | tail -n 5 > redo-figure-3.sh $ cd ../../north-pacific-gyre/ $ nano do-stats.sh # Calculate stats for data files. for datafile in \"$@\" do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ bash do-stats.sh NENE*A.txt NENE*B.txt $ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l # Calculate stats for Site A and Site B data files. for datafile in NENE*A.txt NENE*B.txt do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb # Shell script which takes two arguments: #    1. a directory name #    2. a file extension # and prints the name of the file in that directory # with the most lines which matches the file extension.  wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1 cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"text-vs--whatever","dir":"","previous_headings":"","what":"Text vs. Whatever","title":null,"text":"usually call programs like Microsoft Word LibreOffice Writer “text editors”, need bit careful comes programming. default, Microsoft Word uses .docx files store text, also formatting information fonts, headings, . extra information isn’t stored characters doesn’t mean anything tools like head, expects input files contain nothing letters, digits, punctuation standard computer keyboard. editing programs, therefore, must either use plain text editor careful save files plain text.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"double-quotes-around-arguments","dir":"","previous_headings":"","what":"Double-Quotes Around Arguments","title":null,"text":"reason put loop variable inside double-quotes, case filename happens contain spaces, surround $1 double-quotes.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"list-unique-species","dir":"","previous_headings":"","what":"List Unique Species","title":null,"text":"Leah several hundred data files, formatted like : example type file given shell-lesson-data/exercise-data/animal-counts/animals.csv. can use command cut -d , -f 2 animals.csv | sort | uniq produce unique species animals.csv. order avoid type series commands every time, scientist may choose write shell script instead. Write shell script called species.sh takes number filenames command-line arguments uses variation command print list unique species appearing files separately.","code":"2013-11-05,deer,5 2013-11-05,rabbit,22 2013-11-05,raccoon,7 2013-11-06,rabbit,19 2013-11-06,deer,2 2013-11-06,fox,1 2013-11-07,rabbit,18 2013-11-07,bear,1"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"why-record-commands-in-the-history-before-running-them","dir":"","previous_headings":"","what":"Why Record Commands in the History Before Running Them?","title":null,"text":"run command: last command file history command , .e., shell added history command log actually running . fact, shell always adds commands log running . think ?","code":"$ history | tail -n 5 > recent.sh"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Nelle’s supervisor insisted analytics must reproducible. easiest way capture steps script. First return Nelle’s project directory: creates file using nano … …contains following: saves file called -stats.sh can now re-first stage analysis typing: can also : output just number files processed rather names files processed. One thing note Nelle’s script lets person running decide files process. written : advantage always selects right files: doesn’t remember exclude ‘Z’ files. disadvantage always selects just files — can’t run files (including ‘Z’ files), ‘G’ ‘H’ files colleagues Antarctica producing, without editing script. wanted adventurous, modify script check command-line arguments, use NENE*.txt NENE*B.txt none provided. course, introduces another tradeoff flexibility complexity. correct answer 2. special variables $1, $2 $3 represent command line arguments given script, commands run : shell expand '*.pdb' enclosed quote marks. , first argument script '*.pdb' gets expanded within script head tail. first part pipeline, wc -l $1/*.$2 | sort -n, counts lines file sorts numerically (largest last). ’s one file, wc also outputs final summary line, giving total number lines across files. use tail -n 2 | head -n 1 throw away last line. wc -l $1/*.$2 | sort -n | tail -n 1 ’ll see final summary line: can build pipeline pieces sure understand output. case, shell expands wildcard *.pdb passing resulting list file names arguments script. Script 1 print list files containing dot name. arguments passed script actually used anywhere script. Script 2 print contents first 3 files .pdb file extension. $1, $2, $3 refer first, second, third argument respectively. Script 3 print arguments script (.e. .pdb files), followed .pdb. $@ refers arguments given shell script. -x option causes bash run debug mode. prints command run, help locate errors. example, can see echo isn’t printing anything. made typo loop variable name, variable datfile doesn’t exist, hence returning empty string.","code":"$ cd ../../north-pacific-gyre/ $ nano do-stats.sh # Calculate stats for data files. for datafile in \"$@\" do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ bash do-stats.sh NENE*A.txt NENE*B.txt $ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l # Calculate stats for Site A and Site B data files. for datafile in NENE*A.txt NENE*B.txt do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb # Shell script which takes two arguments: #    1. a directory name #    2. a file extension # and prints the name of the file in that directory # with the most lines which matches the file extension.  wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1 cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"variables-in-shell-scripts","dir":"","previous_headings":"","what":"Variables in Shell Scripts","title":null,"text":"alkanes directory, imagine shell script called script.sh containing following commands: alkanes directory, type following command: following outputs expect see? lines first last lines file ending .pdb alkanes directory first last line file ending .pdb alkanes directory first last line file alkanes directory error quotes around *.pdb","code":"head -n $2 $1 tail -n $3 $1 $ bash script.sh '*.pdb' 1 1"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"find-the-longest-file-with-a-given-extension","dir":"","previous_headings":"","what":"Find the Longest File With a Given Extension","title":null,"text":"Write shell script called longest.sh takes name directory filename extension arguments, prints name file lines directory extension. example: print name .pdb file shell-lesson-data/exercise-data/alkanes lines. Feel free test script another directory e.g.","code":"$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb $ bash longest.sh shell-lesson-data/exercise-data/writing txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"script-reading-comprehension","dir":"","previous_headings":"","what":"Script Reading Comprehension","title":null,"text":"question, consider shell-lesson-data/exercise-data/alkanes directory . contains number .pdb files addition files may created. Explain following three scripts run bash script1.sh *.pdb, bash script2.sh *.pdb, bash script3.sh *.pdb respectively.","code":"# Script 1 echo *.* # Script 2 for filename in $1 $2 $3 do     cat $filename done # Script 3 echo $@.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"debugging-scripts","dir":"","previous_headings":"","what":"Debugging Scripts","title":null,"text":"Suppose saved following script file called -errors.sh Nelle’s north-pacific-gyre directory: run north-pacific-gyre directory: output blank. figure , re-run script using -x option: output showing ? line responsible error?","code":"# Calculate stats for data files. for datafile in \"$@\" do     echo $datfile     bash goostats.sh $datafile stats-$datafile done $ bash do-errors.sh NENE*A.txt NENE*B.txt $ bash -x do-errors.sh NENE*A.txt NENE*B.txt"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Save commands files (usually called shell scripts) re-use. bash [filename] runs commands saved file. $@ refers shell script’s command-line arguments. $1, $2, etc., refer first command-line argument, second command-line argument, etc. Place variables quotes values might spaces . Letting users decide files process flexible consistent built-Unix commands.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Finding Things  can find files? can find things files? Use grep select lines text files match simple patterns. Use find find files directories whose names match simple patterns. Use output one command command-line argument(s) another command. Explain meant ‘text’ ‘binary’ files, many common tools don’t handle latter well. way many us now use ‘Google’ verb meaning ‘find’, Unix programmers often use word ‘grep’. ‘grep’ contraction ‘global/regular expression/print’, common sequence operations early Unix text editors. also name useful command-line program. grep finds prints lines files match pattern. examples, use file contains three haiku taken 1998 competition Salon magazine (Credit authors Bill Torcaso, Howard Korder, Margaret Segall, respectively. See Haiku Error Messsages archived Page 1 Page 2 .). set examples, ’re going working writing subdirectory: Let’s find lines contain word ‘’: , pattern ’re searching . grep command searches file, looking matches pattern specified. use type grep, pattern ’re searching finally name file (files) ’re searching . output three lines file contain letters ‘’. default, grep searches pattern case-sensitive way. addition, search pattern selected form complete word, see next example. Let’s search pattern: ‘’. time, two lines include letters ‘’ outputted, one contained search pattern within larger word, ‘Thesis’. restrict matches lines containing word ‘’ , can give grep -w option. limit matches word boundaries. Later lesson, also see can change search behavior grep respect case sensitivity. Note ‘word boundary’ includes start end line, just letters surrounded spaces. Sometimes don’t want search single word, phrase. can also grep putting phrase quotes. ’ve now seen don’t quotes around single words, useful use quotes searching multiple words. also helps make easier distinguish search term phrase file searched. use quotes remaining examples. Another useful option -n, numbers lines match: , can see lines 5, 9, 10 contain letters ‘’. can combine options (.e. flags) Unix commands. example, let’s find lines contain word ‘’. can combine option -w find lines contain word ‘’ -n number lines match: Now want use option -make search case-insensitive: Now, want use option -v invert search, .e., want output lines contain word ‘’. use -r (recursive) option, grep can search pattern recursively set files subdirectories. Let’s search recursively Yesterday shell-lesson-data/exercise-data/writing directory: grep lots options. find , can type: correct answer 3, -w option looks whole-word matches. options also match ‘’ part another word. Actually, can swap order two cut commands still works. command line, try changing order cut commands, look output step see case. call script like : Alternative, slightly inferior solution: solution inferior grep -c reports number lines matched. total number matches reported method lower one match per line. Perceptive observers may noticed character names sometimes appear -uppercase chapter titles (e.g. ‘MEG GOES VANITY FAIR’). wanted count well, add -option case-insensitivity (though case, doesn’t affect answer sister mentioned frequently). grep finds lines files, find command finds files . , lot options; show simplest ones work, ’ll use shell-lesson-data/exercise-data directory tree shown . exercise-data directory contains one file, numbers.txt four directories: animal-counts, creatures, alkanes writing containing various files. first command, let’s run find . (remember run command shell-lesson-data/exercise-data folder). always, . means current working directory, want search start. find’s output names every file directory current working directory. can seem useless first find many options filter output lesson discover . first option list -type d means ‘things directories’. Sure enough, find’s output names five directories (including .): Notice objects find finds listed particular order. change -type d -type f, get listing files instead: Now let’s try matching name: expected find text files, prints ./numbers.txt. problem shell expands wildcard characters like * commands run. Since *.txt current directory expands ./numbers.txt, command actually ran : find asked; just asked wrong thing. get want, let’s grep: put *.txt quotes prevent shell expanding * wildcard. way, find actually gets pattern *.txt, expanded filename numbers.txt: said earlier, command line’s power lies combining tools. ’ve seen pipes; let’s look another technique. just saw, find . -name \"*.txt\" gives us list text files current directory. can combine wc -l count lines files? simplest way put find command inside $(): shell executes command, first thing run whatever inside $(). replaces $() expression command’s output. Since output find three filenames ./writing/LittleWomen.txt, ./writing/haiku.txt, ./numbers.txt, shell constructs command: wanted. expansion exactly shell expands wildcards like * ?, lets us use command want ‘wildcard’. ’s common use find grep together. first finds files match pattern; second looks lines inside files match another pattern. , example, can find txt files contain word “searching” looking string ‘searching’ .txt files current directory: Option 1 correct. Putting match expression quotes prevents shell expanding , gets passed find command. Option 2 also works instance shell tries expand *.dat *.dat files current directory, wildcard expression gets passed find. first encountered episode 3. Option 3 incorrect searches contents files lines match ‘unicorn’, rather searching file names. Unix shell older people use . survived long one productive programming environments ever created — maybe even productive. syntax may cryptic, people mastered can experiment different commands interactively, use learned automate work. Graphical user interfaces may easier use first, learned, productivity shell unbeatable. Alfred North Whitehead wrote 1911, ‘Civilization advances extending number important operations can perform without thinking .’ Find files .dat extension recursively current directory Count number lines files contains Sort output step 2. numerically","code":"$ cd $ cd Desktop/shell-lesson-data/exercise-data/writing $ cat haiku.txt The Tao that is seen Is not the true Tao, until You bring fresh toner.  With searching comes loss and the presence of absence: \"My Thesis\" not found.  Yesterday it worked Today it is not working Software is like that. $ grep not haiku.txt Is not the true Tao, until \"My Thesis\" not found Today it is not working $ grep The haiku.txt The Tao that is seen \"My Thesis\" not found. $ grep -w The haiku.txt The Tao that is seen $ grep -w \"is not\" haiku.txt Today it is not working $ grep -n \"it\" haiku.txt 5:With searching comes loss 9:Yesterday it worked 10:Today it is not working $ grep -n -w \"the\" haiku.txt 2:Is not the true Tao, until 6:and the presence of absence: $ grep -n -w -i \"the\" haiku.txt 1:The Tao that is seen 2:Is not the true Tao, until 6:and the presence of absence: $ grep -n -w -v \"the\" haiku.txt 1:The Tao that is seen 3:You bring fresh toner. 4: 5:With searching comes loss 7:\"My Thesis\" not found. 8: 9:Yesterday it worked 10:Today it is not working 11:Software is like that. $ grep -r Yesterday . ./LittleWomen.txt:\"Yesterday, when Aunt was asleep and I was trying to be as still as a ./LittleWomen.txt:Yesterday at dinner, when an Austrian officer stared at us and then ./LittleWomen.txt:Yesterday was a quiet day spent in teaching, sewing, and writing in my ./haiku.txt:Yesterday it worked $ grep --help Usage: grep [OPTION]... PATTERN [FILE]... Search for PATTERN in each FILE or standard input. PATTERN is, by default, a basic regular expression (BRE). Example: grep -i 'hello world' menu.h main.c  Regexp selection and interpretation:   -E, --extended-regexp     PATTERN is an extended regular expression (ERE)   -F, --fixed-strings       PATTERN is a set of newline-separated fixed strings   -G, --basic-regexp        PATTERN is a basic regular expression (BRE)   -P, --perl-regexp         PATTERN is a Perl regular expression   -e, --regexp=PATTERN      use PATTERN for matching   -f, --file=FILE           obtain PATTERN from FILE   -i, --ignore-case         ignore case distinctions   -w, --word-regexp         force PATTERN to match only whole words   -x, --line-regexp         force PATTERN to match only whole lines   -z, --null-data           a data line ends in 0 byte, not newline  Miscellaneous: ...        ...        ... grep -w $1 -r $2 | cut -d : -f 2 | cut -d , -f 1,3 > $1.txt $ bash count-species.sh bear . for sis in Jo Meg Beth Amy do     echo $sis:     grep -ow $sis LittleWomen.txt | wc -l done for sis in Jo Meg Beth Amy do     echo $sis:     grep -ocw $sis LittleWomen.txt done . ├── animal-counts/ │   └── animals.csv ├── creatures/ │   ├── basilisk.dat │   ├── minotaur.dat │   └── unicorn.dat ├── numbers.txt ├── alkanes/ │   ├── cubane.pdb │   ├── ethane.pdb │   ├── methane.pdb │   ├── octane.pdb │   ├── pentane.pdb │   └── propane.pdb └── writing/     ├── haiku.txt     └── LittleWomen.txt $ find . . ./writing ./writing/LittleWomen.txt ./writing/haiku.txt ./creatures ./creatures/basilisk.dat ./creatures/unicorn.dat ./creatures/minotaur.dat ./animal-counts ./animal-counts/animals.csv ./numbers.txt ./alkanes ./alkanes/ethane.pdb ./alkanes/propane.pdb ./alkanes/octane.pdb ./alkanes/pentane.pdb ./alkanes/methane.pdb ./alkanes/cubane.pdb $ find . -type d . ./writing ./creatures ./animal-counts ./alkanes $ find . -type f ./writing/LittleWomen.txt ./writing/haiku.txt ./creatures/basilisk.dat ./creatures/unicorn.dat ./creatures/minotaur.dat ./animal-counts/animals.csv ./numbers.txt ./alkanes/ethane.pdb ./alkanes/propane.pdb ./alkanes/octane.pdb ./alkanes/pentane.pdb ./alkanes/methane.pdb ./alkanes/cubane.pdb $ find . -name *.txt ./numbers.txt $ find . -name numbers.txt $ find . -name \"*.txt\" ./writing/LittleWomen.txt ./writing/haiku.txt ./numbers.txt $ wc -l $(find . -name \"*.txt\") 21022 ./writing/LittleWomen.txt      11 ./writing/haiku.txt       5 ./numbers.txt   21038 total $ wc -l ./writing/LittleWomen.txt ./writing/haiku.txt ./numbers.txt $ grep \"searching\" $(find . -name \"*.txt\") ./writing/LittleWomen.txt:sitting on the top step, affected to be searching for her book, but was ./writing/haiku.txt:With searching comes loss"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"using-grep","dir":"","previous_headings":"","what":"Using grep","title":null,"text":"command result following output: grep \"\" haiku.txt grep -E \"\" haiku.txt grep -w \"\" haiku.txt grep -\"\" haiku.txt","code":"and the presence of absence:"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"wildcards","dir":"","previous_headings":"","what":"Wildcards","title":null,"text":"grep‘s real power doesn’t come options, though; comes fact patterns can include wildcards. (technical name regular expressions, ’re’ ‘grep’ stands .) Regular expressions complex powerful; want complex searches, please look lesson website. taster, can find lines ‘o’ second position like : use -E option put pattern quotes prevent shell trying interpret . (pattern contained *, example, shell try expand running grep.) ^ pattern anchors match start line. . matches single character (just like ? shell), o matches actual ‘o’.","code":"$ grep -E \"^.o\" haiku.txt You bring fresh toner. Today it is not working Software is like that."},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"tracking-a-species","dir":"","previous_headings":"","what":"Tracking a Species","title":null,"text":"Leah several hundred data files saved one directory, formatted like : wants write shell script takes species first command-line argument directory second argument. script return one file called <species>.txt containing list dates number species seen date. example using data shown , rabbit.txt contain: , line contains individual command, pipe. Arrange sequence one command order achieve Leah’s goal: Hint: use man grep look grep text recursively directory man cut select one field line. example file provided shell-lesson-data/exercise-data/animal-counts/animals.csv","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 2012-11-05,22 2012-11-06,19 2012-11-07,16 cut -d : -f 2 > | grep -w $1 -r $2 | $1.txt cut -d , -f 1,3"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"little-women","dir":"","previous_headings":"","what":"Little Women","title":null,"text":"friend, just finished reading Little Women Louisa May Alcott, argument. four sisters book, Jo, Meg, Beth, Amy, friend thinks Jo mentioned. , however, certain Amy. Luckily, file LittleWomen.txt containing full text novel (shell-lesson-data/exercise-data/writing/LittleWomen.txt). Using loop, tabulate number times four sisters mentioned? Hint: one solution might employ commands grep wc |, another might utilize grep options. often one way solve programming task, particular solution usually chosen based combination yielding correct result, elegance, readability, speed.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"listing-vs--finding","dir":"","previous_headings":"","what":"Listing vs. Finding","title":null,"text":"ls find can made similar things given right options, normal circumstances, ls lists everything can, find searches things certain properties shows .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"matching-and-subtracting","dir":"","previous_headings":"","what":"Matching and Subtracting","title":null,"text":"-v option grep inverts pattern matching, lines match pattern printed. Given , following commands find .dat files creatures except unicorn.dat? thought answer, can test commands shell-lesson-data/exercise-data directory. find creatures -name \"*.dat\" | grep -v unicorn find creatures -name *.dat | grep -v unicorn grep -v \"unicorn\" $(find creatures -name \"*.dat\") None .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"binary-files","dir":"","previous_headings":"","what":"Binary Files","title":null,"text":"focused exclusively finding patterns text files. data stored images, databases, format? handful tools extend grep handle non text formats. generalizable approach convert data text, extract text-like elements data. one hand, makes simple things easy . hand, complex things usually impossible. example, ’s easy enough write program extract X Y dimensions image files grep play , write something find values spreadsheet whose cells contained formulas? last option recognize shell text processing limits, use another programming language. time comes , don’t hard shell. Many modern programming languages borrowed lot ideas , imitation also sincerest form praise.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":"find-pipeline-reading-comprehension","dir":"","previous_headings":"","what":"find Pipeline Reading Comprehension","title":null,"text":"Write short explanatory comment following shell script:","code":"wc -l $(find . -name \"*.dat\") | sort -n"},{"path":"https://ErinBecker.github.io/shell-novice/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"find finds files specific properties match patterns. grep selects lines files match patterns. --help option supported many bash commands, programs can run within Bash, display information use commands programs. man [command] displays manual page given command. $([command]) inserts command’s output place.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/discuss.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"command find whoami, command find called whereami, pwd instead? usual answer early 1970s, Unix first developed, every keystroke counted: devices day slow, backspacing teletype painful cutting number keystrokes order cut number typing mistakes actually win usability. reality commands added Unix one one, without master plan, people immersed jargon. result inconsistent roolz uv Inglish speling, ’re stuck now.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/discuss.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"shell accepts special commands allow users interact running processes programs. can enter “control codes” holding Ctrl key pressing one control characters. tutorials, may see term Control ^ used represent Ctrl key (e.g. following equivalent Ctrl-C, Ctrl+C, Control-C, Control+C, ^C). Ctrl-C: interrupts cancels running program. useful want cancel command taking long execute. Ctrl-D: indicates end file stream characters entering command line. example, saw earlier wc command counts lines, words, characters file. just type wc hit Enter key without providing file name, wc assume want analyze stuff type next. typing magnum opus directly shell prompt, can type Ctrl-D tell wc ’re done ’d like see results word count. Ctrl-Z: Suspends process terminate . can use command fg restart job foreground. new shell users, control codes can appear effect: make things “go away.” helpful understand differences. general, something went wrong just want get shell prompt back, better use Ctrl-C.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/discuss.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Bash became popular end nineties, scientists widely used (still use) another shell, C-shell, Csh. Bash Csh similar feature sets, syntax rules different makes incompatible . shells appeared since, including ksh, zsh, number others; mostly compatible Bash, Bash default shell modern implementations Unix (including packages provide Unix-like tools Windows) get strange errors shell scripts written colleagues, check see shell written .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/discuss.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Want customize paths, environment variables, aliases, behaviors shell? excellent blog post “Bash Configurations Demystified” Dalton Hubble covers tips, tricks, avoid dangers.","code":""},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/images.html","id":"02-filedir-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘file system made root directory contains sub-directories titled bin, data, users, tmp’ Image 1 1: ‘Like directories, home directories sub-directories underneath \"/Users\" like \"/Users/imhotep\", \"/Users/larry\" \"/Users/nelle\"’ Image 1 1: ‘directory tree Users directory \"/Users\" contains directories \"backup\" \"thing\"; \"/Users/backup\" contains \"original\",\"pnas_final\" \"pnas_sub\"; \"/Users/thing\" contains \"backup\"; \"/Users/thing/backup\" contains \"2012-12-01\", \"2013-01-08\" \"2013-01-27\"’ Image 1 1: ‘directory tree Users directory \"/Users\" contains directories \"backup\" \"thing\"; \"/Users/backup\" contains \"original\",\"pnas_final\" \"pnas_sub\"; \"/Users/thing\" contains \"backup\"; \"/Users/thing/backup\" contains \"2012-12-01\", \"2013-01-08\" \"2013-01-27\"’ Image 1 1: ‘General syntax shell command’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/images.html","id":"03-create-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘screenshot nano text editor action text publish perish , share thrive’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/images.html","id":"04-pipefilter-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Redirects Pipes different commands: \"wc -l *.pdb\" direct theoutput shell. \"wc -l *.pdb > lengths\" direct output file\"lengths\". \"wc -l *.pdb | sort -n | head -n 1\" build pipeline theoutput \"wc\" command input \"sort\" command, output ofthe \"sort\" command input \"head\" command output \"head\" command directed shell’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/images.html","id":"05-loop-figure-1","dir":"","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘loop \"filename .dat; echo cp $filename original-$filename;done\" successively assign names \".dat\" files currentdirectory variable \"$filename\" execute command. thefiles \"basilisk.dat\", \"minotaur.dat\" \"unicorn.dat\" current directorythe loop successively call echo command three times print threelines: \"cp basislisk.dat original-basilisk.dat\", \"cp minotaur.datoriginal-minotaur.dat\" finally \"cp unicorn.datoriginal-unicorn.dat\"’","code":""},{"path":[]},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":null,"text":"lesson guides basics file systems shell. stored files computer recognize word “file” either “directory” “folder” (two common words thing), ’re ready lesson. ’re already comfortable manipulating files directories, searching files grep find, writing simple loops scripts, probably want explore next lesson: shell-extras.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/index.html","id":"headingSolution1","dir":"","previous_headings":"","what":null,"title":null,"text":"need download files follow lesson. Download shell-lesson-data.zip move file Desktop. Unzip/extract file. Let instructor know need help step. end new folder called shell-lesson-data Desktop. already shell software installed, need download install . installing software Open terminal. ’re sure open terminal operating system, see instructions . terminal type cd press Return key. step make sure start home folder working directory. lesson, find access data files folder. Computers Windows operating systems automatically Unix Shell program installed. lesson, encourage use emulator included Git Windows, gives access Bash shell commands Git. installed, can open terminal running program Git Bash Windows start menu. advanced users: alternative Git Windows may wish Install Windows Subsystem Linux gives access Bash shell command-line tool Windows 10 . Please note commands Windows Subsystem Linux (WSL) may differ slightly shown lesson presented workshop. Mac computer running macOS Mojave earlier releases, default Unix Shell Bash. Mac computer running macOS Catalina later releases, default Unix Shell Zsh. default shell available via Terminal program within Utilities folder. open Terminal, try one following: Finder, select Go menu, select Utilities. Locate Terminal Utilities folder open . Use Mac ‘Spotlight’ computer search function. Search : Terminal press Return. check machine set use something Bash, type echo $SHELL terminal window. machine set use something Bash, can run opening terminal typing bash. Use Terminal Mac default Unix Shell Linux operating systems usually Bash. versions Linux, accessible running Gnome Terminal KDE Konsole xterm, can found via applications menu search bar. machine set use something Bash, can run opening terminal typing bash.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"need download files follow lesson. Download shell-lesson-data.zip move file Desktop. Unzip/extract file. Let instructor know need help step. end new folder called shell-lesson-data Desktop.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"already shell software installed, need download install .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/index.html","id":"headingSolution1","dir":"","previous_headings":"","what":null,"title":null,"text":"installing software Open terminal. ’re sure open terminal operating system, see instructions . terminal type cd press Return key. step make sure start home folder working directory. lesson, find access data files folder. Computers Windows operating systems automatically Unix Shell program installed. lesson, encourage use emulator included Git Windows, gives access Bash shell commands Git. installed, can open terminal running program Git Bash Windows start menu. advanced users: alternative Git Windows may wish Install Windows Subsystem Linux gives access Bash shell command-line tool Windows 10 . Please note commands Windows Subsystem Linux (WSL) may differ slightly shown lesson presented workshop. Mac computer running macOS Mojave earlier releases, default Unix Shell Bash. Mac computer running macOS Catalina later releases, default Unix Shell Zsh. default shell available via Terminal program within Utilities folder. open Terminal, try one following: Finder, select Go menu, select Utilities. Locate Terminal Utilities folder open . Use Mac ‘Spotlight’ computer search function. Search : Terminal press Return. check machine set use something Bash, type echo $SHELL terminal window. machine set use something Bash, can run opening terminal typing bash. Use Terminal Mac default Unix Shell Linux operating systems usually Bash. versions Linux, accessible running Gnome Terminal KDE Konsole xterm, can found via applications menu search bar. machine set use something Bash, can run opening terminal typing bash.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/index.html","id":"where-to-type-commands-how-to-open-a-new-shell","dir":"","previous_headings":"","what":"Where to type commands: How to open a new shell","title":null,"text":"shell program enables us send commands computer receive output. also referred terminal command line. computers include default Unix Shell program. steps describe methods identifying opening Unix Shell program already one installed. also options identifying downloading Unix Shell program, Linux/UNIX emulator, program access Unix Shell server. none options address circumstances, try online search : Unix shell [computer model] [operating system].","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":"background","dir":"Instructor","previous_headings":"","what":"Background","title":null,"text":"Humans computers commonly interact many different ways, keyboard mouse, touch screen interfaces, using speech recognition systems. widely used way interact personal computers called graphical user interface (GUI). GUI, give instructions clicking mouse using menu-driven interactions. visual aid GUI makes intuitive learn, way delivering instructions computer scales poorly. Imagine following task: literature search, copy third line one thousand text files one thousand different directories paste single file. Using GUI, clicking desk several hours, potentially also commit error process completing repetitive task. take advantage Unix shell. Unix shell command-line interface (CLI) scripting language, allowing repetitive tasks done automatically fast. proper commands, shell can repeat tasks without modification many times want. Using shell, task literature example can accomplished seconds.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":"the-shell","dir":"Instructor","previous_headings":"","what":"The Shell","title":null,"text":"shell program users can type commands. shell, ’s possible invoke complicated programs like climate modeling software simple commands create empty directory one line code. popular Unix shell Bash (Bourne SHell — -called ’s derived shell written Stephen Bourne). Bash default shell modern implementations Unix packages provide Unix-like tools Windows. Note ‘Git Bash’ piece software enables Windows users use Bash like interface interacting Git. Using shell take effort time learn. GUI presents choices select, CLI choices automatically presented , must learn commands like new vocabulary language ’re studying. However, unlike spoken language, small number “words” (.e. commands) gets long way, ’ll cover essential today. grammar shell allows combine existing tools powerful pipelines handle large volumes data automatically. Sequences commands can written script, improving reproducibility workflows. addition, command line often easiest way interact remote machines supercomputers. Familiarity shell near essential run variety specialized tools resources including high-performance computing systems. clusters cloud computing systems become popular scientific data crunching, able interact shell becoming necessary skill. can build command-line skills covered tackle wide range scientific questions computational challenges. Let’s get started. shell first opened, presented prompt, indicating shell waiting input. shell typically uses $ prompt, may use different symbol. examples lesson, ’ll show prompt $. importantly, type prompt typing commands. type command follows prompt. rule applies lessons lessons sources. Also note type command, press Enter key execute . prompt followed text cursor, character indicates position typing appear. cursor usually flashing solid block, can also underscore pipe. may seen text editor program, example. Note prompt might look little different. particular, popular shell environments default put user name host name $. prompt might look like, e.g.: prompt might even include . worry prompt just short $. lesson depend additional information also get way. important item focus $ character see later . let’s try first command, ls, short listing. command list contents current directory:","code":"$ nelle@localhost $ $ ls Desktop     Downloads   Movies      Pictures Documents   Library     Music       Public"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":"command-not-found","dir":"Instructor","previous_headings":"","what":"Command not found","title":null,"text":"shell can’t find program whose name command typed, print error message : might happen command mis-typed program corresponding command installed.","code":"$ ks ks: command not found"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nelle Nemo, marine biologist, just returned six-month survey North Pacific Gyre, sampling gelatinous marine life Great Pacific Garbage Patch. 1520 samples ’s run assay machine measure relative abundance 300 proteins. needs run 1520 files imaginary program called goostats.sh. addition huge task, write results end month, paper can appear special issue Aquatic Goo Letters. Nelle chooses run goostats.sh hand using GUI, ’ll select open file 1520 times. goostats.sh takes 30 seconds run file, whole process take 12 hours Nelle’s attention. shell, Nelle can instead assign computer mundane task focuses attention writing paper. next lessons explore ways Nelle can achieve . specifically, lessons explain can use command shell run goostats.sh program, using loops automate repetitive steps entering file names, computer can work writes paper. bonus, put processing pipeline together, able use whenever collects data. order achieve task, Nelle needs know : navigate file/directory create file/directory check length file chain commands together retrieve set files iterate files run shell script containing pipeline","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/01-intro.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"shell program whose primary purpose read commands run programs. lesson uses Bash, default shell many implementations Unix. Programs can run Bash entering commands command-line prompt. shell’s main advantages high action--keystroke ratio, support automating repetitive tasks, capacity access networked machines. significant challenge using shell can knowing commands need run run .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"home-directory-variation","dir":"Instructor","previous_headings":"","what":"Home Directory Variation","title":null,"text":"home directory path look different different operating systems. Linux, may look like /home/nelle, Windows, similar C:\\Documents Settings\\nelle C:\\Users\\nelle. (Note may look slightly different different versions Windows.) future examples, ’ve used Mac output default - Linux Windows output may differ slightly generally similar. also assume pwd command returns user’s home directory. pwd returns something different, may need navigate using cd commands lesson work written. See Exploring Directories details cd command.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"slashes","dir":"Instructor","previous_headings":"","what":"Slashes","title":null,"text":"Notice two meanings / character. appears front file directory name, refers root directory. appears inside path, ’s just separator.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"clearing-your-terminal","dir":"Instructor","previous_headings":"","what":"Clearing your terminal","title":null,"text":"screen gets cluttered, can clear terminal using clear command. can still access previous commands using ↑ ↓ move line--line, scrolling terminal.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"getting-help","dir":"Instructor","previous_headings":"","what":"Getting help","title":null,"text":"ls lots options. two common ways find use command options accepts — depending environment, might find one ways works: can pass --help option command (available Linux Git Bash), example: can read manual man (available Linux macOS): ’ll describe ways next.","code":"$ ls --help $ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"help-for-built-in-commands","dir":"Instructor","previous_headings":"","what":"Help for built-in commands","title":null,"text":"commands built Bash shell, rather existing separate programs filesystem. One example cd (change directory) command. get message like manual entry cd, try help cd instead. help command get usage information Bash built-ins.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"the---help-option","dir":"Instructor","previous_headings":"Getting help","what":"The --help option","title":null,"text":"bash commands programs people written run within bash, support --help option displays information use command program.","code":"$ ls --help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.  Mandatory arguments to long options are mandatory for short options, too.   -a, --all                  do not ignore entries starting with .   -A, --almost-all           do not list implied . and ..       --author               with -l, print the author of each file   -b, --escape               print C-style escapes for nongraphic characters       --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,                                '--block-size=M' prints sizes in units of                                1,048,576 bytes; see SIZE format below   -B, --ignore-backups       do not list implied entries ending with ~   -c                         with -lt: sort by, and show, ctime (time of last                                modification of file status information);                                with -l: show ctime and sort by name;                                otherwise: sort by ctime, newest first   -C                         list entries by columns       --color[=WHEN]         colorize the output; WHEN can be 'always' (default                                if omitted), 'auto', or 'never'; more info below   -d, --directory            list directories themselves, not their contents   -D, --dired                generate output designed for Emacs' dired mode   -f                         do not sort, enable -aU, disable -ls --color   -F, --classify             append indicator (one of */=>@|) to entries ...        ...        ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"unsupported-command-line-options","dir":"Instructor","previous_headings":"","what":"Unsupported command-line options","title":null,"text":"try use option supported, ls commands usually print error message similar :","code":"$ ls -j ls: invalid option -- 'j' Try 'ls --help' for more information."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"the-man-command","dir":"Instructor","previous_headings":"Getting help","what":"The man command","title":null,"text":"way learn ls type command turn terminal page description ls command options. navigate man pages, may use ↑ ↓ move line--line, try B Spacebar skip full page. search character word man pages, use / followed character word searching . Sometimes search result multiple hits. , can move hits using N (moving forward) Shift+N (moving backward). quit man pages, press Q. -l option makes ls use long listing format, showing file/directory names also additional information, file size time last modification. use -h option -l option, makes file size ‘human readable’, .e. displaying something like 5.3K instead 5369. recently changed file listed last using -rt. can useful finding recent edits checking see new output file written.","code":"$ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"manual-pages-on-the-web","dir":"Instructor","previous_headings":"","what":"Manual pages on the web","title":null,"text":"course, third way access help commands: searching internet via web browser. using internet search, including phrase unix man page search query help find relevant results. GNU provides links manuals including core GNU utilities, covers many commands introduced within lesson.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"exploring-more-ls-options","dir":"Instructor","previous_headings":"","what":"Exploring More ls Options","title":null,"text":"can also use two options time. command ls used -l option? use -l -h option? output properties cover lesson (file permissions ownership), rest useful nevertheless.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"listing-in-reverse-chronological-order","dir":"Instructor","previous_headings":"","what":"Listing in Reverse Chronological Order","title":null,"text":"default, ls lists contents directory alphabetical order name. command ls -t lists items time last change instead alphabetically. command ls -r lists contents directory reverse order. file displayed last combine -t -r options? Hint: may need use -l option see last changed dates.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"exploring-other-directories","dir":"Instructor","previous_headings":"","what":"Exploring Other Directories","title":null,"text":"can use ls current working directory, can use list contents different directory. Let’s take look Desktop directory running ls -F Desktop, .e., command ls -F option argument Desktop. argument Desktop tells ls want listing something current working directory: Note directory named Desktop exist current working directory, command return error. Typically, Desktop directory exists home directory, assume current working directory bash shell. output list files sub-directories Desktop directory, including shell-lesson-data directory downloaded setup lesson. (systems, contents Desktop directory shell show icons graphical user interface behind open windows. See case .) Organizing things hierarchically helps us keep track work. ’s possible put hundreds files home directory just ’s possible pile hundreds printed papers desk, ’s much easier find things ’ve organized sensibly-named subdirectories. Now know shell-lesson-data directory located Desktop directory, can two things. First, using strategy , can look contents passing directory name ls: Second, can actually change location different directory, longer located home directory. command change locations cd followed directory name change working directory. cd stands ‘change directory’, bit misleading. command doesn’t change directory; changes shell’s current working directory. words changes shell’s settings directory . cd command akin double-clicking folder graphical interface get folder. Let’s say want move exercise-data directory saw . can use following series commands get : commands move us home directory Desktop directory, shell-lesson-data directory, exercise-data directory. notice cd doesn’t print anything. normal. Many shell commands output anything screen successfully executed. run pwd , can see now /Users/nelle/Desktop/shell-lesson-data/exercise-data. run ls -F without arguments now, lists contents /Users/nelle/Desktop/shell-lesson-data/exercise-data, ’s now : now know go directory tree (.e. go subdirectory), go (.e. leave directory go parent directory)? might try following: get error! ? methods far, cd can see sub-directories inside current directory. different ways see directories current location; ’ll start simplest. shortcut shell move one directory level. works follows: .. special directory name meaning “directory containing one”, succinctly, parent current directory. Sure enough, run pwd running cd .., ’re back /Users/nelle/Desktop/shell-lesson-data: special directory .. doesn’t usually show run ls. want display , can add -option ls -F: -stands ‘show ’ (including hidden files); forces ls show us file directory names begin ., .. (, ’re /Users/nelle, refers /Users directory). can see, also displays another special directory ’s just called ., means ‘current working directory’. may seem redundant name , ’ll see uses soon. Note command line tools, multiple options can combined single - spaces options; ls -F -equivalent ls -Fa. three commands basic commands navigating filesystem computer: pwd, ls, cd. Let’s explore variations commands. happens type cd , without giving directory? can check happened? pwd gives us answer! turns cd without argument return home directory, great ’ve got lost filesystem. Let’s try returning exercise-data directory . Last time, used three commands, can actually string together list directories move exercise-data one step: Check ’ve moved right place running pwd ls -F. want move one level data directory, use cd ... another way move directory, regardless current location. far, specifying directory names, even directory path (), using relative paths. use relative path command like ls cd, tries find location , rather root file system. However, possible specify absolute path directory including entire path root directory, indicated leading slash. leading / tells computer follow path root file system, always refers exactly one directory, matter run command. allows us move shell-lesson-data directory anywhere filesystem (including inside exercise-data). find absolute path ’re looking , can use pwd extract piece need move shell-lesson-data. Run pwd ls -F ensure ’re directory expect. : . stands current directory. : / stands root directory. : Nelle’s home directory /Users/nelle. : command goes two levels, .e. ends /Users. Yes: ~ stands user’s home directory, case /Users/nelle. : command navigate directory home current directory exists. Yes: unnecessarily complicated, correct. Yes: shortcut go back user’s home directory. Yes: goes one level. : directory backup /Users. : content Users/thing/backup, .., asked one level . : see previous explanation. Yes: ../backup/ refers /Users/backup/. : pwd name directory. Yes: ls without directory argument lists files directories current directory. Yes: uses absolute path explicitly.","code":"$ ls -F Desktop shell-lesson-data/ $ ls -F Desktop/shell-lesson-data exercise-data/  north-pacific-gyre/ $ cd Desktop $ cd shell-lesson-data $ cd exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ ls -F alkanes/  animal-counts/  creatures/  numbers.txt  writing/ $ cd shell-lesson-data -bash: cd: shell-lesson-data: No such file or directory $ cd .. $ pwd /Users/nelle/Desktop/shell-lesson-data $ ls -F -a ./  ../  exercise-data/  north-pacific-gyre/ $ cd $ pwd /Users/nelle $ cd Desktop/shell-lesson-data/exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ cd /Users/nelle/Desktop/shell-lesson-data"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"other-hidden-files","dir":"Instructor","previous_headings":"","what":"Other Hidden Files","title":null,"text":"addition hidden directories .. ., may also see file called .bash_profile. file usually contains shell configuration settings. may also see files directories beginning .. usually files directories used configure different programs computer. prefix . used prevent configuration files cluttering terminal standard ls command used.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"two-more-shortcuts","dir":"Instructor","previous_headings":"","what":"Two More Shortcuts","title":null,"text":"shell interprets tilde (~) character start path mean “current user’s home directory”. example, Nelle’s home directory /Users/nelle, ~/data equivalent /Users/nelle/data. works first character path; //~/elsewhere //Users/nelle/elsewhere. Another shortcut - (dash) character. cd translate - previous directory , faster remember, type, full path. efficient way moving back forth two directories – .e. execute cd - twice, end back starting directory. difference cd .. cd - former brings , latter brings back. Try ! First navigate ~/Desktop/shell-lesson-data (already ). cd exercise-data/creatures directory Now run ’ll see ’re back ~/Desktop/shell-lesson-data. Run cd - ’re back ~/Desktop/shell-lesson-data/exercise-data/creatures","code":"$ cd ~/Desktop/shell-lesson-data $ cd exercise-data/creatures $ cd -"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"absolute-vs-relative-paths","dir":"Instructor","previous_headings":"","what":"Absolute vs Relative Paths","title":null,"text":"Starting /Users/nelle/data, following commands Nelle use navigate home directory, /Users/nelle? cd . cd / cd /home/nelle cd ../.. cd ~ cd home cd ~/data/.. cd cd ..","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"relative-path-resolution","dir":"Instructor","previous_headings":"","what":"Relative Path Resolution","title":null,"text":"Using filesystem diagram , pwd displays /Users/thing, ls -F ../backup display? ../backup: file directory 2012-12-01 2013-01-08 2013-01-27 2012-12-01/ 2013-01-08/ 2013-01-27/ original/ pnas_final/ pnas_sub/","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"ls-reading-comprehension","dir":"Instructor","previous_headings":"","what":"ls Reading Comprehension","title":null,"text":"Using filesystem diagram , pwd displays /Users/backup, -r tells ls display things reverse order, command(s) result following output: ls pwd ls -r -F ls -r -F /Users/backup","code":"pnas_sub/ pnas_final/ original/"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"now encountered commands, options, arguments, perhaps useful formalise terminology. Consider command general example command, dissect component parts: ls command, option -F argument /. ’ve already encountered options either start single dash (-), known short options, two dashes (--), known long options. [Options] change behavior command Arguments tell command operate (e.g. files directories). Sometimes options arguments referred parameters. command can called one option one argument, command doesn’t always require argument option. might sometimes see options referred switches flags, especially options take argument. lesson stick using term option. part separated spaces. omit space ls -F shell look command called ls-F, doesn’t exist. Also, capitalization can important. example, ls -s display size files directories alongside names, ls -S sort files directories size, shown : Note sizes returned ls -s blocks. defined differently different operating systems, may obtain figures example. Putting together, command ls -F / gives us listing files directories root directory /. example output might get command given :","code":"$ ls -F / $ cd ~/Desktop/shell-lesson-data $ ls -s exercise-data total 28  4 animal-counts   4 creatures  12 numbers.txt   4 alkanes   4 writing $ ls -S exercise-data animal-counts  creatures  alkanes  writing  numbers.txt $ ls -F / Applications/         System/ Library/              Users/ Network/              Volumes/"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"when-to-use-short-or-long-options","dir":"Instructor","previous_headings":"","what":"When to use short or long options","title":null,"text":"options exist short long options: Use short option typing commands directly shell minimize keystrokes get task done faster. Use long option scripts provide clarity. read many times typed .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":"nelles-pipeline-organizing-files","dir":"Instructor","previous_headings":"","what":"Nelle’s Pipeline: Organizing Files","title":null,"text":"Knowing much files directories, Nelle ready organize files protein assay machine create. creates directory called north-pacific-gyre (remind data came ), contain data files assay machine data processing scripts. physical samples labelled according lab’s convention unique ten-character ID, ‘NENE01729A’. ID used collection log record location, time, depth, characteristics sample, decides use within filename data file. Since output assay machine plain text, call files NENE01729A.txt, NENE01812A.txt, . 1520 files go directory. Now current directory shell-lesson-data, Nelle can see files using command: command lot type, can let shell work called tab completion. types: presses Tab (tab key keyboard), shell automatically completes directory name : Pressing Tab nothing, since multiple possibilities; pressing Tab twice brings list files. Nelle presses G presses Tab , shell append ‘goo’ since files start ‘g’ share first three characters ‘goo’. see files, can press Tab twice . called tab completion, see many tools go .","code":"$ ls north-pacific-gyre/ $ ls nor $ ls north-pacific-gyre/ $ ls north-pacific-gyre/goo ls north-pacific-gyre/goo goodiff.sh   goostats.sh"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/02-filedir.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"file system responsible managing information disk. Information stored files, stored directories (folders). Directories can also store directories, form directory tree. pwd prints user’s current working directory. ls [path] prints listing specific file directory; ls lists current working directory. cd [path] changes current working directory. commands take options begin single -. Directory names path separated / Unix, \\ Windows. / root directory whole file system. absolute path specifies location root file system. relative path specifies location starting current location. . means ‘current directory’; .. means ‘directory current one’.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"now know explore files directories, create first place? episode learn creating moving files directories, using exercise-data/writing directory example.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"step-one-see-where-we-are-and-what-we-already-have","dir":"Instructor","previous_headings":"","what":"Step one: see where we are and what we already have","title":null,"text":"still shell-lesson-data directory Desktop, can check using: Next ’ll move exercise-data/writing directory see contains:","code":"$ pwd /Users/nelle/Desktop/shell-lesson-data $ cd exercise-data/writing/ $ ls -F haiku.txt  LittleWomen.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"create-a-directory","dir":"Instructor","previous_headings":"","what":"Create a directory","title":null,"text":"Let’s create new directory called thesis using command mkdir thesis (output): might guess name, mkdir means ‘make directory’. Since thesis relative path (.e., leading slash, like //ever/thesis), new directory created current working directory: Since ’ve just created thesis directory, ’s nothing yet: Note mkdir limited creating single directories one time. -p option allows mkdir create directory nested subdirectories single operation: -R option ls command list nested subdirectories within directory. Let’s use ls -FR recursively list new directory hierarchy just created project directory: Learners can sometimes get trapped within command-line text editors Vim, Emacs, Nano. Closing terminal emulator opening new one can frustrating learners navigate correct folder . recommendation mitigate problem instructors use text editor learners workshops (cases Nano).","code":"$ mkdir thesis $ ls -F haiku.txt  LittleWomen.txt  thesis/ $ ls -F thesis $ mkdir -p ../project/data ../project/results $ ls -FR ../project ../project/: data/  results/  ../project/data:  ../project/results:"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"two-ways-of-doing-the-same-thing","dir":"Instructor","previous_headings":"","what":"Two ways of doing the same thing","title":null,"text":"Using shell create directory different using file explorer. open current directory using operating system’s graphical file explorer, thesis directory appear . shell file explorer two different ways interacting files, files directories .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"good-names-for-files-and-directories","dir":"Instructor","previous_headings":"","what":"Good names for files and directories","title":null,"text":"Complicated names files directories can make life painful working command line. provide useful tips names files directories. Don’t use spaces. Spaces can make name meaningful, since spaces used separate arguments command line better avoid names files directories. can use - _ instead (e.g. north-pacific-gyre/ rather north pacific gyre/). test , try typing mkdir north pacific gyre see directory (directories!) made check ls -F. Don’t begin name - (dash). Commands treat names starting - options. Stick letters, numbers, . (period ‘full stop’), - (dash) _ (underscore). Many characters special meanings command line. learn lesson. special characters can cause command work expected can even result data loss. need refer names files directories spaces special characters, surround name quotes (\"\").","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"create-a-text-file","dir":"Instructor","previous_headings":"","what":"Create a text file","title":null,"text":"Let’s change working directory thesis using cd, run text editor called Nano create file called draft.txt: Let’s type lines text. ’re happy text, can press Ctrl+O (press Ctrl Control key , holding , press O key) write data disk. asked provide name file contain text. Press Return accept suggested default draft.txt. file saved, can use Ctrl+X quit editor return shell. nano doesn’t leave output screen exits, ls now shows created file called draft.txt: touch command generates new file called my_file.txt current directory. can observe newly generated file typing ls command line prompt. my_file.txt can also viewed GUI file explorer. inspect file ls -l, note size my_file.txt 0 bytes. words, contains data. open my_file.txt using text editor blank. programs generate output files , instead require empty files already generated. program run, searches existing file populate output. touch command allows efficiently generate blank text file used programs.","code":"$ cd thesis $ nano draft.txt $ ls draft.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"which-editor","dir":"Instructor","previous_headings":"","what":"Which Editor?","title":null,"text":"say, ‘nano text editor’ really mean ‘text’. can work plain character data, tables, images, human-friendly media. use examples one least complex text editors. However, trait, may powerful enough flexible enough work need workshop. Unix systems (Linux macOS), many programmers use Emacs Vim (require time learn), graphical editor Gedit VScode. Windows, may wish use Notepad++. Windows also built-editor called notepad can run command line way nano purposes lesson. matter editor use, need know searches saves files. start shell, (probably) use current working directory default location. use computer’s start menu, may want save files Desktop Documents directory instead. can change navigating another directory first time ‘Save …’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"control-ctrl-or-key","dir":"Instructor","previous_headings":"","what":"Control, Ctrl, or ^ Key","title":null,"text":"Control key also called ‘Ctrl’ key. various ways using Control key may described. example, may see instruction press Control key , holding , press X key, described : Control-X Control+X Ctrl-X Ctrl+X ^X C-x nano, along bottom screen ’ll see ^G Get Help ^O WriteOut. means can use Control-G get help Control-O save file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"creating-files-a-different-way","dir":"Instructor","previous_headings":"","what":"Creating Files a Different Way","title":null,"text":"seen create text files using nano editor. Now, try following command: touch command ? look current directory using GUI file explorer, file show ? Use ls -l inspect files. large my_file.txt? might want create file way?","code":"$ touch my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"creating-files-a-different-way-1","dir":"Instructor","previous_headings":"","what":"Creating Files a Different Way (continued)","title":null,"text":"avoid confusion later , suggest removing file ’ve just created proceeding rest episode, otherwise future outputs may vary given lesson. , use following command:","code":"$ rm my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"whats-in-a-name","dir":"Instructor","previous_headings":"","what":"What’s In A Name?","title":null,"text":"may noticed Nelle’s files named ‘something dot something’, part lesson, always used extension .txt. just convention; can call file mythesis almost anything else want. However, people use two-part names time help (programs) tell different kinds files apart. second part name called filename extension indicates type data file holds: .txt signals plain text file, .pdf indicates PDF document, .cfg configuration file full parameters program , .png PNG image, . just convention, albeit important one. Files merely contain bytes; ’s us programs interpret bytes according rules plain text files, PDF documents, configuration files, images, . Naming PNG image whale whale.mp3 doesn’t somehow magically turn recording whale song, though might cause operating system associate file music player program. case, someone double-clicked whale.mp3 file explorer program,music player automatically (erroneously) attempt open whale.mp3 file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Returning shell-lesson-data/exercise-data/writing directory, thesis directory file draft.txt isn’t particularly informative name, let’s change file’s name using mv, short ‘move’: first argument tells mv ’re ‘moving’, second ’s go. case, ’re moving thesis/draft.txt thesis/quotes.txt, effect renaming file. Sure enough, ls shows us thesis now contains one file called quotes.txt: One must careful specifying target file name, since mv silently overwrite existing file name, lead data loss. default, mv ask confirmation overwriting files. However, additional option, mv -(mv --interactive), cause mv request confirmation. Note mv also works directories. Let’s move quotes.txt current working directory. use mv , time ’ll use just name directory second argument tell mv want keep filename put file somewhere new. (command called ‘move’.) case, directory name use special directory name . mentioned earlier. effect move file directory current working directory. ls now shows us thesis empty: Alternatively, can confirm file quotes.txt longer present thesis directory explicitly trying list : ls filename directory argument lists requested file directory. file given argument doesn’t exist, shell returns error saw . can use see quotes.txt now present current directory: Recall .. refers parent directory (.e. one current directory) . refers current directory.","code":"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing $ mv thesis/draft.txt thesis/quotes.txt $ ls thesis quotes.txt $ mv thesis/quotes.txt . $ ls thesis $ $ ls thesis/quotes.txt ls: cannot access 'thesis/quotes.txt': No such file or directory $ ls quotes.txt quotes.txt $ mv sucrose.dat maltose.dat ../raw"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"moving-files-to-a-new-folder","dir":"Instructor","previous_headings":"","what":"Moving Files to a new folder","title":null,"text":"running following commands, Jamie realizes put files sucrose.dat maltose.dat wrong folder. files placed raw folder. Fill blanks move files raw/ folder (.e. one forgot put )","code":"$ ls -F  analyzed/ raw/ $ ls -F analyzed fructose.dat glucose.dat maltose.dat sucrose.dat $ cd analyzed $ mv sucrose.dat maltose.dat ____/____"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"cp command works much like mv, except copies file instead moving . can check right thing using ls two paths arguments — like Unix commands, ls can given multiple paths : can also copy directory contents using recursive option -r, e.g. back directory: can check result listing contents thesis thesis_backup directory: important include -r flag. want copy directory omit option see message directory omitted -r specified. . create file correct name, incorrectly named file still exists directory need deleted. Yes, work rename file. , period(.) indicates move file, provide new file name; identical file names created. , period(.) indicates copy file, provide new file name; identical file names created. start /Users/jamie/data directory, create new folder called recombined. second line moves (mv) file proteins.dat new folder (recombined). third line makes copy file just moved. tricky part file copied . Recall .. means ‘go level’, copied file now /Users/jamie. Notice .. interpreted respect current working directory, respect location file copied. , thing show using ls (/Users/jamie/data) recombined folder. , see explanation . proteins-saved.dat located /Users/jamie Yes , see explanation . proteins.dat located /Users/jamie/data/recombined , see explanation . proteins-saved.dat located /Users/jamie","code":"$ cp quotes.txt thesis/quotations.txt $ ls quotes.txt thesis/quotations.txt quotes.txt   thesis/quotations.txt $ cp -r thesis thesis_backup $ ls thesis thesis_backup thesis: quotations.txt  thesis_backup: quotations.txt $ cp thesis thesis_backup cp: -r not specified; omitting directory 'thesis'"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"renaming-files","dir":"Instructor","previous_headings":"","what":"Renaming Files","title":null,"text":"Suppose created plain-text file current directory contain list statistical tests need analyze data, named statstics.txt creating saving file realize misspelled filename! want correct mistake, following commands use ? cp statstics.txt statistics.txt mv statstics.txt statistics.txt mv statstics.txt . cp statstics.txt .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"moving-and-copying","dir":"Instructor","previous_headings":"","what":"Moving and Copying","title":null,"text":"output closing ls command sequence shown ? proteins-saved.dat recombined recombined proteins.dat recombined proteins-saved.dat","code":"$ pwd /Users/jamie/data $ ls proteins.dat $ mkdir recombined $ mv proteins.dat recombined/ $ cp recombined/proteins.dat ../proteins-saved.dat $ ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Returning shell-lesson-data/exercise-data/writing directory, let’s tidy directory removing quotes.txt file created. Unix command ’ll use rm (short ‘remove’): can confirm file gone using ls: -option prompt (every) removal (use Y confirm deletion N keep file). Unix shell doesn’t trash bin, files removed disappear forever. using -option, chance check deleting files want remove. try remove thesis directory using rm thesis, get error message: happens rm default works files, directories. rm can remove directory contents use recursive option -r, without confirmation prompts: Given way retrieve files deleted using shell, rm -r used great caution (might consider adding interactive option rm -r -).","code":"$ rm quotes.txt $ ls quotes.txt ls: cannot access 'quotes.txt': No such file or directory rm: remove regular file 'thesis_backup/quotations.txt'? y $ rm thesis rm: cannot remove 'thesis': Is a directory $ rm -r thesis"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"deleting-is-forever","dir":"Instructor","previous_headings":"","what":"Deleting Is Forever","title":null,"text":"Unix shell doesn’t trash bin can recover deleted files (though graphical interfaces Unix ). Instead, delete files, unlinked file system storage space disk can recycled. Tools finding recovering deleted files exist, ’s guarantee ’ll work particular situation, since computer may recycle file’s disk space right away.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"using-rm-safely","dir":"Instructor","previous_headings":"","what":"Using rm Safely","title":null,"text":"happens execute rm -thesis_backup/quotations.txt? want protection using rm?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"headingSolution6","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Oftentimes one needs copy move several files . can done providing list individual filenames, specifying naming pattern using wildcards. Wildcards special characters can used represent unknown characters sets characters navigating Unix file system. given one file name followed directory name (.e. destination directory must last argument), cp copies files named directory. given three file names, cp throws error one , expecting directory name last argument.","code":"cp: target 'basilisk.dat' is not a directory"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"copy-with-multiple-filenames","dir":"Instructor","previous_headings":"","what":"Copy with Multiple Filenames","title":null,"text":"exercise, can test commands shell-lesson-data/exercise-data directory. example , cp given several filenames directory name? example , cp given three file names?","code":"$ mkdir backup $ cp creatures/minotaur.dat creatures/unicorn.dat backup/ $ cd creatures $ ls -F basilisk.dat  minotaur.dat  unicorn.dat $ cp minotaur.dat unicorn.dat basilisk.dat"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"using-wildcards-for-accessing-multiple-files-at-once","dir":"Instructor","previous_headings":"","what":"Using wildcards for accessing multiple files at once","title":null,"text":"solution 3. 1. shows files whose names contain zero characters (*) followed letter t, zero characters (*) followed ane.pdb. gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb. 2. shows files whose names start zero characters (*) followed letter t, single character (?), ne. followed zero characters (*). give us octane.pdb pentane.pdb doesn’t match anything ends thane.pdb. 3. fixes problems option 2 matching two characters (??) t ne. solution. 4. shows files starting ethane.. Jamie needs move files fructose.dat sucrose.dat analyzed directory. shell expand *.dat match .dat files current directory. mv command moves list .dat files ‘analyzed’ directory. first two sets commands achieve objective. first set uses relative paths create top-level directory subdirectories. third set commands give error default behavior mkdir won’t create subdirectory non-existent directory: intermediate level folders must created first. fourth set commands achieve objective. Remember, -p option, followed path one directories, cause mkdir create intermediate subdirectories required. final set commands generates ‘raw’ ‘processed’ directories level ‘data’ directory.","code":"$ cp *calibration.txt backup/calibration $ cp 2015-11-* send_to_bob/all_november_files/ $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/ mv *.dat analyzed"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"wildcards","dir":"Instructor","previous_headings":"","what":"Wildcards","title":null,"text":"* wildcard, represents zero characters. Let’s consider shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, every file ends ‘.pdb’. hand, p*.pdb represents pentane.pdb propane.pdb, ‘p’ front can represent filenames begin letter ‘p’. ? also wildcard, represents exactly one character. ?ethane.pdb represent methane.pdb whereas *ethane.pdb represents ethane.pdb methane.pdb. Wildcards can used combination . example, ???ane.pdb indicates three characters followed ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb. shell sees wildcard, expands wildcard create list matching filenames running preceding command. exception, wildcard expression match file, Bash pass expression argument command . example, typing ls *.pdf alkanes directory (contains files names ending .pdb) results error message file called *.pdf. However, generally commands like wc ls see lists file names matching expressions, wildcards . shell, programs, expands wildcards.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"list-filenames-matching-a-pattern","dir":"Instructor","previous_headings":"","what":"List filenames matching a pattern","title":null,"text":"run alkanes directory, ls command(s) produce output? ethane.pdb   methane.pdb ls *t*ane.pdb ls *t?ne.* ls *t??ne.pdb ls ethane.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"more-on-wildcards","dir":"Instructor","previous_headings":"","what":"More on Wildcards","title":null,"text":"Sam directory containing calibration data, datasets, descriptions datasets: heading another field trip, wants back data send datasets colleague Bob. Sam uses following commands get job done: Help Sam filling blanks. resulting directory structure look like ","code":". ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   └── datasets └── send_to_bob     ├── all_datasets_created_on_a_23rd     └── all_november_files $ cp *dataset* backup/datasets $ cp ____calibration____ backup/calibration $ cp 2015-____-____ send_to_bob/all_november_files/ $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/ . ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   │   ├── 2015-10-23-calibration.txt │   │   ├── 2015-10-26-calibration.txt │   │   └── 2015-11-23-calibration.txt │   └── datasets │       ├── 2015-10-23-dataset1.txt │       ├── 2015-10-23-dataset2.txt │       ├── 2015-10-23-dataset_overview.txt │       ├── 2015-10-26-dataset1.txt │       ├── 2015-10-26-dataset2.txt │       ├── 2015-10-26-dataset_overview.txt │       ├── 2015-11-23-dataset1.txt │       ├── 2015-11-23-dataset2.txt │       └── 2015-11-23-dataset_overview.txt └── send_to_bob     ├── all_datasets_created_on_a_23rd     │   ├── 2015-10-23-dataset1.txt     │   ├── 2015-10-23-dataset2.txt     │   ├── 2015-10-23-dataset_overview.txt     │   ├── 2015-11-23-dataset1.txt     │   ├── 2015-11-23-dataset2.txt     │   └── 2015-11-23-dataset_overview.txt     └── all_november_files         ├── 2015-11-23-calibration.txt         ├── 2015-11-23-dataset1.txt         ├── 2015-11-23-dataset2.txt         └── 2015-11-23-dataset_overview.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"organizing-directories-and-files","dir":"Instructor","previous_headings":"","what":"Organizing Directories and Files","title":null,"text":"Jamie working project, sees files aren’t well organized: fructose.dat sucrose.dat files contain output data analysis. command(s) covered lesson need run commands produce output shown?","code":"$ ls -F analyzed/  fructose.dat    raw/   sucrose.dat $ ls -F analyzed/   raw/ $ ls analyzed fructose.dat    sucrose.dat"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":"reproduce-a-folder-structure","dir":"Instructor","previous_headings":"","what":"Reproduce a folder structure","title":null,"text":"’re starting new experiment like duplicate directory structure previous experiment can add new data. Assume previous experiment folder called 2016-05-18, contains data folder turn contains folders named raw processed contain data files. goal copy folder structure 2016-05-18 folder folder called 2016-05-20 final directory structure looks like : following set commands achieve objective? commands ?","code":"2016-05-20/ └── data    ├── processed    └── raw $ mkdir 2016-05-20 $ mkdir 2016-05-20/data $ mkdir 2016-05-20/data/processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ cd data $ mkdir raw processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20/data/processed $ mkdir -p 2016-05-20/data/raw $ mkdir -p 2016-05-20/data/processed $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ mkdir raw processed"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/03-create.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"cp [old] [new] copies file. mkdir [path] creates new directory. mv [old] [new] moves (renames) file directory. rm [path] removes (deletes) file. * matches zero characters filename, *.txt matches files ending .txt. ? matches single character filename, ?.txt matches .txt .txt. Use Control key may described many ways, including Ctrl-X, Control-X, ^X. shell trash bin: something deleted, ’s really gone. files’ names something.extension. extension isn’t required, doesn’t guarantee anything, normally used indicate type data file. Depending type work , may need powerful text editor Nano.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"why-isnt-it-doing-anything","dir":"Instructor","previous_headings":"","what":"Why Isn’t It Doing Anything?","title":null,"text":"happens command supposed process file, don’t give filename? example, type: don’t type *.pdb (anything else) command? Since doesn’t filenames, wc assumes supposed process input given command prompt, just sits waits us give data interactively. outside, though, see sitting , command doesn’t appear anything. make kind mistake, can escape state holding control key (Ctrl) pressing letter C : Ctrl+C. release keys.","code":"$ wc -l"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"files contains fewest lines? ’s easy question answer six files, 6000? first step toward solution run command: greater symbol, >, tells shell redirect command’s output file instead printing screen. command prints screen output, everything wc printed gone file lengths.txt instead. file doesn’t exist prior issuing command, shell create file. file exists already, silently overwritten, may lead data loss. Thus, redirect commands require caution. ls lengths.txt confirms file exists: can now send content lengths.txt screen using cat lengths.txt. cat command gets name ‘concatenate’ .e. join together, prints contents files one another. ’s one file case, cat just shows us contains:","code":"$ wc -l *.pdb > lengths.txt $ ls lengths.txt lengths.txt $ cat lengths.txt 20  cubane.pdb   12  ethane.pdb    9  methane.pdb   30  octane.pdb   21  pentane.pdb   15  propane.pdb  107  total"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"output-page-by-page","dir":"Instructor","previous_headings":"","what":"Output Page by Page","title":null,"text":"’ll continue use cat lesson, convenience consistency, disadvantage always dumps whole file onto screen. useful practice command less (e.g. less lengths.txt). displays screenful file, stops. can go forward one screenful pressing spacebar, back one pressing b. Press q quit.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"headingSolution1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Next ’ll use sort command sort contents lengths.txt file. first ’ll exercise learn little sort command: -n option specifies numerical rather alphanumerical sort. also use -n option specify sort numerical instead alphanumerical. change file; instead, sends sorted result screen: can put sorted list lines another temporary file called sorted-lengths.txt putting > sorted-lengths.txt command, just used > lengths.txt put output wc lengths.txt. ’ve done , can run another command called head get first lines sorted-lengths.txt: Using -n 1 head tells want first line file; -n 20 get first 20, . Since sorted-lengths.txt contains lengths files ordered least greatest, output head must file fewest lines. first example >, string ‘hello’ written testfile01.txt, file gets overwritten time run command. see second example >> operator also writes ‘hello’ file (case testfile02.txt), appends string file already exists (.e. run second time). Option 3 correct. option 1 correct run head command. option 2 correct run tail command. option 4 correct pipe output head tail -n 2 head -n 3 animals.csv | tail -n 2 > animals-subset.csv","code":"$ sort -n lengths.txt 9  methane.pdb  12  ethane.pdb  15  propane.pdb  20  cubane.pdb  21  pentane.pdb  30  octane.pdb 107  total $ sort -n lengths.txt > sorted-lengths.txt $ head -n 1 sorted-lengths.txt 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"what-does-sort--n-do","dir":"Instructor","previous_headings":"","what":"What Does sort -n Do?","title":null,"text":"file shell-lesson-data/exercise-data/numbers.txt contains following lines: run sort file, output : run sort -n file, get instead: Explain -n effect.","code":"10 2 19 22 6 10 19 2 22 6 2 6 10 19 22"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"redirecting-to-the-same-file","dir":"Instructor","previous_headings":"","what":"Redirecting to the same file","title":null,"text":"’s bad idea try redirecting output command operates file file. example: something like may give incorrect results /delete contents lengths.txt.","code":"$ sort -n lengths.txt > lengths.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"what-does-mean","dir":"Instructor","previous_headings":"","what":"What Does >> Mean?","title":null,"text":"seen use >, similar operator >> works slightly differently. ’ll learn differences two operators printing strings. can use echo command print strings e.g. Now test commands reveal difference two operators: : Hint: Try executing command twice row examining output files.","code":"$ echo The echo command prints text The echo command prints text $ echo hello > testfile01.txt $ echo hello >> testfile02.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"appending-data","dir":"Instructor","previous_headings":"","what":"Appending Data","title":null,"text":"already met head command, prints lines start file. tail similar, prints lines end file instead. Consider file shell-lesson-data/exercise-data/animal-counts/animals.csv. commands, select answer corresponds file animals-subset.csv: first three lines animals.csv last two lines animals.csv first three lines last two lines animals.csv second third lines animals.csv","code":"$ head -n 3 animals.csv > animals-subset.csv $ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"example finding file fewest lines, using two intermediate files lengths.txt sorted-lengths.txt store output. confusing way work even understand wc, sort, head , intermediate files make hard follow ’s going . can make easier understand running sort head together: vertical bar, |, two commands called pipe. tells shell want use output command left input command right. removed need sorted-lengths.txt file.","code":"$ sort -n lengths.txt | head -n 1 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nothing prevents us chaining pipes consecutively. can example send output wc directly sort, send resulting output head. removes need intermediate files. ’ll start using pipe send output wc sort: can send output another pipe, head, full pipeline becomes: exactly like mathematician nesting functions like log(3x) saying ‘log three times x’. case, algorithm ‘head sort line count *.pdb’. redirection pipes used last commands illustrated : Option 4 solution. pipe character | used connect output one command input another. > used redirect standard output file. Try shell-lesson-data/exercise-data/alkanes directory!","code":"$ wc -l *.pdb | sort -n 9 methane.pdb   12 ethane.pdb   15 propane.pdb   20 cubane.pdb   21 pentane.pdb   30 octane.pdb  107 total $ wc -l *.pdb | sort -n | head -n 1 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"piping-commands-together","dir":"Instructor","previous_headings":"","what":"Piping Commands Together","title":null,"text":"current directory, want find 3 files least number lines. command listed work? wc -l * > sort -n > head -n 3 wc -l * | sort -n | head -n 1-3 wc -l * | head -n 3 | sort -n wc -l * | sort -n | head -n 3","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"headingSolution5","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"idea linking programs together Unix successful. Instead creating enormous programs try many different things, Unix programmers focus creating lots simple tools one job well, work well . programming model called ‘pipes filters’. ’ve already seen pipes; filter program like wc sort transforms stream input stream output. Almost standard Unix tools can work way. Unless told otherwise, read standard input, something ’ve read, write standard output. key program reads lines text standard input writes lines text standard output can combined every program behaves way well. can write programs way people can put programs pipes multiply power. head command extracts first 5 lines animals.csv. , last 3 lines extracted previous 5 using tail command. sort -r command 3 lines sorted reverse order. Finally, output redirected file: final.txt. content file can checked executing cat final.txt. file contain following lines: Option 4. correct answer. difficulty understanding , try running commands, sub-sections pipelines (make sure shell-lesson-data/exercise-data/animal-counts directory).","code":"2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-05,raccoon,7 $ cut -d , -f 2 animals.csv | sort | uniq"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"pipe-reading-comprehension","dir":"Instructor","previous_headings":"","what":"Pipe Reading Comprehension","title":null,"text":"file called animals.csv (shell-lesson-data/exercise-data/animal-counts folder) contains following data: text passes pipes final redirect pipeline ? Note, sort -r command sorts reverse order. Hint: build pipeline one command time test understanding","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"pipe-construction","dir":"Instructor","previous_headings":"","what":"Pipe Construction","title":null,"text":"file animals.csv previous exercise, consider following command: cut command used remove ‘cut ’ certain sections line file, cut expects lines separated columns Tab character. character used way called delimiter. example use -d option specify comma delimiter character. also used -f option specify want extract second field (column). gives following output: uniq command filters adjacent matching lines file. extend pipeline (using uniq another command) find animals file contains (without duplicates names)?","code":"$ cut -d , -f 2 animals.csv deer rabbit raccoon rabbit deer fox rabbit bear"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"which-pipe","dir":"Instructor","previous_headings":"","what":"Which Pipe?","title":null,"text":"file animals.csv contains 8 lines data formatted follows: uniq command -c option gives count number times line occurs input. Assuming current directory shell-lesson-data/exercise-data/animal-counts, command use produce table shows total count type animal file? sort animals.csv | uniq -c sort -t, -k2,2 animals.csv | uniq -c cut -d, -f 2 animals.csv | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c | wc -l","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nelle run samples assay machines created 17 files north-pacific-gyre directory described earlier. quick check, starting shell-lesson-data directory, Nelle types: output 18 lines look like : Now types : Whoops: one files 60 lines shorter others. goes back checks , sees assay 8:00 Monday morning — someone probably using machine weekend, forgot reset . re-running sample, checks see files much data: numbers look good — ’s ‘Z’ third--last line? samples marked ‘’ ‘B’; convention, lab uses ‘Z’ indicate samples missing information. find others like , : Sure enough, checks log laptop, ’s depth recorded either samples. Since ’s late get information way, must exclude two files analysis. delete using rm, actually analyses might later depth doesn’t matter, instead, ’ll careful later select files using wildcard expressions NENE*.txt NENE*B.txt. remove .txt files one-character names correct answer shell expand * match everything current directory, command try remove matched files additional file called .txt shell expands *.* match filenames containing least one ., including processed files (.txt) raw files (.dat)","code":"$ cd north-pacific-gyre $ wc -l *.txt 300 NENE01729A.txt 300 NENE01729B.txt 300 NENE01736A.txt 300 NENE01751A.txt 300 NENE01751B.txt 300 NENE01812A.txt ... ... $ wc -l *.txt | sort -n | head -n 5 240 NENE02018B.txt  300 NENE01729A.txt  300 NENE01729B.txt  300 NENE01736A.txt  300 NENE01751A.txt $ wc -l *.txt | sort -n | tail -n 5 300 NENE02040B.txt  300 NENE02040Z.txt  300 NENE02043A.txt  300 NENE02043B.txt 5040 total $ ls *Z.txt NENE01971Z.txt    NENE02040Z.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":"removing-unneeded-files","dir":"Instructor","previous_headings":"","what":"Removing Unneeded Files","title":null,"text":"Suppose want delete processed data files, keep raw files processing script save storage. raw files end .dat processed files end .txt. following remove processed data files, processed data files? rm ?.txt rm *.txt rm * .txt rm *.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/04-pipefilter.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"wc counts lines, words, characters inputs. cat displays contents inputs. sort sorts inputs. head displays first 10 lines input. tail displays last 10 lines input. command > [file] redirects command’s output file (overwriting existing content). command >> [file] appends command’s output file. [first] | [second] pipeline: output first command used input second. best way use shell use pipes combine simple single-purpose programs (filters).","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"follow-the-prompt","dir":"Instructor","previous_headings":"","what":"Follow the Prompt","title":null,"text":"shell prompt changes $ > back typing loop. second prompt, >, different remind us haven’t finished typing complete command yet. semicolon, ;, can used separate two commands written single line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"same-symbols-different-meanings","dir":"Instructor","previous_headings":"","what":"Same Symbols, Different Meanings","title":null,"text":"see > used shell prompt, whereas > also used redirect output. Similarly, $ used shell prompt, , saw earlier, also used ask shell get value variable. shell prints > $ expects type something, symbol prompt. type > $ , instruction shell redirect output get value variable.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"write-your-own-loop","dir":"Instructor","previous_headings":"","what":"Write your own loop","title":null,"text":"write loop echoes 10 numbers 0 9?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"variables-in-loops","dir":"Instructor","previous_headings":"","what":"Variables in Loops","title":null,"text":"exercise refers shell-lesson-data/exercise-data/alkanes directory. ls *.pdb gives following output: output following code? Now, output following code? two loops give different outputs?","code":"cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb $ for datafile in *.pdb > do >     ls *.pdb > done $ for datafile in *.pdb > do >     ls $datafile > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"limiting-sets-of-files","dir":"Instructor","previous_headings":"","what":"Limiting Sets of Files","title":null,"text":"output running following loop shell-lesson-data/exercise-data/alkanes directory? files listed. files listed. cubane.pdb, octane.pdb pentane.pdb listed. cubane.pdb listed.","code":"$ for filename in c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"limiting-sets-of-files-1","dir":"Instructor","previous_headings":"","what":"Limiting Sets of Files (continued)","title":null,"text":"output differ using command instead? files listed. files listed time. files listed time. files cubane.pdb octane.pdb listed. file octane.pdb listed.","code":"$ for filename in *c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"saving-to-a-file-in-a-loop---part-one","dir":"Instructor","previous_headings":"","what":"Saving to a File in a Loop - Part One","title":null,"text":"shell-lesson-data/exercise-data/alkanes directory, effect loop? Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb, text propane.pdb saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, text three files concatenated saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb, text propane.pdb saved file called alkanes.pdb. None .","code":"for alkanes in *.pdb do     echo $alkanes     cat $alkanes > alkanes.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"saving-to-a-file-in-a-loop---part-two","dir":"Instructor","previous_headings":"","what":"Saving to a File in a Loop - Part Two","title":null,"text":"Also shell-lesson-data/exercise-data/alkanes directory, output following loop? text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb concatenated saved file called .pdb. text ethane.pdb saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb concatenated saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb printed screen saved file called .pdb.","code":"for datafile in *.pdb do     cat $datafile >> all.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"spaces-in-names","dir":"Instructor","previous_headings":"","what":"Spaces in Names","title":null,"text":"Spaces used separate elements list going loop . one elements contains space character, need surround quotes, thing loop variable. Suppose data files named: loop files, need add double quotes like : simpler avoid using spaces (special characters) filenames. files don’t exist, run code, head command unable find ; however, error message returned show name files expecting: Try removing quotes around $filename loop see effect quote marks spaces. Note get result loop command unicorn.dat run code creatures directory:","code":"red dragon.dat purple unicorn.dat $ for filename in \"red dragon.dat\" \"purple unicorn.dat\" > do >     head -n 100 \"$filename\" | tail -n 20 > done head: cannot open ‘red dragon.dat' for reading: No such file or directory head: cannot open ‘purple unicorn.dat' for reading: No such file or directory head: cannot open ‘red' for reading: No such file or directory head: cannot open ‘dragon.dat' for reading: No such file or directory head: cannot open ‘purple' for reading: No such file or directory CGGTACCGAA AAGGGTCGCG CAAGTGTTCC ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nelle now ready process data files using goostats.sh — shell script written supervisor. calculates statistics protein sample file takes two arguments: input file (containing raw data) output file (store calculated statistics) Since ’s still learning use shell, decides build required commands stages. first step make sure can select right input files — remember, ones whose names end ‘’ ‘B’, rather ‘Z’. Moving north-pacific-gyre directory, Nelle types: next step decide call files goostats.sh analysis program create. Prefixing input file’s name ‘stats’ seems simple, modifies loop : hasn’t actually run goostats.sh yet, now ’s sure can select right files generate right output filenames. Typing commands becoming tedious, though, Nelle worried making mistakes, instead re-entering loop, presses ↑. response, shell redisplays whole loop one line (using semi-colons separate pieces): Using ←, Nelle navigates echo command changes bash goostats.sh: presses Enter, shell runs modified command. However, nothing appears happen — output. moment, Nelle realizes since script doesn’t print anything screen longer, idea whether running, much less quickly. kills running command typing Ctrl+C, uses ↑ repeat command, edits read: runs program now, produces one line output every five seconds : 1518 times 5 seconds, divided 60, tells script take two hours run. final check, opens another terminal window, goes north-pacific-gyre, uses cat stats-NENE01729B.txt examine one output files. looks good, decides get coffee catch reading. second version one want run. prints screen everything enclosed quote marks, expanding loop variable name prefixed dollar sign. also modify create file .pdb, >> treated literally part string rather redirection instruction. first version appends output command echo cat $datafile file, .pdb. file just contain list; cat cubane.pdb, cat ethane.pdb, cat methane.pdb etc. Try versions see output! sure open .pdb file view contents. nested loop, .e. contained within another loop, species outer loop, inner loop (nested loop) iterates list temperatures, creates new directory combination. Try running code see directories created!","code":"$ cd $ cd Desktop/shell-lesson-data/north-pacific-gyre $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile > done NENE01729A.txt NENE01729B.txt NENE01736A.txt ... NENE02043A.txt NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile stats-$datafile > done NENE01729A.txt stats-NENE01729A.txt NENE01729B.txt stats-NENE01729B.txt NENE01736A.txt stats-NENE01736A.txt ... NENE02043A.txt stats-NENE02043A.txt NENE02043B.txt stats-NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done NENE01729A.txt NENE01729B.txt NENE01736A.txt ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"beginning-and-end","dir":"Instructor","previous_headings":"","what":"Beginning and End","title":null,"text":"can move beginning line shell typing Ctrl+end using Ctrl+E.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"those-who-know-history-can-choose-to-repeat-it","dir":"Instructor","previous_headings":"","what":"Those Who Know History Can Choose to Repeat It","title":null,"text":"Another way repeat previous work use history command get list last hundred commands executed, use !123 (‘123’ replaced command number) repeat one commands. example, Nelle types : can re-run goostats.sh files simply typing !459.","code":"$ history | tail -n 5 456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done 457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done 458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done 459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done 460  history | tail -n 5"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"other-history-commands","dir":"Instructor","previous_headings":"","what":"Other History Commands","title":null,"text":"number shortcut commands getting history. Ctrl+R enters history search mode ‘reverse--search’ finds recent command history matches text enter next. Press Ctrl+R one additional times search earlier matches. can use left right arrow keys choose line edit hit Return run command. !! retrieves immediately preceding command (may may find convenient using ↑) !$ retrieves last word last command. ’s useful often might expect: bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, can type less !$ look file stats-NENE01729B.txt, quicker ↑ editing command-line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"doing-a-dry-run","dir":"Instructor","previous_headings":"","what":"Doing a Dry Run","title":null,"text":"loop way many things — make many mistakes wrong thing. One way check loop echo commands run instead actually running . Suppose want preview commands following loop execute without actually running commands: difference two loops , one want run?","code":"$ for datafile in *.pdb > do >     cat $datafile >> all.pdb > done # Version 1 $ for datafile in *.pdb > do >     echo cat $datafile >> all.pdb > done # Version 2 $ for datafile in *.pdb > do >     echo \"cat $datafile >> all.pdb\" > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":"nested-loops","dir":"Instructor","previous_headings":"","what":"Nested Loops","title":null,"text":"Suppose want set directory structure organize experiments measuring reaction rate constants different compounds different temperatures. result following code:","code":"$ for species in cubane ethane methane > do >     for temperature in 25 30 37 40 >     do >         mkdir $species-$temperature >     done > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/05-loop.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"loop repeats commands every thing list. Every loop needs variable refer thing currently operating . Use $name expand variable (.e., get value). ${name} can also used. use spaces, quotes, wildcard characters ‘*’ ‘?’ filenames, complicates variable expansion. Give files consistent names easy match wildcard patterns make easy select looping. Use -arrow key scroll previous commands edit repeat . Use Ctrl+R search previously entered commands. Use history display recent commands, ![number] repeat command number.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"text-vs--whatever","dir":"Instructor","previous_headings":"","what":"Text vs. Whatever","title":null,"text":"usually call programs like Microsoft Word LibreOffice Writer “text editors”, need bit careful comes programming. default, Microsoft Word uses .docx files store text, also formatting information fonts, headings, . extra information isn’t stored characters doesn’t mean anything tools like head, expects input files contain nothing letters, digits, punctuation standard computer keyboard. editing programs, therefore, must either use plain text editor careful save files plain text.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"double-quotes-around-arguments","dir":"Instructor","previous_headings":"","what":"Double-Quotes Around Arguments","title":null,"text":"reason put loop variable inside double-quotes, case filename happens contain spaces, surround $1 double-quotes.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"list-unique-species","dir":"Instructor","previous_headings":"","what":"List Unique Species","title":null,"text":"Leah several hundred data files, formatted like : example type file given shell-lesson-data/exercise-data/animal-counts/animals.csv. can use command cut -d , -f 2 animals.csv | sort | uniq produce unique species animals.csv. order avoid type series commands every time, scientist may choose write shell script instead. Write shell script called species.sh takes number filenames command-line arguments uses variation command print list unique species appearing files separately.","code":"2013-11-05,deer,5 2013-11-05,rabbit,22 2013-11-05,raccoon,7 2013-11-06,rabbit,19 2013-11-06,deer,2 2013-11-06,fox,1 2013-11-07,rabbit,18 2013-11-07,bear,1"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"why-record-commands-in-the-history-before-running-them","dir":"Instructor","previous_headings":"","what":"Why Record Commands in the History Before Running Them?","title":null,"text":"run command: last command file history command , .e., shell added history command log actually running . fact, shell always adds commands log running . think ?","code":"$ history | tail -n 5 > recent.sh"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nelle’s supervisor insisted analytics must reproducible. easiest way capture steps script. First return Nelle’s project directory: creates file using nano … …contains following: saves file called -stats.sh can now re-first stage analysis typing: can also : output just number files processed rather names files processed. One thing note Nelle’s script lets person running decide files process. written : advantage always selects right files: doesn’t remember exclude ‘Z’ files. disadvantage always selects just files — can’t run files (including ‘Z’ files), ‘G’ ‘H’ files colleagues Antarctica producing, without editing script. wanted adventurous, modify script check command-line arguments, use NENE*.txt NENE*B.txt none provided. course, introduces another tradeoff flexibility complexity. correct answer 2. special variables $1, $2 $3 represent command line arguments given script, commands run : shell expand '*.pdb' enclosed quote marks. , first argument script '*.pdb' gets expanded within script head tail. first part pipeline, wc -l $1/*.$2 | sort -n, counts lines file sorts numerically (largest last). ’s one file, wc also outputs final summary line, giving total number lines across files. use tail -n 2 | head -n 1 throw away last line. wc -l $1/*.$2 | sort -n | tail -n 1 ’ll see final summary line: can build pipeline pieces sure understand output. case, shell expands wildcard *.pdb passing resulting list file names arguments script. Script 1 print list files containing dot name. arguments passed script actually used anywhere script. Script 2 print contents first 3 files .pdb file extension. $1, $2, $3 refer first, second, third argument respectively. Script 3 print arguments script (.e. .pdb files), followed .pdb. $@ refers arguments given shell script. -x option causes bash run debug mode. prints command run, help locate errors. example, can see echo isn’t printing anything. made typo loop variable name, variable datfile doesn’t exist, hence returning empty string.","code":"$ cd ../../north-pacific-gyre/ $ nano do-stats.sh # Calculate stats for data files. for datafile in \"$@\" do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ bash do-stats.sh NENE*A.txt NENE*B.txt $ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l # Calculate stats for Site A and Site B data files. for datafile in NENE*A.txt NENE*B.txt do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb # Shell script which takes two arguments: #    1. a directory name #    2. a file extension # and prints the name of the file in that directory # with the most lines which matches the file extension.  wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1 cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"variables-in-shell-scripts","dir":"Instructor","previous_headings":"","what":"Variables in Shell Scripts","title":null,"text":"alkanes directory, imagine shell script called script.sh containing following commands: alkanes directory, type following command: following outputs expect see? lines first last lines file ending .pdb alkanes directory first last line file ending .pdb alkanes directory first last line file alkanes directory error quotes around *.pdb","code":"head -n $2 $1 tail -n $3 $1 $ bash script.sh '*.pdb' 1 1"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"find-the-longest-file-with-a-given-extension","dir":"Instructor","previous_headings":"","what":"Find the Longest File With a Given Extension","title":null,"text":"Write shell script called longest.sh takes name directory filename extension arguments, prints name file lines directory extension. example: print name .pdb file shell-lesson-data/exercise-data/alkanes lines. Feel free test script another directory e.g.","code":"$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb $ bash longest.sh shell-lesson-data/exercise-data/writing txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"script-reading-comprehension","dir":"Instructor","previous_headings":"","what":"Script Reading Comprehension","title":null,"text":"question, consider shell-lesson-data/exercise-data/alkanes directory . contains number .pdb files addition files may created. Explain following three scripts run bash script1.sh *.pdb, bash script2.sh *.pdb, bash script3.sh *.pdb respectively.","code":"# Script 1 echo *.* # Script 2 for filename in $1 $2 $3 do     cat $filename done # Script 3 echo $@.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":"debugging-scripts","dir":"Instructor","previous_headings":"","what":"Debugging Scripts","title":null,"text":"Suppose saved following script file called -errors.sh Nelle’s north-pacific-gyre directory: run north-pacific-gyre directory: output blank. figure , re-run script using -x option: output showing ? line responsible error?","code":"# Calculate stats for data files. for datafile in \"$@\" do     echo $datfile     bash goostats.sh $datafile stats-$datafile done $ bash do-errors.sh NENE*A.txt NENE*B.txt $ bash -x do-errors.sh NENE*A.txt NENE*B.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/06-script.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Save commands files (usually called shell scripts) re-use. bash [filename] runs commands saved file. $@ refers shell script’s command-line arguments. $1, $2, etc., refer first command-line argument, second command-line argument, etc. Place variables quotes values might spaces . Letting users decide files process flexible consistent built-Unix commands.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"using-grep","dir":"Instructor","previous_headings":"","what":"Using grep","title":null,"text":"command result following output: grep \"\" haiku.txt grep -E \"\" haiku.txt grep -w \"\" haiku.txt grep -\"\" haiku.txt","code":"and the presence of absence:"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"wildcards","dir":"Instructor","previous_headings":"","what":"Wildcards","title":null,"text":"grep‘s real power doesn’t come options, though; comes fact patterns can include wildcards. (technical name regular expressions, ’re’ ‘grep’ stands .) Regular expressions complex powerful; want complex searches, please look lesson website. taster, can find lines ‘o’ second position like : use -E option put pattern quotes prevent shell trying interpret . (pattern contained *, example, shell try expand running grep.) ^ pattern anchors match start line. . matches single character (just like ? shell), o matches actual ‘o’.","code":"$ grep -E \"^.o\" haiku.txt You bring fresh toner. Today it is not working Software is like that."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"tracking-a-species","dir":"Instructor","previous_headings":"","what":"Tracking a Species","title":null,"text":"Leah several hundred data files saved one directory, formatted like : wants write shell script takes species first command-line argument directory second argument. script return one file called <species>.txt containing list dates number species seen date. example using data shown , rabbit.txt contain: , line contains individual command, pipe. Arrange sequence one command order achieve Leah’s goal: Hint: use man grep look grep text recursively directory man cut select one field line. example file provided shell-lesson-data/exercise-data/animal-counts/animals.csv","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 2012-11-05,22 2012-11-06,19 2012-11-07,16 cut -d : -f 2 > | grep -w $1 -r $2 | $1.txt cut -d , -f 1,3"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"little-women","dir":"Instructor","previous_headings":"","what":"Little Women","title":null,"text":"friend, just finished reading Little Women Louisa May Alcott, argument. four sisters book, Jo, Meg, Beth, Amy, friend thinks Jo mentioned. , however, certain Amy. Luckily, file LittleWomen.txt containing full text novel (shell-lesson-data/exercise-data/writing/LittleWomen.txt). Using loop, tabulate number times four sisters mentioned? Hint: one solution might employ commands grep wc |, another might utilize grep options. often one way solve programming task, particular solution usually chosen based combination yielding correct result, elegance, readability, speed.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"listing-vs--finding","dir":"Instructor","previous_headings":"","what":"Listing vs. Finding","title":null,"text":"ls find can made similar things given right options, normal circumstances, ls lists everything can, find searches things certain properties shows .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"matching-and-subtracting","dir":"Instructor","previous_headings":"","what":"Matching and Subtracting","title":null,"text":"-v option grep inverts pattern matching, lines match pattern printed. Given , following commands find .dat files creatures except unicorn.dat? thought answer, can test commands shell-lesson-data/exercise-data directory. find creatures -name \"*.dat\" | grep -v unicorn find creatures -name *.dat | grep -v unicorn grep -v \"unicorn\" $(find creatures -name \"*.dat\") None .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"binary-files","dir":"Instructor","previous_headings":"","what":"Binary Files","title":null,"text":"focused exclusively finding patterns text files. data stored images, databases, format? handful tools extend grep handle non text formats. generalizable approach convert data text, extract text-like elements data. one hand, makes simple things easy . hand, complex things usually impossible. example, ’s easy enough write program extract X Y dimensions image files grep play , write something find values spreadsheet whose cells contained formulas? last option recognize shell text processing limits, use another programming language. time comes , don’t hard shell. Many modern programming languages borrowed lot ideas , imitation also sincerest form praise.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":"find-pipeline-reading-comprehension","dir":"Instructor","previous_headings":"","what":"find Pipeline Reading Comprehension","title":null,"text":"Write short explanatory comment following shell script:","code":"wc -l $(find . -name \"*.dat\") | sort -n"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/07-find.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"find finds files specific properties match patterns. grep selects lines files match patterns. --help option supported many bash commands, programs can run within Bash, display information use commands programs. man [command] displays manual page given command. $([command]) inserts command’s output place.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/404.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"seem find page looking . tips may help: try going back previous page navigate page using navigation bar left. URL ends /index.html, try removing . head home page lesson came link lesson, please contact lesson maintainers using links foot page.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Carpentries (Software Carpentry, Data Carpentry, Library Carpentry) instructional material made available Creative Commons Attribution license. following human-readable summary (substitute ) full legal text CC 4.0 license. free: Share—copy redistribute material medium format Adapt—remix, transform, build upon material purpose, even commercially. licensor revoke freedoms long follow license terms. following terms: Attribution—must give appropriate credit (mentioning work derived work Copyright (c) Carpentries , practical, linking https://carpentries.org/), provide link license, indicate changes made. may reasonable manner, way suggests licensor endorses use. additional restrictions—may apply legal terms technological measures legally restrict others anything license permits. understanding : Notices: comply license elements material public domain use permitted applicable exception limitation. warranties given. license may give permissions necessary intended use. example, rights publicity, privacy, moral rights may limit use material.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Except otherwise noted, example programs software provided Carpentries made available OSI-approved MIT license. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"“Carpentries”, “Software Carpentry”, “Data Carpentry”, “Library Carpentry” respective logos registered trademarks Community Initiatives.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Introducing Shell  command shell use one? Explain shell relates keyboard, screen, operating system, users’ programs. Explain command-line interfaces used instead graphical interfaces. Nelle Nemo, marine biologist, just returned six-month survey North Pacific Gyre, sampling gelatinous marine life Great Pacific Garbage Patch. 1520 samples ’s run assay machine measure relative abundance 300 proteins. needs run 1520 files imaginary program called goostats.sh. addition huge task, write results end month, paper can appear special issue Aquatic Goo Letters. Nelle chooses run goostats.sh hand using GUI, ’ll select open file 1520 times. goostats.sh takes 30 seconds run file, whole process take 12 hours Nelle’s attention. shell, Nelle can instead assign computer mundane task focuses attention writing paper. next lessons explore ways Nelle can achieve . specifically, lessons explain can use command shell run goostats.sh program, using loops automate repetitive steps entering file names, computer can work writes paper. bonus, put processing pipeline together, able use whenever collects data. order achieve task, Nelle needs know : navigate file/directory create file/directory check length file chain commands together retrieve set files iterate files run shell script containing pipeline","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"background","dir":"Instructor","previous_headings":"","what":"Background","title":null,"text":"Humans computers commonly interact many different ways, keyboard mouse, touch screen interfaces, using speech recognition systems. widely used way interact personal computers called graphical user interface (GUI). GUI, give instructions clicking mouse using menu-driven interactions. visual aid GUI makes intuitive learn, way delivering instructions computer scales poorly. Imagine following task: literature search, copy third line one thousand text files one thousand different directories paste single file. Using GUI, clicking desk several hours, potentially also commit error process completing repetitive task. take advantage Unix shell. Unix shell command-line interface (CLI) scripting language, allowing repetitive tasks done automatically fast. proper commands, shell can repeat tasks without modification many times want. Using shell, task literature example can accomplished seconds.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"the-shell","dir":"Instructor","previous_headings":"","what":"The Shell","title":null,"text":"shell program users can type commands. shell, ’s possible invoke complicated programs like climate modeling software simple commands create empty directory one line code. popular Unix shell Bash (Bourne SHell — -called ’s derived shell written Stephen Bourne). Bash default shell modern implementations Unix packages provide Unix-like tools Windows. Note ‘Git Bash’ piece software enables Windows users use Bash like interface interacting Git. Using shell take effort time learn. GUI presents choices select, CLI choices automatically presented , must learn commands like new vocabulary language ’re studying. However, unlike spoken language, small number “words” (.e. commands) gets long way, ’ll cover essential today. grammar shell allows combine existing tools powerful pipelines handle large volumes data automatically. Sequences commands can written script, improving reproducibility workflows. addition, command line often easiest way interact remote machines supercomputers. Familiarity shell near essential run variety specialized tools resources including high-performance computing systems. clusters cloud computing systems become popular scientific data crunching, able interact shell becoming necessary skill. can build command-line skills covered tackle wide range scientific questions computational challenges. Let’s get started. shell first opened, presented prompt, indicating shell waiting input. shell typically uses $ prompt, may use different symbol. examples lesson, ’ll show prompt $. importantly, type prompt typing commands. type command follows prompt. rule applies lessons lessons sources. Also note type command, press Enter key execute . prompt followed text cursor, character indicates position typing appear. cursor usually flashing solid block, can also underscore pipe. may seen text editor program, example. Note prompt might look little different. particular, popular shell environments default put user name host name $. prompt might look like, e.g.: prompt might even include . worry prompt just short $. lesson depend additional information also get way. important item focus $ character see later . let’s try first command, ls, short listing. command list contents current directory:","code":"$ nelle@localhost $ $ ls Desktop     Downloads   Movies      Pictures Documents   Library     Music       Public"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"command-not-found","dir":"Instructor","previous_headings":"","what":"Command not found","title":null,"text":"shell can’t find program whose name command typed, print error message : might happen command mis-typed program corresponding command installed.","code":"$ ks ks: command not found"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nelle Nemo, marine biologist, just returned six-month survey North Pacific Gyre, sampling gelatinous marine life Great Pacific Garbage Patch. 1520 samples ’s run assay machine measure relative abundance 300 proteins. needs run 1520 files imaginary program called goostats.sh. addition huge task, write results end month, paper can appear special issue Aquatic Goo Letters. Nelle chooses run goostats.sh hand using GUI, ’ll select open file 1520 times. goostats.sh takes 30 seconds run file, whole process take 12 hours Nelle’s attention. shell, Nelle can instead assign computer mundane task focuses attention writing paper. next lessons explore ways Nelle can achieve . specifically, lessons explain can use command shell run goostats.sh program, using loops automate repetitive steps entering file names, computer can work writes paper. bonus, put processing pipeline together, able use whenever collects data. order achieve task, Nelle needs know : navigate file/directory create file/directory check length file chain commands together retrieve set files iterate files run shell script containing pipeline","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"shell program whose primary purpose read commands run programs. lesson uses Bash, default shell many implementations Unix. Programs can run Bash entering commands command-line prompt. shell’s main advantages high action--keystroke ratio, support automating repetitive tasks, capacity access networked machines. significant challenge using shell can knowing commands need run run .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Navigating Files Directories  can move around computer? can see files directories ? can specify location file directory computer? Explain similarities differences file directory. Translate absolute path relative path vice versa. Construct absolute relative paths identify specific files directories. Use options arguments change behaviour shell command. Demonstrate use tab completion explain advantages. Introducing navigating filesystem shell (covered Navigating Files Directories section) can confusing. may terminal GUI file explorer open side side learners can see content file structure ’re using terminal navigate system. part operating system responsible managing files directories called file system. organizes data files, hold information, directories (also called ‘folders’), hold files directories. Several commands frequently used create, inspect, rename, delete files directories. start exploring , ’ll go open shell window. First, let’s find running command called pwd (stands ‘print working directory’). Directories like places — time using shell, exactly one place called current working directory. Commands mostly read write files current working directory, .e. ‘’, knowing running command important. pwd shows : , computer’s response /Users/nelle, Nelle’s home directory: understand ‘home directory’ , let’s look file system whole organized. sake example, ’ll illustrating filesystem scientist Nelle’s computer. illustration, ’ll learning commands explore filesystem, constructed similar way, exactly identical. Nelle’s computer, filesystem looks like : filesystem looks like upside tree. topmost directory root directory holds everything else. refer using slash character, /, ; character leading slash /Users/nelle. Inside directory several directories: bin (built-programs stored), data (miscellaneous data files), Users (users’ personal directories located), tmp (temporary files don’t need stored long-term), . know current working directory /Users/nelle stored inside /Users /Users first part name. Similarly, know /Users stored inside root directory / name begins /. Underneath /Users, find one directory user account Nelle’s machine, colleagues imhotep larry. user imhotep’s files stored /Users/imhotep, user larry’s /Users/larry, Nelle’s /Users/nelle. Nelle user examples ; therefore, get /Users/nelle home directory. Typically, open new command prompt, home directory start. Now let’s learn command let us see contents filesystem. can see ’s home directory running ls: (, results may slightly different depending operating system customized filesystem.) ls prints names files directories current directory. can make output comprehensible using -F option tells ls classify output adding marker file directory names indicate : trailing / indicates directory @ indicates link * indicates executable Depending shell’s default settings, shell might also use colors indicate whether entry file directory. , can see home directory contains sub-directories. names output don’t classification symbol files current working directory. now encountered commands, options, arguments, perhaps useful formalise terminology. Consider command general example command, dissect component parts: ls command, option -F argument /. ’ve already encountered options either start single dash (-), known short options, two dashes (--), known long options. [Options] change behavior command Arguments tell command operate (e.g. files directories). Sometimes options arguments referred parameters. command can called one option one argument, command doesn’t always require argument option. might sometimes see options referred switches flags, especially options take argument. lesson stick using term option. part separated spaces. omit space ls -F shell look command called ls-F, doesn’t exist. Also, capitalization can important. example, ls -s display size files directories alongside names, ls -S sort files directories size, shown : Note sizes returned ls -s blocks. defined differently different operating systems, may obtain figures example. Putting together, command ls -F / gives us listing files directories root directory /. example output might get command given :","code":"$ pwd /Users/nelle $ ls Applications Documents    Library      Music        Public Desktop      Downloads    Movies       Pictures $ ls -F Applications/ Documents/    Library/      Music/        Public/ Desktop/      Downloads/    Movies/       Pictures/ $ ls -F / $ cd ~/Desktop/shell-lesson-data $ ls -s exercise-data total 28  4 animal-counts   4 creatures  12 numbers.txt   4 alkanes   4 writing $ ls -S exercise-data animal-counts  creatures  alkanes  writing  numbers.txt $ ls -F / Applications/         System/ Library/              Users/ Network/              Volumes/"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"home-directory-variation","dir":"Instructor","previous_headings":"","what":"Home Directory Variation","title":null,"text":"home directory path look different different operating systems. Linux, may look like /home/nelle, Windows, similar C:\\Documents Settings\\nelle C:\\Users\\nelle. (Note may look slightly different different versions Windows.) future examples, ’ve used Mac output default - Linux Windows output may differ slightly generally similar. also assume pwd command returns user’s home directory. pwd returns something different, may need navigate using cd commands lesson work written. See Exploring Directories details cd command.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"slashes","dir":"Instructor","previous_headings":"","what":"Slashes","title":null,"text":"Notice two meanings / character. appears front file directory name, refers root directory. appears inside path, ’s just separator.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"clearing-your-terminal","dir":"Instructor","previous_headings":"","what":"Clearing your terminal","title":null,"text":"screen gets cluttered, can clear terminal using clear command. can still access previous commands using ↑ ↓ move line--line, scrolling terminal.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"getting-help","dir":"Instructor","previous_headings":"","what":"Getting help","title":null,"text":"ls lots options. two common ways find use command options accepts — depending environment, might find one ways works: can pass --help option command (available Linux Git Bash), example: can read manual man (available Linux macOS): ’ll describe ways next.","code":"$ ls --help $ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"help-for-built-in-commands","dir":"Instructor","previous_headings":"","what":"Help for built-in commands","title":null,"text":"commands built Bash shell, rather existing separate programs filesystem. One example cd (change directory) command. get message like manual entry cd, try help cd instead. help command get usage information Bash built-ins.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"the---help-option","dir":"Instructor","previous_headings":"Getting help","what":"The --help option","title":null,"text":"bash commands programs people written run within bash, support --help option displays information use command program.","code":"$ ls --help Usage: ls [OPTION]... [FILE]... List information about the FILEs (the current directory by default). Sort entries alphabetically if neither -cftuvSUX nor --sort is specified.  Mandatory arguments to long options are mandatory for short options, too.   -a, --all                  do not ignore entries starting with .   -A, --almost-all           do not list implied . and ..       --author               with -l, print the author of each file   -b, --escape               print C-style escapes for nongraphic characters       --block-size=SIZE      scale sizes by SIZE before printing them; e.g.,                                '--block-size=M' prints sizes in units of                                1,048,576 bytes; see SIZE format below   -B, --ignore-backups       do not list implied entries ending with ~   -c                         with -lt: sort by, and show, ctime (time of last                                modification of file status information);                                with -l: show ctime and sort by name;                                otherwise: sort by ctime, newest first   -C                         list entries by columns       --color[=WHEN]         colorize the output; WHEN can be 'always' (default                                if omitted), 'auto', or 'never'; more info below   -d, --directory            list directories themselves, not their contents   -D, --dired                generate output designed for Emacs' dired mode   -f                         do not sort, enable -aU, disable -ls --color   -F, --classify             append indicator (one of */=>@|) to entries ...        ...        ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"unsupported-command-line-options","dir":"Instructor","previous_headings":"","what":"Unsupported command-line options","title":null,"text":"try use option supported, ls commands usually print error message similar :","code":"$ ls -j ls: invalid option -- 'j' Try 'ls --help' for more information."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"the-man-command","dir":"Instructor","previous_headings":"Getting help","what":"The man command","title":null,"text":"way learn ls type command turn terminal page description ls command options. navigate man pages, may use ↑ ↓ move line--line, try B Spacebar skip full page. search character word man pages, use / followed character word searching . Sometimes search result multiple hits. , can move hits using N (moving forward) Shift+N (moving backward). quit man pages, press Q. -l option makes ls use long listing format, showing file/directory names also additional information, file size time last modification. use -h option -l option, makes file size ‘human readable’, .e. displaying something like 5.3K instead 5369. recently changed file listed last using -rt. can useful finding recent edits checking see new output file written.","code":"$ man ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"manual-pages-on-the-web","dir":"Instructor","previous_headings":"","what":"Manual pages on the web","title":null,"text":"course, third way access help commands: searching internet via web browser. using internet search, including phrase unix man page search query help find relevant results. GNU provides links manuals including core GNU utilities, covers many commands introduced within lesson.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"exploring-more-ls-options","dir":"Instructor","previous_headings":"","what":"Exploring More ls Options","title":null,"text":"can also use two options time. command ls used -l option? use -l -h option? output properties cover lesson (file permissions ownership), rest useful nevertheless.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"listing-in-reverse-chronological-order","dir":"Instructor","previous_headings":"","what":"Listing in Reverse Chronological Order","title":null,"text":"default, ls lists contents directory alphabetical order name. command ls -t lists items time last change instead alphabetically. command ls -r lists contents directory reverse order. file displayed last combine -t -r options? Hint: may need use -l option see last changed dates.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"exploring-other-directories","dir":"Instructor","previous_headings":"","what":"Exploring Other Directories","title":null,"text":"can use ls current working directory, can use list contents different directory. Let’s take look Desktop directory running ls -F Desktop, .e., command ls -F option argument Desktop. argument Desktop tells ls want listing something current working directory: Note directory named Desktop exist current working directory, command return error. Typically, Desktop directory exists home directory, assume current working directory bash shell. output list files sub-directories Desktop directory, including shell-lesson-data directory downloaded setup lesson. (systems, contents Desktop directory shell show icons graphical user interface behind open windows. See case .) Organizing things hierarchically helps us keep track work. ’s possible put hundreds files home directory just ’s possible pile hundreds printed papers desk, ’s much easier find things ’ve organized sensibly-named subdirectories. Now know shell-lesson-data directory located Desktop directory, can two things. First, using strategy , can look contents passing directory name ls: Second, can actually change location different directory, longer located home directory. command change locations cd followed directory name change working directory. cd stands ‘change directory’, bit misleading. command doesn’t change directory; changes shell’s current working directory. words changes shell’s settings directory . cd command akin double-clicking folder graphical interface get folder. Let’s say want move exercise-data directory saw . can use following series commands get : commands move us home directory Desktop directory, shell-lesson-data directory, exercise-data directory. notice cd doesn’t print anything. normal. Many shell commands output anything screen successfully executed. run pwd , can see now /Users/nelle/Desktop/shell-lesson-data/exercise-data. run ls -F without arguments now, lists contents /Users/nelle/Desktop/shell-lesson-data/exercise-data, ’s now : now know go directory tree (.e. go subdirectory), go (.e. leave directory go parent directory)? might try following: get error! ? methods far, cd can see sub-directories inside current directory. different ways see directories current location; ’ll start simplest. shortcut shell move one directory level. works follows: .. special directory name meaning “directory containing one”, succinctly, parent current directory. Sure enough, run pwd running cd .., ’re back /Users/nelle/Desktop/shell-lesson-data: special directory .. doesn’t usually show run ls. want display , can add -option ls -F: -stands ‘show ’ (including hidden files); forces ls show us file directory names begin ., .. (, ’re /Users/nelle, refers /Users directory). can see, also displays another special directory ’s just called ., means ‘current working directory’. may seem redundant name , ’ll see uses soon. Note command line tools, multiple options can combined single - spaces options; ls -F -equivalent ls -Fa. three commands basic commands navigating filesystem computer: pwd, ls, cd. Let’s explore variations commands. happens type cd , without giving directory? can check happened? pwd gives us answer! turns cd without argument return home directory, great ’ve got lost filesystem. Let’s try returning exercise-data directory . Last time, used three commands, can actually string together list directories move exercise-data one step: Check ’ve moved right place running pwd ls -F. want move one level data directory, use cd ... another way move directory, regardless current location. far, specifying directory names, even directory path (), using relative paths. use relative path command like ls cd, tries find location , rather root file system. However, possible specify absolute path directory including entire path root directory, indicated leading slash. leading / tells computer follow path root file system, always refers exactly one directory, matter run command. allows us move shell-lesson-data directory anywhere filesystem (including inside exercise-data). find absolute path ’re looking , can use pwd extract piece need move shell-lesson-data. Run pwd ls -F ensure ’re directory expect. : . stands current directory. : / stands root directory. : Nelle’s home directory /Users/nelle. : command goes two levels, .e. ends /Users. Yes: ~ stands user’s home directory, case /Users/nelle. : command navigate directory home current directory exists. Yes: unnecessarily complicated, correct. Yes: shortcut go back user’s home directory. Yes: goes one level. : directory backup /Users. : content Users/thing/backup, .., asked one level . : see previous explanation. Yes: ../backup/ refers /Users/backup/. : pwd name directory. Yes: ls without directory argument lists files directories current directory. Yes: uses absolute path explicitly.","code":"$ ls -F Desktop shell-lesson-data/ $ ls -F Desktop/shell-lesson-data exercise-data/  north-pacific-gyre/ $ cd Desktop $ cd shell-lesson-data $ cd exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ ls -F alkanes/  animal-counts/  creatures/  numbers.txt  writing/ $ cd shell-lesson-data -bash: cd: shell-lesson-data: No such file or directory $ cd .. $ pwd /Users/nelle/Desktop/shell-lesson-data $ ls -F -a ./  ../  exercise-data/  north-pacific-gyre/ $ cd $ pwd /Users/nelle $ cd Desktop/shell-lesson-data/exercise-data $ pwd /Users/nelle/Desktop/shell-lesson-data/exercise-data $ cd /Users/nelle/Desktop/shell-lesson-data"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"other-hidden-files","dir":"Instructor","previous_headings":"","what":"Other Hidden Files","title":null,"text":"addition hidden directories .. ., may also see file called .bash_profile. file usually contains shell configuration settings. may also see files directories beginning .. usually files directories used configure different programs computer. prefix . used prevent configuration files cluttering terminal standard ls command used.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"two-more-shortcuts","dir":"Instructor","previous_headings":"","what":"Two More Shortcuts","title":null,"text":"shell interprets tilde (~) character start path mean “current user’s home directory”. example, Nelle’s home directory /Users/nelle, ~/data equivalent /Users/nelle/data. works first character path; //~/elsewhere //Users/nelle/elsewhere. Another shortcut - (dash) character. cd translate - previous directory , faster remember, type, full path. efficient way moving back forth two directories – .e. execute cd - twice, end back starting directory. difference cd .. cd - former brings , latter brings back. Try ! First navigate ~/Desktop/shell-lesson-data (already ). cd exercise-data/creatures directory Now run ’ll see ’re back ~/Desktop/shell-lesson-data. Run cd - ’re back ~/Desktop/shell-lesson-data/exercise-data/creatures","code":"$ cd ~/Desktop/shell-lesson-data $ cd exercise-data/creatures $ cd -"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"absolute-vs-relative-paths","dir":"Instructor","previous_headings":"","what":"Absolute vs Relative Paths","title":null,"text":"Starting /Users/nelle/data, following commands Nelle use navigate home directory, /Users/nelle? cd . cd / cd /home/nelle cd ../.. cd ~ cd home cd ~/data/.. cd cd ..","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"relative-path-resolution","dir":"Instructor","previous_headings":"","what":"Relative Path Resolution","title":null,"text":"Using filesystem diagram , pwd displays /Users/thing, ls -F ../backup display? ../backup: file directory 2012-12-01 2013-01-08 2013-01-27 2012-12-01/ 2013-01-08/ 2013-01-27/ original/ pnas_final/ pnas_sub/","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"ls-reading-comprehension","dir":"Instructor","previous_headings":"","what":"ls Reading Comprehension","title":null,"text":"Using filesystem diagram , pwd displays /Users/backup, -r tells ls display things reverse order, command(s) result following output: ls pwd ls -r -F ls -r -F /Users/backup","code":"pnas_sub/ pnas_final/ original/"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"now encountered commands, options, arguments, perhaps useful formalise terminology. Consider command general example command, dissect component parts: ls command, option -F argument /. ’ve already encountered options either start single dash (-), known short options, two dashes (--), known long options. [Options] change behavior command Arguments tell command operate (e.g. files directories). Sometimes options arguments referred parameters. command can called one option one argument, command doesn’t always require argument option. might sometimes see options referred switches flags, especially options take argument. lesson stick using term option. part separated spaces. omit space ls -F shell look command called ls-F, doesn’t exist. Also, capitalization can important. example, ls -s display size files directories alongside names, ls -S sort files directories size, shown : Note sizes returned ls -s blocks. defined differently different operating systems, may obtain figures example. Putting together, command ls -F / gives us listing files directories root directory /. example output might get command given :","code":"$ ls -F / $ cd ~/Desktop/shell-lesson-data $ ls -s exercise-data total 28  4 animal-counts   4 creatures  12 numbers.txt   4 alkanes   4 writing $ ls -S exercise-data animal-counts  creatures  alkanes  writing  numbers.txt $ ls -F / Applications/         System/ Library/              Users/ Network/              Volumes/"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"when-to-use-short-or-long-options","dir":"Instructor","previous_headings":"","what":"When to use short or long options","title":null,"text":"options exist short long options: Use short option typing commands directly shell minimize keystrokes get task done faster. Use long option scripts provide clarity. read many times typed .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"nelles-pipeline-organizing-files","dir":"Instructor","previous_headings":"","what":"Nelle’s Pipeline: Organizing Files","title":null,"text":"Knowing much files directories, Nelle ready organize files protein assay machine create. creates directory called north-pacific-gyre (remind data came ), contain data files assay machine data processing scripts. physical samples labelled according lab’s convention unique ten-character ID, ‘NENE01729A’. ID used collection log record location, time, depth, characteristics sample, decides use within filename data file. Since output assay machine plain text, call files NENE01729A.txt, NENE01812A.txt, . 1520 files go directory. Now current directory shell-lesson-data, Nelle can see files using command: command lot type, can let shell work called tab completion. types: presses Tab (tab key keyboard), shell automatically completes directory name : Pressing Tab nothing, since multiple possibilities; pressing Tab twice brings list files. Nelle presses G presses Tab , shell append ‘goo’ since files start ‘g’ share first three characters ‘goo’. see files, can press Tab twice . called tab completion, see many tools go .","code":"$ ls north-pacific-gyre/ $ ls nor $ ls north-pacific-gyre/ $ ls north-pacific-gyre/goo ls north-pacific-gyre/goo goodiff.sh   goostats.sh"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"file system responsible managing information disk. Information stored files, stored directories (folders). Directories can also store directories, form directory tree. pwd prints user’s current working directory. ls [path] prints listing specific file directory; ls lists current working directory. cd [path] changes current working directory. commands take options begin single -. Directory names path separated / Unix, \\ Windows. / root directory whole file system. absolute path specifies location root file system. relative path specifies location starting current location. . means ‘current directory’; .. means ‘directory current one’.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Working Files Directories  can create, copy, delete files directories? can edit files? Create directory hierarchy matches given diagram. Create files hierarchy using editor copying renaming existing files. Delete, copy move specified files /directories. now know explore files directories, create first place? episode learn creating moving files directories, using exercise-data/writing directory example. Returning shell-lesson-data/exercise-data/writing directory, thesis directory file draft.txt isn’t particularly informative name, let’s change file’s name using mv, short ‘move’: first argument tells mv ’re ‘moving’, second ’s go. case, ’re moving thesis/draft.txt thesis/quotes.txt, effect renaming file. Sure enough, ls shows us thesis now contains one file called quotes.txt: One must careful specifying target file name, since mv silently overwrite existing file name, lead data loss. default, mv ask confirmation overwriting files. However, additional option, mv -(mv --interactive), cause mv request confirmation. Note mv also works directories. Let’s move quotes.txt current working directory. use mv , time ’ll use just name directory second argument tell mv want keep filename put file somewhere new. (command called ‘move’.) case, directory name use special directory name . mentioned earlier. effect move file directory current working directory. ls now shows us thesis empty: Alternatively, can confirm file quotes.txt longer present thesis directory explicitly trying list : ls filename directory argument lists requested file directory. file given argument doesn’t exist, shell returns error saw . can use see quotes.txt now present current directory: Recall .. refers parent directory (.e. one current directory) . refers current directory. cp command works much like mv, except copies file instead moving . can check right thing using ls two paths arguments — like Unix commands, ls can given multiple paths : can also copy directory contents using recursive option -r, e.g. back directory: can check result listing contents thesis thesis_backup directory: important include -r flag. want copy directory omit option see message directory omitted -r specified. . create file correct name, incorrectly named file still exists directory need deleted. Yes, work rename file. , period(.) indicates move file, provide new file name; identical file names created. , period(.) indicates copy file, provide new file name; identical file names created. start /Users/jamie/data directory, create new folder called recombined. second line moves (mv) file proteins.dat new folder (recombined). third line makes copy file just moved. tricky part file copied . Recall .. means ‘go level’, copied file now /Users/jamie. Notice .. interpreted respect current working directory, respect location file copied. , thing show using ls (/Users/jamie/data) recombined folder. , see explanation . proteins-saved.dat located /Users/jamie Yes , see explanation . proteins.dat located /Users/jamie/data/recombined , see explanation . proteins-saved.dat located /Users/jamie Returning shell-lesson-data/exercise-data/writing directory, let’s tidy directory removing quotes.txt file created. Unix command ’ll use rm (short ‘remove’): can confirm file gone using ls: -option prompt (every) removal (use Y confirm deletion N keep file). Unix shell doesn’t trash bin, files removed disappear forever. using -option, chance check deleting files want remove. try remove thesis directory using rm thesis, get error message: happens rm default works files, directories. rm can remove directory contents use recursive option -r, without confirmation prompts: Given way retrieve files deleted using shell, rm -r used great caution (might consider adding interactive option rm -r -). Oftentimes one needs copy move several files . can done providing list individual filenames, specifying naming pattern using wildcards. Wildcards special characters can used represent unknown characters sets characters navigating Unix file system. given one file name followed directory name (.e. destination directory must last argument), cp copies files named directory. given three file names, cp throws error one , expecting directory name last argument.","code":"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing $ mv thesis/draft.txt thesis/quotes.txt $ ls thesis quotes.txt $ mv thesis/quotes.txt . $ ls thesis $ $ ls thesis/quotes.txt ls: cannot access 'thesis/quotes.txt': No such file or directory $ ls quotes.txt quotes.txt $ mv sucrose.dat maltose.dat ../raw $ cp quotes.txt thesis/quotations.txt $ ls quotes.txt thesis/quotations.txt quotes.txt   thesis/quotations.txt $ cp -r thesis thesis_backup $ ls thesis thesis_backup thesis: quotations.txt  thesis_backup: quotations.txt $ cp thesis thesis_backup cp: -r not specified; omitting directory 'thesis' $ rm quotes.txt $ ls quotes.txt ls: cannot access 'quotes.txt': No such file or directory rm: remove regular file 'thesis_backup/quotations.txt'? y $ rm thesis rm: cannot remove 'thesis': Is a directory $ rm -r thesis cp: target 'basilisk.dat' is not a directory"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"now know explore files directories, create first place? episode learn creating moving files directories, using exercise-data/writing directory example.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"step-one-see-where-we-are-and-what-we-already-have","dir":"Instructor","previous_headings":"","what":"Step one: see where we are and what we already have","title":null,"text":"still shell-lesson-data directory Desktop, can check using: Next ’ll move exercise-data/writing directory see contains:","code":"$ pwd /Users/nelle/Desktop/shell-lesson-data $ cd exercise-data/writing/ $ ls -F haiku.txt  LittleWomen.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"create-a-directory","dir":"Instructor","previous_headings":"","what":"Create a directory","title":null,"text":"Let’s create new directory called thesis using command mkdir thesis (output): might guess name, mkdir means ‘make directory’. Since thesis relative path (.e., leading slash, like //ever/thesis), new directory created current working directory: Since ’ve just created thesis directory, ’s nothing yet: Note mkdir limited creating single directories one time. -p option allows mkdir create directory nested subdirectories single operation: -R option ls command list nested subdirectories within directory. Let’s use ls -FR recursively list new directory hierarchy just created project directory: Learners can sometimes get trapped within command-line text editors Vim, Emacs, Nano. Closing terminal emulator opening new one can frustrating learners navigate correct folder . recommendation mitigate problem instructors use text editor learners workshops (cases Nano).","code":"$ mkdir thesis $ ls -F haiku.txt  LittleWomen.txt  thesis/ $ ls -F thesis $ mkdir -p ../project/data ../project/results $ ls -FR ../project ../project/: data/  results/  ../project/data:  ../project/results:"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"two-ways-of-doing-the-same-thing","dir":"Instructor","previous_headings":"","what":"Two ways of doing the same thing","title":null,"text":"Using shell create directory different using file explorer. open current directory using operating system’s graphical file explorer, thesis directory appear . shell file explorer two different ways interacting files, files directories .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"good-names-for-files-and-directories","dir":"Instructor","previous_headings":"","what":"Good names for files and directories","title":null,"text":"Complicated names files directories can make life painful working command line. provide useful tips names files directories. Don’t use spaces. Spaces can make name meaningful, since spaces used separate arguments command line better avoid names files directories. can use - _ instead (e.g. north-pacific-gyre/ rather north pacific gyre/). test , try typing mkdir north pacific gyre see directory (directories!) made check ls -F. Don’t begin name - (dash). Commands treat names starting - options. Stick letters, numbers, . (period ‘full stop’), - (dash) _ (underscore). Many characters special meanings command line. learn lesson. special characters can cause command work expected can even result data loss. need refer names files directories spaces special characters, surround name quotes (\"\").","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"create-a-text-file","dir":"Instructor","previous_headings":"","what":"Create a text file","title":null,"text":"Let’s change working directory thesis using cd, run text editor called Nano create file called draft.txt: Let’s type lines text. ’re happy text, can press Ctrl+O (press Ctrl Control key , holding , press O key) write data disk. asked provide name file contain text. Press Return accept suggested default draft.txt. file saved, can use Ctrl+X quit editor return shell. nano doesn’t leave output screen exits, ls now shows created file called draft.txt: touch command generates new file called my_file.txt current directory. can observe newly generated file typing ls command line prompt. my_file.txt can also viewed GUI file explorer. inspect file ls -l, note size my_file.txt 0 bytes. words, contains data. open my_file.txt using text editor blank. programs generate output files , instead require empty files already generated. program run, searches existing file populate output. touch command allows efficiently generate blank text file used programs.","code":"$ cd thesis $ nano draft.txt $ ls draft.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"which-editor","dir":"Instructor","previous_headings":"","what":"Which Editor?","title":null,"text":"say, ‘nano text editor’ really mean ‘text’. can work plain character data, tables, images, human-friendly media. use examples one least complex text editors. However, trait, may powerful enough flexible enough work need workshop. Unix systems (Linux macOS), many programmers use Emacs Vim (require time learn), graphical editor Gedit VScode. Windows, may wish use Notepad++. Windows also built-editor called notepad can run command line way nano purposes lesson. matter editor use, need know searches saves files. start shell, (probably) use current working directory default location. use computer’s start menu, may want save files Desktop Documents directory instead. can change navigating another directory first time ‘Save …’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"control-ctrl-or-key","dir":"Instructor","previous_headings":"","what":"Control, Ctrl, or ^ Key","title":null,"text":"Control key also called ‘Ctrl’ key. various ways using Control key may described. example, may see instruction press Control key , holding , press X key, described : Control-X Control+X Ctrl-X Ctrl+X ^X C-x nano, along bottom screen ’ll see ^G Get Help ^O WriteOut. means can use Control-G get help Control-O save file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"creating-files-a-different-way","dir":"Instructor","previous_headings":"","what":"Creating Files a Different Way","title":null,"text":"seen create text files using nano editor. Now, try following command: touch command ? look current directory using GUI file explorer, file show ? Use ls -l inspect files. large my_file.txt? might want create file way?","code":"$ touch my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"creating-files-a-different-way-1","dir":"Instructor","previous_headings":"","what":"Creating Files a Different Way (continued)","title":null,"text":"avoid confusion later , suggest removing file ’ve just created proceeding rest episode, otherwise future outputs may vary given lesson. , use following command:","code":"$ rm my_file.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"whats-in-a-name","dir":"Instructor","previous_headings":"","what":"What’s In A Name?","title":null,"text":"may noticed Nelle’s files named ‘something dot something’, part lesson, always used extension .txt. just convention; can call file mythesis almost anything else want. However, people use two-part names time help (programs) tell different kinds files apart. second part name called filename extension indicates type data file holds: .txt signals plain text file, .pdf indicates PDF document, .cfg configuration file full parameters program , .png PNG image, . just convention, albeit important one. Files merely contain bytes; ’s us programs interpret bytes according rules plain text files, PDF documents, configuration files, images, . Naming PNG image whale whale.mp3 doesn’t somehow magically turn recording whale song, though might cause operating system associate file music player program. case, someone double-clicked whale.mp3 file explorer program,music player automatically (erroneously) attempt open whale.mp3 file.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Returning shell-lesson-data/exercise-data/writing directory, thesis directory file draft.txt isn’t particularly informative name, let’s change file’s name using mv, short ‘move’: first argument tells mv ’re ‘moving’, second ’s go. case, ’re moving thesis/draft.txt thesis/quotes.txt, effect renaming file. Sure enough, ls shows us thesis now contains one file called quotes.txt: One must careful specifying target file name, since mv silently overwrite existing file name, lead data loss. default, mv ask confirmation overwriting files. However, additional option, mv -(mv --interactive), cause mv request confirmation. Note mv also works directories. Let’s move quotes.txt current working directory. use mv , time ’ll use just name directory second argument tell mv want keep filename put file somewhere new. (command called ‘move’.) case, directory name use special directory name . mentioned earlier. effect move file directory current working directory. ls now shows us thesis empty: Alternatively, can confirm file quotes.txt longer present thesis directory explicitly trying list : ls filename directory argument lists requested file directory. file given argument doesn’t exist, shell returns error saw . can use see quotes.txt now present current directory: Recall .. refers parent directory (.e. one current directory) . refers current directory.","code":"$ cd ~/Desktop/shell-lesson-data/exercise-data/writing $ mv thesis/draft.txt thesis/quotes.txt $ ls thesis quotes.txt $ mv thesis/quotes.txt . $ ls thesis $ $ ls thesis/quotes.txt ls: cannot access 'thesis/quotes.txt': No such file or directory $ ls quotes.txt quotes.txt $ mv sucrose.dat maltose.dat ../raw"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"moving-files-to-a-new-folder","dir":"Instructor","previous_headings":"","what":"Moving Files to a new folder","title":null,"text":"running following commands, Jamie realizes put files sucrose.dat maltose.dat wrong folder. files placed raw folder. Fill blanks move files raw/ folder (.e. one forgot put )","code":"$ ls -F  analyzed/ raw/ $ ls -F analyzed fructose.dat glucose.dat maltose.dat sucrose.dat $ cd analyzed $ mv sucrose.dat maltose.dat ____/____"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"cp command works much like mv, except copies file instead moving . can check right thing using ls two paths arguments — like Unix commands, ls can given multiple paths : can also copy directory contents using recursive option -r, e.g. back directory: can check result listing contents thesis thesis_backup directory: important include -r flag. want copy directory omit option see message directory omitted -r specified. . create file correct name, incorrectly named file still exists directory need deleted. Yes, work rename file. , period(.) indicates move file, provide new file name; identical file names created. , period(.) indicates copy file, provide new file name; identical file names created. start /Users/jamie/data directory, create new folder called recombined. second line moves (mv) file proteins.dat new folder (recombined). third line makes copy file just moved. tricky part file copied . Recall .. means ‘go level’, copied file now /Users/jamie. Notice .. interpreted respect current working directory, respect location file copied. , thing show using ls (/Users/jamie/data) recombined folder. , see explanation . proteins-saved.dat located /Users/jamie Yes , see explanation . proteins.dat located /Users/jamie/data/recombined , see explanation . proteins-saved.dat located /Users/jamie","code":"$ cp quotes.txt thesis/quotations.txt $ ls quotes.txt thesis/quotations.txt quotes.txt   thesis/quotations.txt $ cp -r thesis thesis_backup $ ls thesis thesis_backup thesis: quotations.txt  thesis_backup: quotations.txt $ cp thesis thesis_backup cp: -r not specified; omitting directory 'thesis'"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"renaming-files","dir":"Instructor","previous_headings":"","what":"Renaming Files","title":null,"text":"Suppose created plain-text file current directory contain list statistical tests need analyze data, named statstics.txt creating saving file realize misspelled filename! want correct mistake, following commands use ? cp statstics.txt statistics.txt mv statstics.txt statistics.txt mv statstics.txt . cp statstics.txt .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"moving-and-copying","dir":"Instructor","previous_headings":"","what":"Moving and Copying","title":null,"text":"output closing ls command sequence shown ? proteins-saved.dat recombined recombined proteins.dat recombined proteins-saved.dat","code":"$ pwd /Users/jamie/data $ ls proteins.dat $ mkdir recombined $ mv proteins.dat recombined/ $ cp recombined/proteins.dat ../proteins-saved.dat $ ls"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Returning shell-lesson-data/exercise-data/writing directory, let’s tidy directory removing quotes.txt file created. Unix command ’ll use rm (short ‘remove’): can confirm file gone using ls: -option prompt (every) removal (use Y confirm deletion N keep file). Unix shell doesn’t trash bin, files removed disappear forever. using -option, chance check deleting files want remove. try remove thesis directory using rm thesis, get error message: happens rm default works files, directories. rm can remove directory contents use recursive option -r, without confirmation prompts: Given way retrieve files deleted using shell, rm -r used great caution (might consider adding interactive option rm -r -).","code":"$ rm quotes.txt $ ls quotes.txt ls: cannot access 'quotes.txt': No such file or directory rm: remove regular file 'thesis_backup/quotations.txt'? y $ rm thesis rm: cannot remove 'thesis': Is a directory $ rm -r thesis"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"deleting-is-forever","dir":"Instructor","previous_headings":"","what":"Deleting Is Forever","title":null,"text":"Unix shell doesn’t trash bin can recover deleted files (though graphical interfaces Unix ). Instead, delete files, unlinked file system storage space disk can recycled. Tools finding recovering deleted files exist, ’s guarantee ’ll work particular situation, since computer may recycle file’s disk space right away.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"using-rm-safely","dir":"Instructor","previous_headings":"","what":"Using rm Safely","title":null,"text":"happens execute rm -thesis_backup/quotations.txt? want protection using rm?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"headingSolution6","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Oftentimes one needs copy move several files . can done providing list individual filenames, specifying naming pattern using wildcards. Wildcards special characters can used represent unknown characters sets characters navigating Unix file system. given one file name followed directory name (.e. destination directory must last argument), cp copies files named directory. given three file names, cp throws error one , expecting directory name last argument.","code":"cp: target 'basilisk.dat' is not a directory"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"copy-with-multiple-filenames","dir":"Instructor","previous_headings":"","what":"Copy with Multiple Filenames","title":null,"text":"exercise, can test commands shell-lesson-data/exercise-data directory. example , cp given several filenames directory name? example , cp given three file names?","code":"$ mkdir backup $ cp creatures/minotaur.dat creatures/unicorn.dat backup/ $ cd creatures $ ls -F basilisk.dat  minotaur.dat  unicorn.dat $ cp minotaur.dat unicorn.dat basilisk.dat"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"using-wildcards-for-accessing-multiple-files-at-once","dir":"Instructor","previous_headings":"","what":"Using wildcards for accessing multiple files at once","title":null,"text":"solution 3. 1. shows files whose names contain zero characters (*) followed letter t, zero characters (*) followed ane.pdb. gives ethane.pdb  methane.pdb  octane.pdb  pentane.pdb. 2. shows files whose names start zero characters (*) followed letter t, single character (?), ne. followed zero characters (*). give us octane.pdb pentane.pdb doesn’t match anything ends thane.pdb. 3. fixes problems option 2 matching two characters (??) t ne. solution. 4. shows files starting ethane.. Jamie needs move files fructose.dat sucrose.dat analyzed directory. shell expand *.dat match .dat files current directory. mv command moves list .dat files ‘analyzed’ directory. first two sets commands achieve objective. first set uses relative paths create top-level directory subdirectories. third set commands give error default behavior mkdir won’t create subdirectory non-existent directory: intermediate level folders must created first. fourth set commands achieve objective. Remember, -p option, followed path one directories, cause mkdir create intermediate subdirectories required. final set commands generates ‘raw’ ‘processed’ directories level ‘data’ directory.","code":"$ cp *calibration.txt backup/calibration $ cp 2015-11-* send_to_bob/all_november_files/ $ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/ mv *.dat analyzed"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"wildcards","dir":"Instructor","previous_headings":"","what":"Wildcards","title":null,"text":"* wildcard, represents zero characters. Let’s consider shell-lesson-data/exercise-data/alkanes directory: *.pdb represents ethane.pdb, propane.pdb, every file ends ‘.pdb’. hand, p*.pdb represents pentane.pdb propane.pdb, ‘p’ front can represent filenames begin letter ‘p’. ? also wildcard, represents exactly one character. ?ethane.pdb represent methane.pdb whereas *ethane.pdb represents ethane.pdb methane.pdb. Wildcards can used combination . example, ???ane.pdb indicates three characters followed ane.pdb, giving cubane.pdb  ethane.pdb  octane.pdb. shell sees wildcard, expands wildcard create list matching filenames running preceding command. exception, wildcard expression match file, Bash pass expression argument command . example, typing ls *.pdf alkanes directory (contains files names ending .pdb) results error message file called *.pdf. However, generally commands like wc ls see lists file names matching expressions, wildcards . shell, programs, expands wildcards.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"list-filenames-matching-a-pattern","dir":"Instructor","previous_headings":"","what":"List filenames matching a pattern","title":null,"text":"run alkanes directory, ls command(s) produce output? ethane.pdb   methane.pdb ls *t*ane.pdb ls *t?ne.* ls *t??ne.pdb ls ethane.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"more-on-wildcards","dir":"Instructor","previous_headings":"","what":"More on Wildcards","title":null,"text":"Sam directory containing calibration data, datasets, descriptions datasets: heading another field trip, wants back data send datasets colleague Bob. Sam uses following commands get job done: Help Sam filling blanks. resulting directory structure look like ","code":". ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   └── datasets └── send_to_bob     ├── all_datasets_created_on_a_23rd     └── all_november_files $ cp *dataset* backup/datasets $ cp ____calibration____ backup/calibration $ cp 2015-____-____ send_to_bob/all_november_files/ $ cp ____ send_to_bob/all_datasets_created_on_a_23rd/ . ├── 2015-10-23-calibration.txt ├── 2015-10-23-dataset1.txt ├── 2015-10-23-dataset2.txt ├── 2015-10-23-dataset_overview.txt ├── 2015-10-26-calibration.txt ├── 2015-10-26-dataset1.txt ├── 2015-10-26-dataset2.txt ├── 2015-10-26-dataset_overview.txt ├── 2015-11-23-calibration.txt ├── 2015-11-23-dataset1.txt ├── 2015-11-23-dataset2.txt ├── 2015-11-23-dataset_overview.txt ├── backup │   ├── calibration │   │   ├── 2015-10-23-calibration.txt │   │   ├── 2015-10-26-calibration.txt │   │   └── 2015-11-23-calibration.txt │   └── datasets │       ├── 2015-10-23-dataset1.txt │       ├── 2015-10-23-dataset2.txt │       ├── 2015-10-23-dataset_overview.txt │       ├── 2015-10-26-dataset1.txt │       ├── 2015-10-26-dataset2.txt │       ├── 2015-10-26-dataset_overview.txt │       ├── 2015-11-23-dataset1.txt │       ├── 2015-11-23-dataset2.txt │       └── 2015-11-23-dataset_overview.txt └── send_to_bob     ├── all_datasets_created_on_a_23rd     │   ├── 2015-10-23-dataset1.txt     │   ├── 2015-10-23-dataset2.txt     │   ├── 2015-10-23-dataset_overview.txt     │   ├── 2015-11-23-dataset1.txt     │   ├── 2015-11-23-dataset2.txt     │   └── 2015-11-23-dataset_overview.txt     └── all_november_files         ├── 2015-11-23-calibration.txt         ├── 2015-11-23-dataset1.txt         ├── 2015-11-23-dataset2.txt         └── 2015-11-23-dataset_overview.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"organizing-directories-and-files","dir":"Instructor","previous_headings":"","what":"Organizing Directories and Files","title":null,"text":"Jamie working project, sees files aren’t well organized: fructose.dat sucrose.dat files contain output data analysis. command(s) covered lesson need run commands produce output shown?","code":"$ ls -F analyzed/  fructose.dat    raw/   sucrose.dat $ ls -F analyzed/   raw/ $ ls analyzed fructose.dat    sucrose.dat"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"reproduce-a-folder-structure","dir":"Instructor","previous_headings":"","what":"Reproduce a folder structure","title":null,"text":"’re starting new experiment like duplicate directory structure previous experiment can add new data. Assume previous experiment folder called 2016-05-18, contains data folder turn contains folders named raw processed contain data files. goal copy folder structure 2016-05-18 folder folder called 2016-05-20 final directory structure looks like : following set commands achieve objective? commands ?","code":"2016-05-20/ └── data    ├── processed    └── raw $ mkdir 2016-05-20 $ mkdir 2016-05-20/data $ mkdir 2016-05-20/data/processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ cd data $ mkdir raw processed $ mkdir 2016-05-20/data/raw $ mkdir 2016-05-20/data/processed $ mkdir -p 2016-05-20/data/raw $ mkdir -p 2016-05-20/data/processed $ mkdir 2016-05-20 $ cd 2016-05-20 $ mkdir data $ mkdir raw processed"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"cp [old] [new] copies file. mkdir [path] creates new directory. mv [old] [new] moves (renames) file directory. rm [path] removes (deletes) file. * matches zero characters filename, *.txt matches files ending .txt. ? matches single character filename, ?.txt matches .txt .txt. Use Control key may described many ways, including Ctrl-X, Control-X, ^X. shell trash bin: something deleted, ’s really gone. files’ names something.extension. extension isn’t required, doesn’t guarantee anything, normally used indicate type data file. Depending type work , may need powerful text editor Nano.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Pipes Filters  can combine existing commands new things? Redirect command’s output file. Construct command pipelines two stages. Explain usually happens program pipeline isn’t given input process. Explain advantage linking commands pipes filters. Now know basic commands, can finally look shell’s powerful feature: ease lets us combine existing programs new ways. ’ll start directory shell-lesson-data/exercise-data/alkanes contains six files describing simple organic molecules. .pdb extension indicates files Protein Data Bank format, simple text format specifies type position atom molecule. Let’s run example command: wc ‘word count’ command: counts number lines, words, characters files (returning values order left right). run command wc *.pdb, * *.pdb matches zero characters, shell turns *.pdb list .pdb files current directory: Note wc *.pdb also shows total number lines last line output. run wc -l instead just wc, output shows number lines per file: -m -w options can also used wc command show number characters number words, respectively. files contains fewest lines? ’s easy question answer six files, 6000? first step toward solution run command: greater symbol, >, tells shell redirect command’s output file instead printing screen. command prints screen output, everything wc printed gone file lengths.txt instead. file doesn’t exist prior issuing command, shell create file. file exists already, silently overwritten, may lead data loss. Thus, redirect commands require caution. ls lengths.txt confirms file exists: can now send content lengths.txt screen using cat lengths.txt. cat command gets name ‘concatenate’ .e. join together, prints contents files one another. ’s one file case, cat just shows us contains: Next ’ll use sort command sort contents lengths.txt file. first ’ll exercise learn little sort command: -n option specifies numerical rather alphanumerical sort. also use -n option specify sort numerical instead alphanumerical. change file; instead, sends sorted result screen: can put sorted list lines another temporary file called sorted-lengths.txt putting > sorted-lengths.txt command, just used > lengths.txt put output wc lengths.txt. ’ve done , can run another command called head get first lines sorted-lengths.txt: Using -n 1 head tells want first line file; -n 20 get first 20, . Since sorted-lengths.txt contains lengths files ordered least greatest, output head must file fewest lines. first example >, string ‘hello’ written testfile01.txt, file gets overwritten time run command. see second example >> operator also writes ‘hello’ file (case testfile02.txt), appends string file already exists (.e. run second time). Option 3 correct. option 1 correct run head command. option 2 correct run tail command. option 4 correct pipe output head tail -n 2 head -n 3 animals.csv | tail -n 2 > animals-subset.csv example finding file fewest lines, using two intermediate files lengths.txt sorted-lengths.txt store output. confusing way work even understand wc, sort, head , intermediate files make hard follow ’s going . can make easier understand running sort head together: vertical bar, |, two commands called pipe. tells shell want use output command left input command right. removed need sorted-lengths.txt file. Nothing prevents us chaining pipes consecutively. can example send output wc directly sort, send resulting output head. removes need intermediate files. ’ll start using pipe send output wc sort: can send output another pipe, head, full pipeline becomes: exactly like mathematician nesting functions like log(3x) saying ‘log three times x’. case, algorithm ‘head sort line count *.pdb’. redirection pipes used last commands illustrated : Option 4 solution. pipe character | used connect output one command input another. > used redirect standard output file. Try shell-lesson-data/exercise-data/alkanes directory! idea linking programs together Unix successful. Instead creating enormous programs try many different things, Unix programmers focus creating lots simple tools one job well, work well . programming model called ‘pipes filters’. ’ve already seen pipes; filter program like wc sort transforms stream input stream output. Almost standard Unix tools can work way. Unless told otherwise, read standard input, something ’ve read, write standard output. key program reads lines text standard input writes lines text standard output can combined every program behaves way well. can write programs way people can put programs pipes multiply power. head command extracts first 5 lines animals.csv. , last 3 lines extracted previous 5 using tail command. sort -r command 3 lines sorted reverse order. Finally, output redirected file: final.txt. content file can checked executing cat final.txt. file contain following lines: Option 4. correct answer. difficulty understanding , try running commands, sub-sections pipelines (make sure shell-lesson-data/exercise-data/animal-counts directory). Nelle run samples assay machines created 17 files north-pacific-gyre directory described earlier. quick check, starting shell-lesson-data directory, Nelle types: output 18 lines look like : Now types : Whoops: one files 60 lines shorter others. goes back checks , sees assay 8:00 Monday morning — someone probably using machine weekend, forgot reset . re-running sample, checks see files much data: numbers look good — ’s ‘Z’ third--last line? samples marked ‘’ ‘B’; convention, lab uses ‘Z’ indicate samples missing information. find others like , : Sure enough, checks log laptop, ’s depth recorded either samples. Since ’s late get information way, must exclude two files analysis. delete using rm, actually analyses might later depth doesn’t matter, instead, ’ll careful later select files using wildcard expressions NENE*.txt NENE*B.txt. remove .txt files one-character names correct answer shell expand * match everything current directory, command try remove matched files additional file called .txt shell expands *.* match filenames containing least one ., including processed files (.txt) raw files (.dat)","code":"$ ls cubane.pdb    methane.pdb    pentane.pdb ethane.pdb    octane.pdb     propane.pdb $ wc cubane.pdb 20  156 1158 cubane.pdb $ wc *.pdb 20  156  1158  cubane.pdb   12  84   622   ethane.pdb    9  57   422   methane.pdb   30  246  1828  octane.pdb   21  165  1226  pentane.pdb   15  111  825   propane.pdb  107  819  6081  total $ wc -l *.pdb 20  cubane.pdb   12  ethane.pdb    9  methane.pdb   30  octane.pdb   21  pentane.pdb   15  propane.pdb  107  total $ wc -l *.pdb > lengths.txt $ ls lengths.txt lengths.txt $ cat lengths.txt 20  cubane.pdb   12  ethane.pdb    9  methane.pdb   30  octane.pdb   21  pentane.pdb   15  propane.pdb  107  total $ sort -n lengths.txt 9  methane.pdb  12  ethane.pdb  15  propane.pdb  20  cubane.pdb  21  pentane.pdb  30  octane.pdb 107  total $ sort -n lengths.txt > sorted-lengths.txt $ head -n 1 sorted-lengths.txt 9  methane.pdb $ sort -n lengths.txt | head -n 1 9  methane.pdb $ wc -l *.pdb | sort -n 9 methane.pdb   12 ethane.pdb   15 propane.pdb   20 cubane.pdb   21 pentane.pdb   30 octane.pdb  107 total $ wc -l *.pdb | sort -n | head -n 1 9  methane.pdb 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-05,raccoon,7 $ cut -d , -f 2 animals.csv | sort | uniq $ cd north-pacific-gyre $ wc -l *.txt 300 NENE01729A.txt 300 NENE01729B.txt 300 NENE01736A.txt 300 NENE01751A.txt 300 NENE01751B.txt 300 NENE01812A.txt ... ... $ wc -l *.txt | sort -n | head -n 5 240 NENE02018B.txt  300 NENE01729A.txt  300 NENE01729B.txt  300 NENE01736A.txt  300 NENE01751A.txt $ wc -l *.txt | sort -n | tail -n 5 300 NENE02040B.txt  300 NENE02040Z.txt  300 NENE02043A.txt  300 NENE02043B.txt 5040 total $ ls *Z.txt NENE01971Z.txt    NENE02040Z.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"why-isnt-it-doing-anything","dir":"Instructor","previous_headings":"","what":"Why Isn’t It Doing Anything?","title":null,"text":"happens command supposed process file, don’t give filename? example, type: don’t type *.pdb (anything else) command? Since doesn’t filenames, wc assumes supposed process input given command prompt, just sits waits us give data interactively. outside, though, see sitting , command doesn’t appear anything. make kind mistake, can escape state holding control key (Ctrl) pressing letter C : Ctrl+C. release keys.","code":"$ wc -l"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"files contains fewest lines? ’s easy question answer six files, 6000? first step toward solution run command: greater symbol, >, tells shell redirect command’s output file instead printing screen. command prints screen output, everything wc printed gone file lengths.txt instead. file doesn’t exist prior issuing command, shell create file. file exists already, silently overwritten, may lead data loss. Thus, redirect commands require caution. ls lengths.txt confirms file exists: can now send content lengths.txt screen using cat lengths.txt. cat command gets name ‘concatenate’ .e. join together, prints contents files one another. ’s one file case, cat just shows us contains:","code":"$ wc -l *.pdb > lengths.txt $ ls lengths.txt lengths.txt $ cat lengths.txt 20  cubane.pdb   12  ethane.pdb    9  methane.pdb   30  octane.pdb   21  pentane.pdb   15  propane.pdb  107  total"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"output-page-by-page","dir":"Instructor","previous_headings":"","what":"Output Page by Page","title":null,"text":"’ll continue use cat lesson, convenience consistency, disadvantage always dumps whole file onto screen. useful practice command less (e.g. less lengths.txt). displays screenful file, stops. can go forward one screenful pressing spacebar, back one pressing b. Press q quit.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"headingSolution1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Next ’ll use sort command sort contents lengths.txt file. first ’ll exercise learn little sort command: -n option specifies numerical rather alphanumerical sort. also use -n option specify sort numerical instead alphanumerical. change file; instead, sends sorted result screen: can put sorted list lines another temporary file called sorted-lengths.txt putting > sorted-lengths.txt command, just used > lengths.txt put output wc lengths.txt. ’ve done , can run another command called head get first lines sorted-lengths.txt: Using -n 1 head tells want first line file; -n 20 get first 20, . Since sorted-lengths.txt contains lengths files ordered least greatest, output head must file fewest lines. first example >, string ‘hello’ written testfile01.txt, file gets overwritten time run command. see second example >> operator also writes ‘hello’ file (case testfile02.txt), appends string file already exists (.e. run second time). Option 3 correct. option 1 correct run head command. option 2 correct run tail command. option 4 correct pipe output head tail -n 2 head -n 3 animals.csv | tail -n 2 > animals-subset.csv","code":"$ sort -n lengths.txt 9  methane.pdb  12  ethane.pdb  15  propane.pdb  20  cubane.pdb  21  pentane.pdb  30  octane.pdb 107  total $ sort -n lengths.txt > sorted-lengths.txt $ head -n 1 sorted-lengths.txt 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"what-does-sort--n-do","dir":"Instructor","previous_headings":"","what":"What Does sort -n Do?","title":null,"text":"file shell-lesson-data/exercise-data/numbers.txt contains following lines: run sort file, output : run sort -n file, get instead: Explain -n effect.","code":"10 2 19 22 6 10 19 2 22 6 2 6 10 19 22"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"redirecting-to-the-same-file","dir":"Instructor","previous_headings":"","what":"Redirecting to the same file","title":null,"text":"’s bad idea try redirecting output command operates file file. example: something like may give incorrect results /delete contents lengths.txt.","code":"$ sort -n lengths.txt > lengths.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"what-does-mean","dir":"Instructor","previous_headings":"","what":"What Does >> Mean?","title":null,"text":"seen use >, similar operator >> works slightly differently. ’ll learn differences two operators printing strings. can use echo command print strings e.g. Now test commands reveal difference two operators: : Hint: Try executing command twice row examining output files.","code":"$ echo The echo command prints text The echo command prints text $ echo hello > testfile01.txt $ echo hello >> testfile02.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"appending-data","dir":"Instructor","previous_headings":"","what":"Appending Data","title":null,"text":"already met head command, prints lines start file. tail similar, prints lines end file instead. Consider file shell-lesson-data/exercise-data/animal-counts/animals.csv. commands, select answer corresponds file animals-subset.csv: first three lines animals.csv last two lines animals.csv first three lines last two lines animals.csv second third lines animals.csv","code":"$ head -n 3 animals.csv > animals-subset.csv $ tail -n 2 animals.csv >> animals-subset.csv"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"example finding file fewest lines, using two intermediate files lengths.txt sorted-lengths.txt store output. confusing way work even understand wc, sort, head , intermediate files make hard follow ’s going . can make easier understand running sort head together: vertical bar, |, two commands called pipe. tells shell want use output command left input command right. removed need sorted-lengths.txt file.","code":"$ sort -n lengths.txt | head -n 1 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nothing prevents us chaining pipes consecutively. can example send output wc directly sort, send resulting output head. removes need intermediate files. ’ll start using pipe send output wc sort: can send output another pipe, head, full pipeline becomes: exactly like mathematician nesting functions like log(3x) saying ‘log three times x’. case, algorithm ‘head sort line count *.pdb’. redirection pipes used last commands illustrated : Option 4 solution. pipe character | used connect output one command input another. > used redirect standard output file. Try shell-lesson-data/exercise-data/alkanes directory!","code":"$ wc -l *.pdb | sort -n 9 methane.pdb   12 ethane.pdb   15 propane.pdb   20 cubane.pdb   21 pentane.pdb   30 octane.pdb  107 total $ wc -l *.pdb | sort -n | head -n 1 9  methane.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"piping-commands-together","dir":"Instructor","previous_headings":"","what":"Piping Commands Together","title":null,"text":"current directory, want find 3 files least number lines. command listed work? wc -l * > sort -n > head -n 3 wc -l * | sort -n | head -n 1-3 wc -l * | head -n 3 | sort -n wc -l * | sort -n | head -n 3","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"headingSolution5","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"idea linking programs together Unix successful. Instead creating enormous programs try many different things, Unix programmers focus creating lots simple tools one job well, work well . programming model called ‘pipes filters’. ’ve already seen pipes; filter program like wc sort transforms stream input stream output. Almost standard Unix tools can work way. Unless told otherwise, read standard input, something ’ve read, write standard output. key program reads lines text standard input writes lines text standard output can combined every program behaves way well. can write programs way people can put programs pipes multiply power. head command extracts first 5 lines animals.csv. , last 3 lines extracted previous 5 using tail command. sort -r command 3 lines sorted reverse order. Finally, output redirected file: final.txt. content file can checked executing cat final.txt. file contain following lines: Option 4. correct answer. difficulty understanding , try running commands, sub-sections pipelines (make sure shell-lesson-data/exercise-data/animal-counts directory).","code":"2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-05,raccoon,7 $ cut -d , -f 2 animals.csv | sort | uniq"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"pipe-reading-comprehension","dir":"Instructor","previous_headings":"","what":"Pipe Reading Comprehension","title":null,"text":"file called animals.csv (shell-lesson-data/exercise-data/animal-counts folder) contains following data: text passes pipes final redirect pipeline ? Note, sort -r command sorts reverse order. Hint: build pipeline one command time test understanding","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 $ cat animals.csv | head -n 5 | tail -n 3 | sort -r > final.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"pipe-construction","dir":"Instructor","previous_headings":"","what":"Pipe Construction","title":null,"text":"file animals.csv previous exercise, consider following command: cut command used remove ‘cut ’ certain sections line file, cut expects lines separated columns Tab character. character used way called delimiter. example use -d option specify comma delimiter character. also used -f option specify want extract second field (column). gives following output: uniq command filters adjacent matching lines file. extend pipeline (using uniq another command) find animals file contains (without duplicates names)?","code":"$ cut -d , -f 2 animals.csv deer rabbit raccoon rabbit deer fox rabbit bear"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"which-pipe","dir":"Instructor","previous_headings":"","what":"Which Pipe?","title":null,"text":"file animals.csv contains 8 lines data formatted follows: uniq command -c option gives count number times line occurs input. Assuming current directory shell-lesson-data/exercise-data/animal-counts, command use produce table shows total count type animal file? sort animals.csv | uniq -c sort -t, -k2,2 animals.csv | uniq -c cut -d, -f 2 animals.csv | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c cut -d, -f 2 animals.csv | sort | uniq -c | wc -l","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nelle run samples assay machines created 17 files north-pacific-gyre directory described earlier. quick check, starting shell-lesson-data directory, Nelle types: output 18 lines look like : Now types : Whoops: one files 60 lines shorter others. goes back checks , sees assay 8:00 Monday morning — someone probably using machine weekend, forgot reset . re-running sample, checks see files much data: numbers look good — ’s ‘Z’ third--last line? samples marked ‘’ ‘B’; convention, lab uses ‘Z’ indicate samples missing information. find others like , : Sure enough, checks log laptop, ’s depth recorded either samples. Since ’s late get information way, must exclude two files analysis. delete using rm, actually analyses might later depth doesn’t matter, instead, ’ll careful later select files using wildcard expressions NENE*.txt NENE*B.txt. remove .txt files one-character names correct answer shell expand * match everything current directory, command try remove matched files additional file called .txt shell expands *.* match filenames containing least one ., including processed files (.txt) raw files (.dat)","code":"$ cd north-pacific-gyre $ wc -l *.txt 300 NENE01729A.txt 300 NENE01729B.txt 300 NENE01736A.txt 300 NENE01751A.txt 300 NENE01751B.txt 300 NENE01812A.txt ... ... $ wc -l *.txt | sort -n | head -n 5 240 NENE02018B.txt  300 NENE01729A.txt  300 NENE01729B.txt  300 NENE01736A.txt  300 NENE01751A.txt $ wc -l *.txt | sort -n | tail -n 5 300 NENE02040B.txt  300 NENE02040Z.txt  300 NENE02043A.txt  300 NENE02043B.txt 5040 total $ ls *Z.txt NENE01971Z.txt    NENE02040Z.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"removing-unneeded-files","dir":"Instructor","previous_headings":"","what":"Removing Unneeded Files","title":null,"text":"Suppose want delete processed data files, keep raw files processing script save storage. raw files end .dat processed files end .txt. following remove processed data files, processed data files? rm ?.txt rm *.txt rm * .txt rm *.*","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"wc counts lines, words, characters inputs. cat displays contents inputs. sort sorts inputs. head displays first 10 lines input. tail displays last 10 lines input. command > [file] redirects command’s output file (overwriting existing content). command >> [file] appends command’s output file. [first] | [second] pipeline: output first command used input second. best way use shell use pipes combine simple single-purpose programs (filters).","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Loops  can perform actions many different files? Write loop applies one commands separately file set files. Trace values taken loop variable execution loop. Explain difference variable’s name value. Explain spaces punctuation characters shouldn’t used file names. Demonstrate see commands recently executed. Re-run recently executed commands without retyping . Loops programming construct allow us repeat command set commands item list. key productivity improvements automation. Similar wildcards tab completion, using loops also reduces amount typing required (hence reduces number typing mistakes). Suppose several hundred genome data files named basilisk.dat, minotaur.dat, unicorn.dat. example, ’ll use exercise-data/creatures directory three example files, principles can applied many many files . structure files : common name, classification, updated date presented first three lines, DNA sequences following lines. Let’s look files: like print classification species, given second line file. file, need execute command head -n 2 pipe tail -n 1. ’ll use loop solve problem, first let’s look general form loop, using pseudo-code : can apply example like : shell sees keyword , knows repeat command (group commands) item list. time loop runs (called iteration), item list assigned sequence variable, commands inside loop executed, moving next item list. Inside loop, call variable’s value putting $ front . $ tells shell interpreter treat variable variable name substitute value place, rather treat text external command. example, list three filenames: basilisk.dat, minotaur.dat, unicorn.dat. time loop iterates, first use echo print value variable $filename currently holds. necessary result, beneficial us easier time follow along. Next, run head command file currently referred $filename. first time loop, $filename basilisk.dat. interpreter runs command head basilisk.dat pipes first two lines tail command, prints second line basilisk.dat. second iteration, $filename becomes minotaur.dat. time, shell runs head minotaur.dat pipes first two lines tail command, prints second line minotaur.dat. third iteration, $filename becomes unicorn.dat, shell runs head command file, tail output . Since list three items, shell exits loop. using variables also possible put names curly braces clearly delimit variable name: $filename equivalent ${filename}, different ${file}name. may find notation people’s programs. called variable loop filename order make purpose clearer human readers. shell doesn’t care variable called; wrote loop : : work exactly way. Don’t . Programs useful people can understand , meaningless names (like x) misleading names (like temperature) increase odds program won’t readers think . examples, variables (thing, filename, x temperature) given name, long meaningful person writing code person reading . Note also loops can used things filenames, like list numbers subset data. first code block gives output iteration loop. Bash expands wildcard *.pdb within loop body (well loop starts) match files ending .pdb lists using ls. expanded loop look like : second code block lists different file loop iteration. value datafile variable evaluated using $datafile, listed using ls. 4 correct answer. * matches zero characters, file name starting letter c, followed zero characters matched. 4 correct answer. * matches zero characters, file name zero characters letter c zero characters letter c matched. text file turn gets written alkanes.pdb file. However, file gets overwritten loop iteration, final content alkanes.pdb text propane.pdb file. 3 correct answer. >> appends file, rather overwriting redirected output command. Given output cat command redirected, nothing printed screen. Let’s continue example shell-lesson-data/exercise-data/creatures directory. ’s slightly complicated loop: shell starts expanding *.dat create list files process. loop body executes two commands files. first command, echo, prints command-line arguments standard output. example: prints: case, since shell expands $filename name file, echo $filename prints name file. Note can’t write : first time loop, $filename expanded basilisk.dat, shell try run basilisk.dat program. Finally, head tail combination selects lines 81-100 whatever file processed (assuming file least 100 lines). like modify files shell-lesson-data/exercise-data/creatures, also save version original files. want copy original files new files named original-basilisk.dat original-unicorn.dat, example. can’t use: expand : wouldn’t back files, instead get error: problem arises cp receives two inputs. happens, expects last input directory can copy files passed. Since directory named original-*.dat creatures directory, get error. Instead, can use loop: loop runs cp command filename. first time, $filename expands basilisk.dat, shell executes: second time, command : third last time, command : Since cp command normally produce output, ’s hard check loop working correctly. However, learned earlier print strings using echo, can modify loop use echo print commands without actually executing . can check commands run unmodified loop. following diagram shows happens modified loop executed demonstrates judicious use echo good debugging technique. Nelle now ready process data files using goostats.sh — shell script written supervisor. calculates statistics protein sample file takes two arguments: input file (containing raw data) output file (store calculated statistics) Since ’s still learning use shell, decides build required commands stages. first step make sure can select right input files — remember, ones whose names end ‘’ ‘B’, rather ‘Z’. Moving north-pacific-gyre directory, Nelle types: next step decide call files goostats.sh analysis program create. Prefixing input file’s name ‘stats’ seems simple, modifies loop : hasn’t actually run goostats.sh yet, now ’s sure can select right files generate right output filenames. Typing commands becoming tedious, though, Nelle worried making mistakes, instead re-entering loop, presses ↑. response, shell redisplays whole loop one line (using semi-colons separate pieces): Using ←, Nelle navigates echo command changes bash goostats.sh: presses Enter, shell runs modified command. However, nothing appears happen — output. moment, Nelle realizes since script doesn’t print anything screen longer, idea whether running, much less quickly. kills running command typing Ctrl+C, uses ↑ repeat command, edits read: runs program now, produces one line output every five seconds : 1518 times 5 seconds, divided 60, tells script take two hours run. final check, opens another terminal window, goes north-pacific-gyre, uses cat stats-NENE01729B.txt examine one output files. looks good, decides get coffee catch reading. second version one want run. prints screen everything enclosed quote marks, expanding loop variable name prefixed dollar sign. also modify create file .pdb, >> treated literally part string rather redirection instruction. first version appends output command echo cat $datafile file, .pdb. file just contain list; cat cubane.pdb, cat ethane.pdb, cat methane.pdb etc. Try versions see output! sure open .pdb file view contents. nested loop, .e. contained within another loop, species outer loop, inner loop (nested loop) iterates list temperatures, creates new directory combination. Try running code see directories created!","code":"$ head -n 5 basilisk.dat minotaur.dat unicorn.dat # The word \"for\" indicates the start of a \"For-loop\" command for thing in list_of_things  #The word \"do\" indicates the start of job execution list do      # Indentation within the loop is not required, but aids legibility     operation_using/command $thing  # The word \"done\" indicates the end of a loop done $ for filename in basilisk.dat minotaur.dat unicorn.dat > do >     echo $filename >     head -n 2 $filename | tail -n 1 > done basilisk.dat CLASSIFICATION: basiliscus vulgaris minotaur.dat CLASSIFICATION: bos hominus unicorn.dat CLASSIFICATION: equus monoceros $ for x in basilisk.dat minotaur.dat unicorn.dat > do >     head -n 2 $x | tail -n 1 > done $ for temperature in basilisk.dat minotaur.dat unicorn.dat > do >     head -n 2 $temperature | tail -n 1 > done $ for loop_variable in 0 1 2 3 4 5 6 7 8 9 > do >     echo $loop_variable > done 0 1 2 3 4 5 6 7 8 9 $ for datafile in cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb > do >     ls cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb > done cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb $ for filename in *.dat > do >     echo $filename >     head -n 100 $filename | tail -n 20 > done $ echo hello there hello there $ for filename in *.dat > do >     $filename >     head -n 100 $filename | tail -n 20 > done $ cp *.dat original-*.dat $ cp basilisk.dat minotaur.dat unicorn.dat original-*.dat cp: target `original-*.dat' is not a directory $ for filename in *.dat > do >     cp $filename original-$filename > done cp basilisk.dat original-basilisk.dat cp minotaur.dat original-minotaur.dat cp unicorn.dat original-unicorn.dat $ cd $ cd Desktop/shell-lesson-data/north-pacific-gyre $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile > done NENE01729A.txt NENE01729B.txt NENE01736A.txt ... NENE02043A.txt NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile stats-$datafile > done NENE01729A.txt stats-NENE01729A.txt NENE01729B.txt stats-NENE01729B.txt NENE01736A.txt stats-NENE01736A.txt ... NENE02043A.txt stats-NENE02043A.txt NENE02043B.txt stats-NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done NENE01729A.txt NENE01729B.txt NENE01736A.txt ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"follow-the-prompt","dir":"Instructor","previous_headings":"","what":"Follow the Prompt","title":null,"text":"shell prompt changes $ > back typing loop. second prompt, >, different remind us haven’t finished typing complete command yet. semicolon, ;, can used separate two commands written single line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"same-symbols-different-meanings","dir":"Instructor","previous_headings":"","what":"Same Symbols, Different Meanings","title":null,"text":"see > used shell prompt, whereas > also used redirect output. Similarly, $ used shell prompt, , saw earlier, also used ask shell get value variable. shell prints > $ expects type something, symbol prompt. type > $ , instruction shell redirect output get value variable.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"write-your-own-loop","dir":"Instructor","previous_headings":"","what":"Write your own loop","title":null,"text":"write loop echoes 10 numbers 0 9?","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"variables-in-loops","dir":"Instructor","previous_headings":"","what":"Variables in Loops","title":null,"text":"exercise refers shell-lesson-data/exercise-data/alkanes directory. ls *.pdb gives following output: output following code? Now, output following code? two loops give different outputs?","code":"cubane.pdb  ethane.pdb  methane.pdb  octane.pdb  pentane.pdb  propane.pdb $ for datafile in *.pdb > do >     ls *.pdb > done $ for datafile in *.pdb > do >     ls $datafile > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"limiting-sets-of-files","dir":"Instructor","previous_headings":"","what":"Limiting Sets of Files","title":null,"text":"output running following loop shell-lesson-data/exercise-data/alkanes directory? files listed. files listed. cubane.pdb, octane.pdb pentane.pdb listed. cubane.pdb listed.","code":"$ for filename in c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"limiting-sets-of-files-1","dir":"Instructor","previous_headings":"","what":"Limiting Sets of Files (continued)","title":null,"text":"output differ using command instead? files listed. files listed time. files listed time. files cubane.pdb octane.pdb listed. file octane.pdb listed.","code":"$ for filename in *c* > do >     ls $filename > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"saving-to-a-file-in-a-loop---part-one","dir":"Instructor","previous_headings":"","what":"Saving to a File in a Loop - Part One","title":null,"text":"shell-lesson-data/exercise-data/alkanes directory, effect loop? Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb, text propane.pdb saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, text three files concatenated saved file called alkanes.pdb. Prints cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb, text propane.pdb saved file called alkanes.pdb. None .","code":"for alkanes in *.pdb do     echo $alkanes     cat $alkanes > alkanes.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"saving-to-a-file-in-a-loop---part-two","dir":"Instructor","previous_headings":"","what":"Saving to a File in a Loop - Part Two","title":null,"text":"Also shell-lesson-data/exercise-data/alkanes directory, output following loop? text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb concatenated saved file called .pdb. text ethane.pdb saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb concatenated saved file called .pdb. text cubane.pdb, ethane.pdb, methane.pdb, octane.pdb, pentane.pdb propane.pdb printed screen saved file called .pdb.","code":"for datafile in *.pdb do     cat $datafile >> all.pdb done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"spaces-in-names","dir":"Instructor","previous_headings":"","what":"Spaces in Names","title":null,"text":"Spaces used separate elements list going loop . one elements contains space character, need surround quotes, thing loop variable. Suppose data files named: loop files, need add double quotes like : simpler avoid using spaces (special characters) filenames. files don’t exist, run code, head command unable find ; however, error message returned show name files expecting: Try removing quotes around $filename loop see effect quote marks spaces. Note get result loop command unicorn.dat run code creatures directory:","code":"red dragon.dat purple unicorn.dat $ for filename in \"red dragon.dat\" \"purple unicorn.dat\" > do >     head -n 100 \"$filename\" | tail -n 20 > done head: cannot open ‘red dragon.dat' for reading: No such file or directory head: cannot open ‘purple unicorn.dat' for reading: No such file or directory head: cannot open ‘red' for reading: No such file or directory head: cannot open ‘dragon.dat' for reading: No such file or directory head: cannot open ‘purple' for reading: No such file or directory CGGTACCGAA AAGGGTCGCG CAAGTGTTCC ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nelle now ready process data files using goostats.sh — shell script written supervisor. calculates statistics protein sample file takes two arguments: input file (containing raw data) output file (store calculated statistics) Since ’s still learning use shell, decides build required commands stages. first step make sure can select right input files — remember, ones whose names end ‘’ ‘B’, rather ‘Z’. Moving north-pacific-gyre directory, Nelle types: next step decide call files goostats.sh analysis program create. Prefixing input file’s name ‘stats’ seems simple, modifies loop : hasn’t actually run goostats.sh yet, now ’s sure can select right files generate right output filenames. Typing commands becoming tedious, though, Nelle worried making mistakes, instead re-entering loop, presses ↑. response, shell redisplays whole loop one line (using semi-colons separate pieces): Using ←, Nelle navigates echo command changes bash goostats.sh: presses Enter, shell runs modified command. However, nothing appears happen — output. moment, Nelle realizes since script doesn’t print anything screen longer, idea whether running, much less quickly. kills running command typing Ctrl+C, uses ↑ repeat command, edits read: runs program now, produces one line output every five seconds : 1518 times 5 seconds, divided 60, tells script take two hours run. final check, opens another terminal window, goes north-pacific-gyre, uses cat stats-NENE01729B.txt examine one output files. looks good, decides get coffee catch reading. second version one want run. prints screen everything enclosed quote marks, expanding loop variable name prefixed dollar sign. also modify create file .pdb, >> treated literally part string rather redirection instruction. first version appends output command echo cat $datafile file, .pdb. file just contain list; cat cubane.pdb, cat ethane.pdb, cat methane.pdb etc. Try versions see output! sure open .pdb file view contents. nested loop, .e. contained within another loop, species outer loop, inner loop (nested loop) iterates list temperatures, creates new directory combination. Try running code see directories created!","code":"$ cd $ cd Desktop/shell-lesson-data/north-pacific-gyre $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile > done NENE01729A.txt NENE01729B.txt NENE01736A.txt ... NENE02043A.txt NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt > do >     echo $datafile stats-$datafile > done NENE01729A.txt stats-NENE01729A.txt NENE01729B.txt stats-NENE01729B.txt NENE01736A.txt stats-NENE01736A.txt ... NENE02043A.txt stats-NENE02043A.txt NENE02043B.txt stats-NENE02043B.txt $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done $ for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done NENE01729A.txt NENE01729B.txt NENE01736A.txt ..."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"beginning-and-end","dir":"Instructor","previous_headings":"","what":"Beginning and End","title":null,"text":"can move beginning line shell typing Ctrl+end using Ctrl+E.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"those-who-know-history-can-choose-to-repeat-it","dir":"Instructor","previous_headings":"","what":"Those Who Know History Can Choose to Repeat It","title":null,"text":"Another way repeat previous work use history command get list last hundred commands executed, use !123 (‘123’ replaced command number) repeat one commands. example, Nelle types : can re-run goostats.sh files simply typing !459.","code":"$ history | tail -n 5 456  for datafile in NENE*A.txt NENE*B.txt; do   echo $datafile stats-$datafile; done 457  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile stats-$datafile; done 458  for datafile in NENE*A.txt NENE*B.txt; do bash goostats.sh $datafile stats-$datafile; done 459  for datafile in NENE*A.txt NENE*B.txt; do echo $datafile; bash goostats.sh $datafile stats-$datafile; done 460  history | tail -n 5"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"other-history-commands","dir":"Instructor","previous_headings":"","what":"Other History Commands","title":null,"text":"number shortcut commands getting history. Ctrl+R enters history search mode ‘reverse--search’ finds recent command history matches text enter next. Press Ctrl+R one additional times search earlier matches. can use left right arrow keys choose line edit hit Return run command. !! retrieves immediately preceding command (may may find convenient using ↑) !$ retrieves last word last command. ’s useful often might expect: bash goostats.sh NENE01729B.txt stats-NENE01729B.txt, can type less !$ look file stats-NENE01729B.txt, quicker ↑ editing command-line.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"doing-a-dry-run","dir":"Instructor","previous_headings":"","what":"Doing a Dry Run","title":null,"text":"loop way many things — make many mistakes wrong thing. One way check loop echo commands run instead actually running . Suppose want preview commands following loop execute without actually running commands: difference two loops , one want run?","code":"$ for datafile in *.pdb > do >     cat $datafile >> all.pdb > done # Version 1 $ for datafile in *.pdb > do >     echo cat $datafile >> all.pdb > done # Version 2 $ for datafile in *.pdb > do >     echo \"cat $datafile >> all.pdb\" > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"nested-loops","dir":"Instructor","previous_headings":"","what":"Nested Loops","title":null,"text":"Suppose want set directory structure organize experiments measuring reaction rate constants different compounds different temperatures. result following code:","code":"$ for species in cubane ethane methane > do >     for temperature in 25 30 37 40 >     do >         mkdir $species-$temperature >     done > done"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"loop repeats commands every thing list. Every loop needs variable refer thing currently operating . Use $name expand variable (.e., get value). ${name} can also used. use spaces, quotes, wildcard characters ‘*’ ‘?’ filenames, complicates variable expansion. Give files consistent names easy match wildcard patterns make easy select looping. Use -arrow key scroll previous commands edit repeat . Use Ctrl+R search previously entered commands. Use history display recent commands, ![number] repeat command number.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Shell Scripts  can save re-use commands? Write shell script runs command series commands fixed set files. Run shell script command line. Write shell script operates set files defined user command line. Create pipelines include shell scripts , others, written. finally ready see makes shell powerful programming environment. going take commands repeat frequently save files can re-run operations later typing single command. historical reasons, bunch commands saved file usually called shell script, make mistake — actually small programs. writing shell scripts make work faster, also won’t retype commands . also make accurate (fewer chances typos) reproducible. come back work later (someone else finds work wants build ), able reproduce results simply running script, rather remember retype long list commands. Let’s start going back alkanes/ creating new file, middle.sh become shell script: command nano middle.sh opens file middle.sh within text editor ‘nano’ (runs within shell). file exist, created. can use text editor directly edit file inserting following line: variation pipe constructed earlier, selects lines 11-15 file octane.pdb. Remember, running command just yet; incorporating commands file. save file (Ctrl-O nano) exit text editor (Ctrl-X nano). Check directory alkanes now contains file called middle.sh. saved file, can ask shell execute commands contains. shell called bash, run following command: Sure enough, script’s output exactly get ran pipeline directly. want select lines arbitrary file? edit middle.sh time change filename, probably take longer typing command shell executing new file name. Instead, let’s edit middle.sh make versatile: Now, within “nano”, replace text octane.pdb special variable called $1: Inside shell script, $1 means ‘first filename (argument) command line’. can now run script like : different file like : Currently, need edit middle.sh time want adjust range lines returned. Let’s fix configuring script instead use three command-line arguments. first command-line argument ($1), additional argument provide accessible via special variables $1, $2, $3, refer first, second, third command-line arguments, respectively. Knowing , can use additional arguments define range lines passed head tail respectively: can now run: changing arguments command, can change script’s behaviour: works, may take next person reads middle.sh moment figure . can improve script adding comments top: comment starts # character runs end line. computer ignores comments, ’re invaluable helping people (including future self) understand use scripts. caveat time modify script, check comment still accurate. explanation sends reader wrong direction worse none . want process many files single pipeline? example, want sort .pdb files length, type: wc -l lists number lines files (recall wc stands ‘word count’, adding -l option means ‘count lines’ instead) sort -n sorts things numerically. put file, ever sort list .pdb files current directory. want able get sorted list kinds files, need way get names script. can’t use $1, $2, don’t know many files . Instead, use special variable $@, means, ‘command-line arguments shell script’. also put $@ inside double-quotes handle case arguments containing spaces (\"$@\" special syntax equivalent \"$1\" \"$2\" …). ’s example: Suppose just run series commands something useful — example, creating graph ’d like use paper. ’d like able re-create graph later need , want save commands file. Instead typing (potentially getting wrong) can : file redo-figure-3.sh now contains: moment’s work editor remove serial numbers commands, remove final line called history command, completely accurate record created figure. command causes something crash hang, might useful know command , order investigate problem. command recorded running , record last command run event crash. practice, people develop shell scripts running commands shell prompt times make sure ’re right thing, saving file re-use. style work allows people recycle discover data workflow one call history bit editing clean output save shell script. Nelle’s supervisor insisted analytics must reproducible. easiest way capture steps script. First return Nelle’s project directory: creates file using nano … …contains following: saves file called -stats.sh can now re-first stage analysis typing: can also : output just number files processed rather names files processed. One thing note Nelle’s script lets person running decide files process. written : advantage always selects right files: doesn’t remember exclude ‘Z’ files. disadvantage always selects just files — can’t run files (including ‘Z’ files), ‘G’ ‘H’ files colleagues Antarctica producing, without editing script. wanted adventurous, modify script check command-line arguments, use NENE*.txt NENE*B.txt none provided. course, introduces another tradeoff flexibility complexity. correct answer 2. special variables $1, $2 $3 represent command line arguments given script, commands run : shell expand '*.pdb' enclosed quote marks. , first argument script '*.pdb' gets expanded within script head tail. first part pipeline, wc -l $1/*.$2 | sort -n, counts lines file sorts numerically (largest last). ’s one file, wc also outputs final summary line, giving total number lines across files. use tail -n 2 | head -n 1 throw away last line. wc -l $1/*.$2 | sort -n | tail -n 1 ’ll see final summary line: can build pipeline pieces sure understand output. case, shell expands wildcard *.pdb passing resulting list file names arguments script. Script 1 print list files containing dot name. arguments passed script actually used anywhere script. Script 2 print contents first 3 files .pdb file extension. $1, $2, $3 refer first, second, third argument respectively. Script 3 print arguments script (.e. .pdb files), followed .pdb. $@ refers arguments given shell script. -x option causes bash run debug mode. prints command run, help locate errors. example, can see echo isn’t printing anything. made typo loop variable name, variable datfile doesn’t exist, hence returning empty string.","code":"$ cd alkanes $ nano middle.sh head -n 15 octane.pdb | tail -n 5 $ bash middle.sh ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00 ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00 ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00 ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00 ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00 $ nano middle.sh head -n 15 \"$1\" | tail -n 5 $ bash middle.sh octane.pdb ATOM      9  H           1      -4.502   0.681   0.785  1.00  0.00 ATOM     10  H           1      -5.254  -0.243  -0.537  1.00  0.00 ATOM     11  H           1      -4.357   1.252  -0.895  1.00  0.00 ATOM     12  H           1      -3.009  -0.741  -1.467  1.00  0.00 ATOM     13  H           1      -3.172  -1.337   0.206  1.00  0.00 $ bash middle.sh pentane.pdb ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00 ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00 ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00 ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00 ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00 $ nano middle.sh head -n \"$2\" \"$1\" | tail -n \"$3\" $ bash middle.sh pentane.pdb 15 5 ATOM      9  H           1       1.324   0.350  -1.332  1.00  0.00 ATOM     10  H           1       1.271   1.378   0.122  1.00  0.00 ATOM     11  H           1      -0.074  -0.384   1.288  1.00  0.00 ATOM     12  H           1      -0.048  -1.362  -0.205  1.00  0.00 ATOM     13  H           1      -1.183   0.500  -1.412  1.00  0.00 $ bash middle.sh pentane.pdb 20 5 ATOM     14  H           1      -1.259   1.420   0.112  1.00  0.00 ATOM     15  H           1      -2.608  -0.407   1.130  1.00  0.00 ATOM     16  H           1      -2.540  -1.303  -0.404  1.00  0.00 ATOM     17  H           1      -3.393   0.254  -0.321  1.00  0.00 TER      18              1 $ nano middle.sh # Select lines from the middle of a file. # Usage: bash middle.sh filename end_line num_lines head -n \"$2\" \"$1\" | tail -n \"$3\" $ wc -l *.pdb | sort -n $ nano sorted.sh # Sort files by their length. # Usage: bash sorted.sh one_or_more_filenames wc -l \"$@\" | sort -n $ bash sorted.sh *.pdb ../creatures/*.dat 9 methane.pdb 12 ethane.pdb 15 propane.pdb 20 cubane.pdb 21 pentane.pdb 30 octane.pdb 163 ../creatures/basilisk.dat 163 ../creatures/minotaur.dat 163 ../creatures/unicorn.dat 596 total # Script to find unique species in csv files where species is the second data field # This script accepts any number of file names as command line arguments  # Loop over all files for file in $@ do     echo \"Unique species in $file:\"     # Extract species names     cut -d , -f 2 $file | sort | uniq done $ history | tail -n 5 > redo-figure-3.sh 297 bash goostats.sh NENE01729B.txt stats-NENE01729B.txt 298 bash goodiff.sh stats-NENE01729B.txt /data/validated/01729.txt > 01729-differences.txt 299 cut -d ',' -f 2-3 01729-differences.txt > 01729-time-series.txt 300 ygraph --format scatter --color bw --borders none 01729-time-series.txt figure-3.png 301 history | tail -n 5 > redo-figure-3.sh $ cd ../../north-pacific-gyre/ $ nano do-stats.sh # Calculate stats for data files. for datafile in \"$@\" do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ bash do-stats.sh NENE*A.txt NENE*B.txt $ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l # Calculate stats for Site A and Site B data files. for datafile in NENE*A.txt NENE*B.txt do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb # Shell script which takes two arguments: #    1. a directory name #    2. a file extension # and prints the name of the file in that directory # with the most lines which matches the file extension.  wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1 cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"text-vs--whatever","dir":"Instructor","previous_headings":"","what":"Text vs. Whatever","title":null,"text":"usually call programs like Microsoft Word LibreOffice Writer “text editors”, need bit careful comes programming. default, Microsoft Word uses .docx files store text, also formatting information fonts, headings, . extra information isn’t stored characters doesn’t mean anything tools like head, expects input files contain nothing letters, digits, punctuation standard computer keyboard. editing programs, therefore, must either use plain text editor careful save files plain text.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"double-quotes-around-arguments","dir":"Instructor","previous_headings":"","what":"Double-Quotes Around Arguments","title":null,"text":"reason put loop variable inside double-quotes, case filename happens contain spaces, surround $1 double-quotes.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"list-unique-species","dir":"Instructor","previous_headings":"","what":"List Unique Species","title":null,"text":"Leah several hundred data files, formatted like : example type file given shell-lesson-data/exercise-data/animal-counts/animals.csv. can use command cut -d , -f 2 animals.csv | sort | uniq produce unique species animals.csv. order avoid type series commands every time, scientist may choose write shell script instead. Write shell script called species.sh takes number filenames command-line arguments uses variation command print list unique species appearing files separately.","code":"2013-11-05,deer,5 2013-11-05,rabbit,22 2013-11-05,raccoon,7 2013-11-06,rabbit,19 2013-11-06,deer,2 2013-11-06,fox,1 2013-11-07,rabbit,18 2013-11-07,bear,1"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"why-record-commands-in-the-history-before-running-them","dir":"Instructor","previous_headings":"","what":"Why Record Commands in the History Before Running Them?","title":null,"text":"run command: last command file history command , .e., shell added history command log actually running . fact, shell always adds commands log running . think ?","code":"$ history | tail -n 5 > recent.sh"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Nelle’s supervisor insisted analytics must reproducible. easiest way capture steps script. First return Nelle’s project directory: creates file using nano … …contains following: saves file called -stats.sh can now re-first stage analysis typing: can also : output just number files processed rather names files processed. One thing note Nelle’s script lets person running decide files process. written : advantage always selects right files: doesn’t remember exclude ‘Z’ files. disadvantage always selects just files — can’t run files (including ‘Z’ files), ‘G’ ‘H’ files colleagues Antarctica producing, without editing script. wanted adventurous, modify script check command-line arguments, use NENE*.txt NENE*B.txt none provided. course, introduces another tradeoff flexibility complexity. correct answer 2. special variables $1, $2 $3 represent command line arguments given script, commands run : shell expand '*.pdb' enclosed quote marks. , first argument script '*.pdb' gets expanded within script head tail. first part pipeline, wc -l $1/*.$2 | sort -n, counts lines file sorts numerically (largest last). ’s one file, wc also outputs final summary line, giving total number lines across files. use tail -n 2 | head -n 1 throw away last line. wc -l $1/*.$2 | sort -n | tail -n 1 ’ll see final summary line: can build pipeline pieces sure understand output. case, shell expands wildcard *.pdb passing resulting list file names arguments script. Script 1 print list files containing dot name. arguments passed script actually used anywhere script. Script 2 print contents first 3 files .pdb file extension. $1, $2, $3 refer first, second, third argument respectively. Script 3 print arguments script (.e. .pdb files), followed .pdb. $@ refers arguments given shell script. -x option causes bash run debug mode. prints command run, help locate errors. example, can see echo isn’t printing anything. made typo loop variable name, variable datfile doesn’t exist, hence returning empty string.","code":"$ cd ../../north-pacific-gyre/ $ nano do-stats.sh # Calculate stats for data files. for datafile in \"$@\" do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ bash do-stats.sh NENE*A.txt NENE*B.txt $ bash do-stats.sh NENE*A.txt NENE*B.txt | wc -l # Calculate stats for Site A and Site B data files. for datafile in NENE*A.txt NENE*B.txt do     echo $datafile     bash goostats.sh $datafile stats-$datafile done $ head -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb $ tail -n 1 cubane.pdb ethane.pdb octane.pdb pentane.pdb propane.pdb # Shell script which takes two arguments: #    1. a directory name #    2. a file extension # and prints the name of the file in that directory # with the most lines which matches the file extension.  wc -l $1/*.$2 | sort -n | tail -n 2 | head -n 1 cubane.pdb ethane.pdb methane.pdb octane.pdb pentane.pdb propane.pdb.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"variables-in-shell-scripts","dir":"Instructor","previous_headings":"","what":"Variables in Shell Scripts","title":null,"text":"alkanes directory, imagine shell script called script.sh containing following commands: alkanes directory, type following command: following outputs expect see? lines first last lines file ending .pdb alkanes directory first last line file ending .pdb alkanes directory first last line file alkanes directory error quotes around *.pdb","code":"head -n $2 $1 tail -n $3 $1 $ bash script.sh '*.pdb' 1 1"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"find-the-longest-file-with-a-given-extension","dir":"Instructor","previous_headings":"","what":"Find the Longest File With a Given Extension","title":null,"text":"Write shell script called longest.sh takes name directory filename extension arguments, prints name file lines directory extension. example: print name .pdb file shell-lesson-data/exercise-data/alkanes lines. Feel free test script another directory e.g.","code":"$ bash longest.sh shell-lesson-data/exercise-data/alkanes pdb $ bash longest.sh shell-lesson-data/exercise-data/writing txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"script-reading-comprehension","dir":"Instructor","previous_headings":"","what":"Script Reading Comprehension","title":null,"text":"question, consider shell-lesson-data/exercise-data/alkanes directory . contains number .pdb files addition files may created. Explain following three scripts run bash script1.sh *.pdb, bash script2.sh *.pdb, bash script3.sh *.pdb respectively.","code":"# Script 1 echo *.* # Script 2 for filename in $1 $2 $3 do     cat $filename done # Script 3 echo $@.pdb"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"debugging-scripts","dir":"Instructor","previous_headings":"","what":"Debugging Scripts","title":null,"text":"Suppose saved following script file called -errors.sh Nelle’s north-pacific-gyre directory: run north-pacific-gyre directory: output blank. figure , re-run script using -x option: output showing ? line responsible error?","code":"# Calculate stats for data files. for datafile in \"$@\" do     echo $datfile     bash goostats.sh $datafile stats-$datafile done $ bash do-errors.sh NENE*A.txt NENE*B.txt $ bash -x do-errors.sh NENE*A.txt NENE*B.txt"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Save commands files (usually called shell scripts) re-use. bash [filename] runs commands saved file. $@ refers shell script’s command-line arguments. $1, $2, etc., refer first command-line argument, second command-line argument, etc. Place variables quotes values might spaces . Letting users decide files process flexible consistent built-Unix commands.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Finding Things  can find files? can find things files? Use grep select lines text files match simple patterns. Use find find files directories whose names match simple patterns. Use output one command command-line argument(s) another command. Explain meant ‘text’ ‘binary’ files, many common tools don’t handle latter well. way many us now use ‘Google’ verb meaning ‘find’, Unix programmers often use word ‘grep’. ‘grep’ contraction ‘global/regular expression/print’, common sequence operations early Unix text editors. also name useful command-line program. grep finds prints lines files match pattern. examples, use file contains three haiku taken 1998 competition Salon magazine (Credit authors Bill Torcaso, Howard Korder, Margaret Segall, respectively. See Haiku Error Messsages archived Page 1 Page 2 .). set examples, ’re going working writing subdirectory: Let’s find lines contain word ‘’: , pattern ’re searching . grep command searches file, looking matches pattern specified. use type grep, pattern ’re searching finally name file (files) ’re searching . output three lines file contain letters ‘’. default, grep searches pattern case-sensitive way. addition, search pattern selected form complete word, see next example. Let’s search pattern: ‘’. time, two lines include letters ‘’ outputted, one contained search pattern within larger word, ‘Thesis’. restrict matches lines containing word ‘’ , can give grep -w option. limit matches word boundaries. Later lesson, also see can change search behavior grep respect case sensitivity. Note ‘word boundary’ includes start end line, just letters surrounded spaces. Sometimes don’t want search single word, phrase. can also grep putting phrase quotes. ’ve now seen don’t quotes around single words, useful use quotes searching multiple words. also helps make easier distinguish search term phrase file searched. use quotes remaining examples. Another useful option -n, numbers lines match: , can see lines 5, 9, 10 contain letters ‘’. can combine options (.e. flags) Unix commands. example, let’s find lines contain word ‘’. can combine option -w find lines contain word ‘’ -n number lines match: Now want use option -make search case-insensitive: Now, want use option -v invert search, .e., want output lines contain word ‘’. use -r (recursive) option, grep can search pattern recursively set files subdirectories. Let’s search recursively Yesterday shell-lesson-data/exercise-data/writing directory: grep lots options. find , can type: correct answer 3, -w option looks whole-word matches. options also match ‘’ part another word. Actually, can swap order two cut commands still works. command line, try changing order cut commands, look output step see case. call script like : Alternative, slightly inferior solution: solution inferior grep -c reports number lines matched. total number matches reported method lower one match per line. Perceptive observers may noticed character names sometimes appear -uppercase chapter titles (e.g. ‘MEG GOES VANITY FAIR’). wanted count well, add -option case-insensitivity (though case, doesn’t affect answer sister mentioned frequently). grep finds lines files, find command finds files . , lot options; show simplest ones work, ’ll use shell-lesson-data/exercise-data directory tree shown . exercise-data directory contains one file, numbers.txt four directories: animal-counts, creatures, alkanes writing containing various files. first command, let’s run find . (remember run command shell-lesson-data/exercise-data folder). always, . means current working directory, want search start. find’s output names every file directory current working directory. can seem useless first find many options filter output lesson discover . first option list -type d means ‘things directories’. Sure enough, find’s output names five directories (including .): Notice objects find finds listed particular order. change -type d -type f, get listing files instead: Now let’s try matching name: expected find text files, prints ./numbers.txt. problem shell expands wildcard characters like * commands run. Since *.txt current directory expands ./numbers.txt, command actually ran : find asked; just asked wrong thing. get want, let’s grep: put *.txt quotes prevent shell expanding * wildcard. way, find actually gets pattern *.txt, expanded filename numbers.txt: said earlier, command line’s power lies combining tools. ’ve seen pipes; let’s look another technique. just saw, find . -name \"*.txt\" gives us list text files current directory. can combine wc -l count lines files? simplest way put find command inside $(): shell executes command, first thing run whatever inside $(). replaces $() expression command’s output. Since output find three filenames ./writing/LittleWomen.txt, ./writing/haiku.txt, ./numbers.txt, shell constructs command: wanted. expansion exactly shell expands wildcards like * ?, lets us use command want ‘wildcard’. ’s common use find grep together. first finds files match pattern; second looks lines inside files match another pattern. , example, can find txt files contain word “searching” looking string ‘searching’ .txt files current directory: Option 1 correct. Putting match expression quotes prevents shell expanding , gets passed find command. Option 2 also works instance shell tries expand *.dat *.dat files current directory, wildcard expression gets passed find. first encountered episode 3. Option 3 incorrect searches contents files lines match ‘unicorn’, rather searching file names. Unix shell older people use . survived long one productive programming environments ever created — maybe even productive. syntax may cryptic, people mastered can experiment different commands interactively, use learned automate work. Graphical user interfaces may easier use first, learned, productivity shell unbeatable. Alfred North Whitehead wrote 1911, ‘Civilization advances extending number important operations can perform without thinking .’ Find files .dat extension recursively current directory Count number lines files contains Sort output step 2. numerically","code":"$ cd $ cd Desktop/shell-lesson-data/exercise-data/writing $ cat haiku.txt The Tao that is seen Is not the true Tao, until You bring fresh toner.  With searching comes loss and the presence of absence: \"My Thesis\" not found.  Yesterday it worked Today it is not working Software is like that. $ grep not haiku.txt Is not the true Tao, until \"My Thesis\" not found Today it is not working $ grep The haiku.txt The Tao that is seen \"My Thesis\" not found. $ grep -w The haiku.txt The Tao that is seen $ grep -w \"is not\" haiku.txt Today it is not working $ grep -n \"it\" haiku.txt 5:With searching comes loss 9:Yesterday it worked 10:Today it is not working $ grep -n -w \"the\" haiku.txt 2:Is not the true Tao, until 6:and the presence of absence: $ grep -n -w -i \"the\" haiku.txt 1:The Tao that is seen 2:Is not the true Tao, until 6:and the presence of absence: $ grep -n -w -v \"the\" haiku.txt 1:The Tao that is seen 3:You bring fresh toner. 4: 5:With searching comes loss 7:\"My Thesis\" not found. 8: 9:Yesterday it worked 10:Today it is not working 11:Software is like that. $ grep -r Yesterday . ./LittleWomen.txt:\"Yesterday, when Aunt was asleep and I was trying to be as still as a ./LittleWomen.txt:Yesterday at dinner, when an Austrian officer stared at us and then ./LittleWomen.txt:Yesterday was a quiet day spent in teaching, sewing, and writing in my ./haiku.txt:Yesterday it worked $ grep --help Usage: grep [OPTION]... PATTERN [FILE]... Search for PATTERN in each FILE or standard input. PATTERN is, by default, a basic regular expression (BRE). Example: grep -i 'hello world' menu.h main.c  Regexp selection and interpretation:   -E, --extended-regexp     PATTERN is an extended regular expression (ERE)   -F, --fixed-strings       PATTERN is a set of newline-separated fixed strings   -G, --basic-regexp        PATTERN is a basic regular expression (BRE)   -P, --perl-regexp         PATTERN is a Perl regular expression   -e, --regexp=PATTERN      use PATTERN for matching   -f, --file=FILE           obtain PATTERN from FILE   -i, --ignore-case         ignore case distinctions   -w, --word-regexp         force PATTERN to match only whole words   -x, --line-regexp         force PATTERN to match only whole lines   -z, --null-data           a data line ends in 0 byte, not newline  Miscellaneous: ...        ...        ... grep -w $1 -r $2 | cut -d : -f 2 | cut -d , -f 1,3 > $1.txt $ bash count-species.sh bear . for sis in Jo Meg Beth Amy do     echo $sis:     grep -ow $sis LittleWomen.txt | wc -l done for sis in Jo Meg Beth Amy do     echo $sis:     grep -ocw $sis LittleWomen.txt done . ├── animal-counts/ │   └── animals.csv ├── creatures/ │   ├── basilisk.dat │   ├── minotaur.dat │   └── unicorn.dat ├── numbers.txt ├── alkanes/ │   ├── cubane.pdb │   ├── ethane.pdb │   ├── methane.pdb │   ├── octane.pdb │   ├── pentane.pdb │   └── propane.pdb └── writing/     ├── haiku.txt     └── LittleWomen.txt $ find . . ./writing ./writing/LittleWomen.txt ./writing/haiku.txt ./creatures ./creatures/basilisk.dat ./creatures/unicorn.dat ./creatures/minotaur.dat ./animal-counts ./animal-counts/animals.csv ./numbers.txt ./alkanes ./alkanes/ethane.pdb ./alkanes/propane.pdb ./alkanes/octane.pdb ./alkanes/pentane.pdb ./alkanes/methane.pdb ./alkanes/cubane.pdb $ find . -type d . ./writing ./creatures ./animal-counts ./alkanes $ find . -type f ./writing/LittleWomen.txt ./writing/haiku.txt ./creatures/basilisk.dat ./creatures/unicorn.dat ./creatures/minotaur.dat ./animal-counts/animals.csv ./numbers.txt ./alkanes/ethane.pdb ./alkanes/propane.pdb ./alkanes/octane.pdb ./alkanes/pentane.pdb ./alkanes/methane.pdb ./alkanes/cubane.pdb $ find . -name *.txt ./numbers.txt $ find . -name numbers.txt $ find . -name \"*.txt\" ./writing/LittleWomen.txt ./writing/haiku.txt ./numbers.txt $ wc -l $(find . -name \"*.txt\") 21022 ./writing/LittleWomen.txt      11 ./writing/haiku.txt       5 ./numbers.txt   21038 total $ wc -l ./writing/LittleWomen.txt ./writing/haiku.txt ./numbers.txt $ grep \"searching\" $(find . -name \"*.txt\") ./writing/LittleWomen.txt:sitting on the top step, affected to be searching for her book, but was ./writing/haiku.txt:With searching comes loss"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"using-grep","dir":"Instructor","previous_headings":"","what":"Using grep","title":null,"text":"command result following output: grep \"\" haiku.txt grep -E \"\" haiku.txt grep -w \"\" haiku.txt grep -\"\" haiku.txt","code":"and the presence of absence:"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"wildcards","dir":"Instructor","previous_headings":"","what":"Wildcards","title":null,"text":"grep‘s real power doesn’t come options, though; comes fact patterns can include wildcards. (technical name regular expressions, ’re’ ‘grep’ stands .) Regular expressions complex powerful; want complex searches, please look lesson website. taster, can find lines ‘o’ second position like : use -E option put pattern quotes prevent shell trying interpret . (pattern contained *, example, shell try expand running grep.) ^ pattern anchors match start line. . matches single character (just like ? shell), o matches actual ‘o’.","code":"$ grep -E \"^.o\" haiku.txt You bring fresh toner. Today it is not working Software is like that."},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"tracking-a-species","dir":"Instructor","previous_headings":"","what":"Tracking a Species","title":null,"text":"Leah several hundred data files saved one directory, formatted like : wants write shell script takes species first command-line argument directory second argument. script return one file called <species>.txt containing list dates number species seen date. example using data shown , rabbit.txt contain: , line contains individual command, pipe. Arrange sequence one command order achieve Leah’s goal: Hint: use man grep look grep text recursively directory man cut select one field line. example file provided shell-lesson-data/exercise-data/animal-counts/animals.csv","code":"2012-11-05,deer,5 2012-11-05,rabbit,22 2012-11-05,raccoon,7 2012-11-06,rabbit,19 2012-11-06,deer,2 2012-11-06,fox,4 2012-11-07,rabbit,16 2012-11-07,bear,1 2012-11-05,22 2012-11-06,19 2012-11-07,16 cut -d : -f 2 > | grep -w $1 -r $2 | $1.txt cut -d , -f 1,3"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"little-women","dir":"Instructor","previous_headings":"","what":"Little Women","title":null,"text":"friend, just finished reading Little Women Louisa May Alcott, argument. four sisters book, Jo, Meg, Beth, Amy, friend thinks Jo mentioned. , however, certain Amy. Luckily, file LittleWomen.txt containing full text novel (shell-lesson-data/exercise-data/writing/LittleWomen.txt). Using loop, tabulate number times four sisters mentioned? Hint: one solution might employ commands grep wc |, another might utilize grep options. often one way solve programming task, particular solution usually chosen based combination yielding correct result, elegance, readability, speed.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"listing-vs--finding","dir":"Instructor","previous_headings":"","what":"Listing vs. Finding","title":null,"text":"ls find can made similar things given right options, normal circumstances, ls lists everything can, find searches things certain properties shows .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"matching-and-subtracting","dir":"Instructor","previous_headings":"","what":"Matching and Subtracting","title":null,"text":"-v option grep inverts pattern matching, lines match pattern printed. Given , following commands find .dat files creatures except unicorn.dat? thought answer, can test commands shell-lesson-data/exercise-data directory. find creatures -name \"*.dat\" | grep -v unicorn find creatures -name *.dat | grep -v unicorn grep -v \"unicorn\" $(find creatures -name \"*.dat\") None .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"binary-files","dir":"Instructor","previous_headings":"","what":"Binary Files","title":null,"text":"focused exclusively finding patterns text files. data stored images, databases, format? handful tools extend grep handle non text formats. generalizable approach convert data text, extract text-like elements data. one hand, makes simple things easy . hand, complex things usually impossible. example, ’s easy enough write program extract X Y dimensions image files grep play , write something find values spreadsheet whose cells contained formulas? last option recognize shell text processing limits, use another programming language. time comes , don’t hard shell. Many modern programming languages borrowed lot ideas , imitation also sincerest form praise.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":"find-pipeline-reading-comprehension","dir":"Instructor","previous_headings":"","what":"find Pipeline Reading Comprehension","title":null,"text":"Write short explanatory comment following shell script:","code":"wc -l $(find . -name \"*.dat\") | sort -n"},{"path":"https://ErinBecker.github.io/shell-novice/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"find finds files specific properties match patterns. grep selects lines files match patterns. --help option supported many bash commands, programs can run within Bash, display information use commands programs. man [command] displays manual page given command. $([command]) inserts command’s output place.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/discuss.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"command find whoami, command find called whereami, pwd instead? usual answer early 1970s, Unix first developed, every keystroke counted: devices day slow, backspacing teletype painful cutting number keystrokes order cut number typing mistakes actually win usability. reality commands added Unix one one, without master plan, people immersed jargon. result inconsistent roolz uv Inglish speling, ’re stuck now.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/discuss.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"shell accepts special commands allow users interact running processes programs. can enter “control codes” holding Ctrl key pressing one control characters. tutorials, may see term Control ^ used represent Ctrl key (e.g. following equivalent Ctrl-C, Ctrl+C, Control-C, Control+C, ^C). Ctrl-C: interrupts cancels running program. useful want cancel command taking long execute. Ctrl-D: indicates end file stream characters entering command line. example, saw earlier wc command counts lines, words, characters file. just type wc hit Enter key without providing file name, wc assume want analyze stuff type next. typing magnum opus directly shell prompt, can type Ctrl-D tell wc ’re done ’d like see results word count. Ctrl-Z: Suspends process terminate . can use command fg restart job foreground. new shell users, control codes can appear effect: make things “go away.” helpful understand differences. general, something went wrong just want get shell prompt back, better use Ctrl-C.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/discuss.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Bash became popular end nineties, scientists widely used (still use) another shell, C-shell, Csh. Bash Csh similar feature sets, syntax rules different makes incompatible . shells appeared since, including ksh, zsh, number others; mostly compatible Bash, Bash default shell modern implementations Unix (including packages provide Unix-like tools Windows) get strange errors shell scripts written colleagues, check see shell written .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/discuss.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Want customize paths, environment variables, aliases, behaviors shell? excellent blog post “Bash Configurations Demystified” Dalton Hubble covers tips, tricks, avoid dangers.","code":""},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/instructor/images.html","id":"02-filedir-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘file system made root directory contains sub-directories titled bin, data, users, tmp’ Image 1 1: ‘Like directories, home directories sub-directories underneath \"/Users\" like \"/Users/imhotep\", \"/Users/larry\" \"/Users/nelle\"’ Image 1 1: ‘directory tree Users directory \"/Users\" contains directories \"backup\" \"thing\"; \"/Users/backup\" contains \"original\",\"pnas_final\" \"pnas_sub\"; \"/Users/thing\" contains \"backup\"; \"/Users/thing/backup\" contains \"2012-12-01\", \"2013-01-08\" \"2013-01-27\"’ Image 1 1: ‘directory tree Users directory \"/Users\" contains directories \"backup\" \"thing\"; \"/Users/backup\" contains \"original\",\"pnas_final\" \"pnas_sub\"; \"/Users/thing\" contains \"backup\"; \"/Users/thing/backup\" contains \"2012-12-01\", \"2013-01-08\" \"2013-01-27\"’ Image 1 1: ‘General syntax shell command’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/images.html","id":"03-create-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘screenshot nano text editor action text publish perish , share thrive’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/images.html","id":"04-pipefilter-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘Redirects Pipes different commands: \"wc -l *.pdb\" direct theoutput shell. \"wc -l *.pdb > lengths\" direct output file\"lengths\". \"wc -l *.pdb | sort -n | head -n 1\" build pipeline theoutput \"wc\" command input \"sort\" command, output ofthe \"sort\" command input \"head\" command output \"head\" command directed shell’","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/images.html","id":"05-loop-figure-1","dir":"Instructor","previous_headings":"","what":"Figure 1","title":null,"text":"Image 1 1: ‘loop \"filename .dat; echo cp $filename original-$filename;done\" successively assign names \".dat\" files currentdirectory variable \"$filename\" execute command. thefiles \"basilisk.dat\", \"minotaur.dat\" \"unicorn.dat\" current directorythe loop successively call echo command three times print threelines: \"cp basislisk.dat original-basilisk.dat\", \"cp minotaur.datoriginal-minotaur.dat\" finally \"cp unicorn.datoriginal-unicorn.dat\"’","code":""},{"path":[]},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/instructor/index.html","id":"prerequisites","dir":"Instructor","previous_headings":"","what":"Prerequisites","title":null,"text":"lesson guides basics file systems shell. stored files computer recognize word “file” either “directory” “folder” (two common words thing), ’re ready lesson. ’re already comfortable manipulating files directories, searching files grep find, writing simple loops scripts, probably want explore next lesson: shell-extras.","code":""},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/instructor/index.html","id":"headingSolution1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"need download files follow lesson. Download shell-lesson-data.zip move file Desktop. Unzip/extract file. Let instructor know need help step. end new folder called shell-lesson-data Desktop. already shell software installed, need download install . installing software Open terminal. ’re sure open terminal operating system, see instructions . terminal type cd press Return key. step make sure start home folder working directory. lesson, find access data files folder. Computers Windows operating systems automatically Unix Shell program installed. lesson, encourage use emulator included Git Windows, gives access Bash shell commands Git. installed, can open terminal running program Git Bash Windows start menu. advanced users: alternative Git Windows may wish Install Windows Subsystem Linux gives access Bash shell command-line tool Windows 10 . Please note commands Windows Subsystem Linux (WSL) may differ slightly shown lesson presented workshop. Mac computer running macOS Mojave earlier releases, default Unix Shell Bash. Mac computer running macOS Catalina later releases, default Unix Shell Zsh. default shell available via Terminal program within Utilities folder. open Terminal, try one following: Finder, select Go menu, select Utilities. Locate Terminal Utilities folder open . Use Mac ‘Spotlight’ computer search function. Search : Terminal press Return. check machine set use something Bash, type echo $SHELL terminal window. machine set use something Bash, can run opening terminal typing bash. Use Terminal Mac default Unix Shell Linux operating systems usually Bash. versions Linux, accessible running Gnome Terminal KDE Konsole xterm, can found via applications menu search bar. machine set use something Bash, can run opening terminal typing bash.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"need download files follow lesson. Download shell-lesson-data.zip move file Desktop. Unzip/extract file. Let instructor know need help step. end new folder called shell-lesson-data Desktop.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"already shell software installed, need download install .","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/index.html","id":"headingSolution1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"installing software Open terminal. ’re sure open terminal operating system, see instructions . terminal type cd press Return key. step make sure start home folder working directory. lesson, find access data files folder. Computers Windows operating systems automatically Unix Shell program installed. lesson, encourage use emulator included Git Windows, gives access Bash shell commands Git. installed, can open terminal running program Git Bash Windows start menu. advanced users: alternative Git Windows may wish Install Windows Subsystem Linux gives access Bash shell command-line tool Windows 10 . Please note commands Windows Subsystem Linux (WSL) may differ slightly shown lesson presented workshop. Mac computer running macOS Mojave earlier releases, default Unix Shell Bash. Mac computer running macOS Catalina later releases, default Unix Shell Zsh. default shell available via Terminal program within Utilities folder. open Terminal, try one following: Finder, select Go menu, select Utilities. Locate Terminal Utilities folder open . Use Mac ‘Spotlight’ computer search function. Search : Terminal press Return. check machine set use something Bash, type echo $SHELL terminal window. machine set use something Bash, can run opening terminal typing bash. Use Terminal Mac default Unix Shell Linux operating systems usually Bash. versions Linux, accessible running Gnome Terminal KDE Konsole xterm, can found via applications menu search bar. machine set use something Bash, can run opening terminal typing bash.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/index.html","id":"where-to-type-commands-how-to-open-a-new-shell","dir":"Instructor","previous_headings":"","what":"Where to type commands: How to open a new shell","title":null,"text":"shell program enables us send commands computer receive output. also referred terminal command line. computers include default Unix Shell program. steps describe methods identifying opening Unix Shell program already one installed. also options identifying downloading Unix Shell program, Linux/UNIX emulator, program access Unix Shell server. none options address circumstances, try online search : Unix shell [computer model] [operating system].","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/instructor-notes.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Many people questioned whether still teach shell. , anyone wants rename several thousand data files can easily interactively Python interpreter, anyone ’s serious data analysis probably going work inside IPython Notebook R Studio. teach shell? first answer , “much else depends .” Installing software, configuring default editor, controlling remote machines frequently assume basic familiarity shell, related ideas like standard input output. Many tools also use terminology (example, %ls %cd magic commands IPython). second answer , “’s easy way introduce fundamental ideas use computers.” teach people use Unix shell, teach get computer repeat things (via tab completion, ! followed command number, loops) rather repeating things . also teach take things ’ve discovered frequently save later re-use (via shell scripts), give things sensible names, write little bit documentation (like comment top shell scripts) make future selves’ lives better. third answer , “enables use many domain-specific tools compute resources researchers access otherwise.” Familiarity shell useful remote accessing machines, using high-performance computing infrastructure, running new specialist tools many disciplines. teach HPC domain-specific skills lay groundwork development skills. particular, understanding syntax commands, flags, help systems useful domain specific tools understanding file system (navigate ) useful remote access. Finally, perhaps importantly, teaching people shell lets us teach think programming terms function composition. case shell, takes form pipelines rather nested function calls, core idea “small pieces, loosely joined” . material can covered three hours long learners using Windows run roadblocks : able figure home directory (particularly ’re using Cygwin); able run plain text editor; shell refusing run scripts include DOS line endings.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/instructor-notes.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Use data directory -workshop exercises live coding examples. can clone shell-novice directory use Download ZIP button right get entire Git repository. also now provide zip file data directory Setup page. Website: various practices used. Option 1: Can give links learners lesson can follow along, catch , see exercises (particularly ’re following lesson content without many changes). Option 2: Don’t show website learners lesson, can distracting: students may read instead listen, another window open additional cognitive load. case, make sure point website post-workshop reference. Content: Unless truly generous amount time (4+ hours), likely cover material lesson single half-day session. Plan ahead might skip, really want emphasize, etc. Exercises: Think advance might want handle exercises lesson. assigning (website, slide, handout)? want everyone try show solution? learner show solution? groups different exercise present solutions? Reference page can printed given students reference, choice. preparation: Feel free add examples side comments, know shouldn’t necessary: topics commands can taught given lesson pages. think place lesson lacking, feel free file issue submit pull request.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/instructor-notes.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Super cool online resource! http://explainshell.com/ dissect shell command type display help text piece. Additional nice manual tool http://tldr.sh/ short descriptive manuals shell commands, useful especially Windows using Git BASH man work. Another super cool online resource http://www.shellcheck.net, check shell scripts (uploaded typed ) common errors. Resources “splitting” shell recent commands remain view: https://github.com/rgaiacs/swc-shell-split-window. Tab completion sounds like small thing: isn’t. Re-running old commands using !123 !wc isn’t small thing either, neither wildcard expansion loops. one opportunity repeat one big ideas Software Carpentry: computer can repeat , programmer somewhere almost certainly built way computer repeat . Building pipeline four five stages, putting shell script re-use calling script inside loop, great opportunity show “seven plus minus two” connects programming. figured something moderately complicated, make re-usable give name takes one slot working memory rather several. also good opportunity talk exploratory programming: rather designing program front, can useful things retroactively decide worth encapsulating future re-use. everything going well, can drive home point file extensions essentially help computers (human readers) understand file content requirement files (covered briefly Navigating Files Directories). can done Pipes Filters section showing can redirect standard output file without .txt extension (e.g., lengths), resulting file still perfectly usable text file. Make point double-clicked GUI, computer probably ask want . leave many important things time constraints, including file permissions, job control, SSH. learners already understand basic material, can covered instead using online lessons guidelines. limitations also follow-consequences: ’s hard discuss #! (shebang) without first discussing permissions, don’t . #! also pretty complicated, even discuss permissions, probably still wouldn’t want discuss #!. Installing Bash reasonable set Unix commands Windows always involves fiddling frustration. Please see latest set installation guidelines advice, try teaching class. default, may long string information attached command prompt Git Bash. reduce “noise” proceed tidier prompt, enter command: Windows machines nano hasn’t properly installed Software Carpentry Windows Installer possible use notepad alternative. GUI interface line endings treated differently, otherwise, purposes lesson, notepad nano can used almost interchangeably. Windows, appears : always put someone desktop (unless machine backed using enterprise OneDrive, see next point). create example directory shell exercises can find easily watch evolve. Windows machine backed enterprise OneDrive, GUI desktop may rendered folder within OneDrive, match contents ~/Desktop. OneDrive desktop accessible using one following commands (name enterprise isn’t clear, look output ls find right folder): One way spot computer using kind configuration look files, folders links desktop. Usually icon contains shortcut/arrow symbol link, just plain icon file just saved Desktop folder. Files synced OneDrive contain additional symbol indicating sync status (typically blue arrows ‘sync pending’ green tick ‘synced’). Stay within POSIX-compliant commands, teaching materials . particular shell may extensions beyond POSIX available machines, especially default macOS bash Windows bash emulators. example, POSIX ls --ignore= -option, POSIX head takes -n 10 -10, long form --lines=10.","code":"PS1='$ ' $ cd $ cd Desktop $ cd \"~/OneDrive - Name Of Enterprise/Desktop\" $ cd \"C:/Users/Username/OneDrive - Name Of Enterprise/Desktop\""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/instructor-notes.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Installing Bash reasonable set Unix commands Windows always involves fiddling frustration. Please see latest set installation guidelines advice, try teaching class. Options explored include: msysGit (also called “Git Bash”), Cygwin, using desktop virtual machine, learners connect remote Unix machine (typically VM cloud). Cygwin preferred option mid-2013, started teaching Git, msysGit proved work better. Desktop virtual machines cloud-based VMs work well technically sophisticated learners, can reduce installation configuration start workshop, : don’t work well underpowered machines, ’re confusing novices (simple things like copy paste work differently), learners leave workshop without working environment operating system choice, learners may show without downloaded VM wireless go (become congested) lesson. Whatever use, please test Windows machine workshop: things may always changed behind back since last workshop. please also make use Software Carpentry Windows Installer.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/instructor-notes.html","id":"02-filedir-headingInstructor1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Introducing navigating filesystem shell (covered Navigating Files Directories section) can confusing. may terminal GUI file explorer open side side learners can see content file structure ’re using terminal navigate system. Learners can sometimes get trapped within command-line text editors Vim, Emacs, Nano. Closing terminal emulator opening new one can frustrating learners navigate correct folder . recommendation mitigate problem instructors use text editor learners workshops (cases Nano).","code":""},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/instructor/instructor-notes.html","id":"02-filedir-headingInstructor1","dir":"Instructor","previous_headings":"","what":"Instructor Note","title":null,"text":"Introducing navigating filesystem shell (covered Navigating Files Directories section) can confusing. may terminal GUI file explorer open side side learners can see content file structure ’re using terminal navigate system.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/instructor-notes.html","id":"03-create-headingInstructor1","dir":"Instructor","previous_headings":"","what":"Instructor Note","title":null,"text":"Learners can sometimes get trapped within command-line text editors Vim, Emacs, Nano. Closing terminal emulator opening new one can frustrating learners navigate correct folder . recommendation mitigate problem instructors use text editor learners workshops (cases Nano).","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/instructor/reference.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"following overview standard Unix filesystem. exact hierarchy depends platform. file/directory structure may differ slightly:","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/reference.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"absolute path path refers particular location file system. Absolute paths usually written respect file system’s root directory, begin either “/” (Unix) “\\” (Microsoft Windows). See also: relative path. argument value given function program runs. term often used interchangeably (inconsistently) parameter. command shell See shell command-line interface user interface based typing commands, usually REPL. See also: graphical user interface. comment remark program intended help human readers understand going , ignored computer. Comments Python, R, Unix shell start # character run end line; comments SQL start --, languages conventions. current working directory directory relative paths calculated ; equivalently, place files referenced name searched . Every process current working directory. current working directory usually referred using shorthand notation . (pronounced “dot”). file system set files, directories, /O devices (keyboards screens). file system may spread across many physical devices, many file systems may stored single physical device; operating system manages access. filename extension portion file’s name comes final “.” character. convention identifies file’s type: .txt means “text file”, .png means “Portable Network Graphics file”, . conventions enforced operating systems: perfectly possible (confusing!) name MP3 sound file homepage.html. Since many applications use filename extensions identify MIME type file, misnaming files may cause applications fail. filter program transforms stream data. Many Unix command-line tools written filters: read data standard input, process , write result standard output. loop loop executed value kind set, list, range. See also: loop. graphical user interface user interface based selecting items actions graphical display, usually controlled using mouse. See also: command-line interface. home directory default directory associated account computer system. convention, user’s files stored home directory. loop set instructions executed multiple times. Consists loop body (usually) condition exiting loop. See also loop loop. loop body set statements commands repeated inside loop loop. MIME type MIME (Multi-Purpose Internet Mail Extensions) types describe different file types exchange Internet, example, images, audio, documents. operating system Software manages interactions users, hardware, software processes. Common examples Linux, macOS, Windows. option way specify argument setting command-line program. convention Unix applications use dash followed single letter, -v, two dashes followed word, --verbose, DOS applications use slash, /V. Depending application, option may followed single argument, -o /tmp/output.txt. parameter variable named function’s declaration used hold value passed call. term often used interchangeably (inconsistently) argument. parent directory directory “contains” one question. Every directory file system except root directory parent. directory’s parent usually referred using shorthand notation .. (pronounced “dot dot”). path description specifies location file directory within file system. See also: absolute path, relative path. pipe connection output one program input another. two programs connected way, called “pipeline”. process running instance program, containing code, variable values, open files network connections, . Processes “actors” operating system manages; typically runs process milliseconds time give impression executing simultaneously. prompt character characters display REPL show waiting next command. quoting (shell): Using quotation marks various kinds prevent shell interpreting special characters. example, pass string *.txt program, usually necessary write '*.txt' (single quotes) shell try expand * wildcard. read-evaluate-print loop (REPL): command-line interface reads command user, executes , prints result, waits another command. redirect send command’s output file rather screen another command, equivalently read command’s input file. regular expression pattern specifies set character strings. REs often used find sequences characters strings. relative path path specifies location file directory respect current working directory. path begin separator character (“/” “\\”) relative path. See also: absolute path. root directory top-directory file system. name “/” Unix (including Linux macOS) “\\” Microsoft Windows. shell command-line interface Bash (Bourne-Shell) Microsoft Windows DOS shell allows user interact operating system. shell script set shell commands stored file re-use. shell script program executed shell; name “script” used historical reasons. standard input process’s default input stream. interactive command-line applications, typically connected keyboard; pipe, receives data standard output preceding process. standard output process’s default output stream. interactive command-line applications, data sent standard output displayed screen; pipe, passed standard input next process. sub-directory directory contained within another directory. tab completion feature provided many interactive systems pressing Tab key triggers automatic completion current word command. variable name program associated value collection values. loop loop keeps executing long condition true. See also: loop. wildcard character used pattern matching. Unix shell, wildcard * matches zero characters, *.txt matches files whose names end .txt.","code":""},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/instructor/reference.html","id":"opening-a-terminal","dir":"Instructor","previous_headings":"","what":"Opening a terminal","title":null,"text":"Use Terminal Mac Git Windows Install Bash shell command-line tool Windows 10 Install Use Linux Bash Shell Windows 10 Using Windows 10 Bash Shell Using UNIX/Linux emulator (Cygwin) Secure Shell (SSH) client (Putty)","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/reference.html","id":"manuals","dir":"Instructor","previous_headings":"","what":"Manuals","title":null,"text":"GNU manuals Core GNU utilities","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor/reference.html","id":"miscellaneous","dir":"Instructor","previous_headings":"","what":"Miscellaneous","title":null,"text":"North Pacific Gyre Great Pacific Garbage Patch ‘Ensuring longevity digital information’ Jeff Rothenberg Computer error haikus name files nicely, Jenny Bryan","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor-notes.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Many people questioned whether still teach shell. , anyone wants rename several thousand data files can easily interactively Python interpreter, anyone ’s serious data analysis probably going work inside IPython Notebook R Studio. teach shell? first answer , “much else depends .” Installing software, configuring default editor, controlling remote machines frequently assume basic familiarity shell, related ideas like standard input output. Many tools also use terminology (example, %ls %cd magic commands IPython). second answer , “’s easy way introduce fundamental ideas use computers.” teach people use Unix shell, teach get computer repeat things (via tab completion, ! followed command number, loops) rather repeating things . also teach take things ’ve discovered frequently save later re-use (via shell scripts), give things sensible names, write little bit documentation (like comment top shell scripts) make future selves’ lives better. third answer , “enables use many domain-specific tools compute resources researchers access otherwise.” Familiarity shell useful remote accessing machines, using high-performance computing infrastructure, running new specialist tools many disciplines. teach HPC domain-specific skills lay groundwork development skills. particular, understanding syntax commands, flags, help systems useful domain specific tools understanding file system (navigate ) useful remote access. Finally, perhaps importantly, teaching people shell lets us teach think programming terms function composition. case shell, takes form pipelines rather nested function calls, core idea “small pieces, loosely joined” . material can covered three hours long learners using Windows run roadblocks : able figure home directory (particularly ’re using Cygwin); able run plain text editor; shell refusing run scripts include DOS line endings.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor-notes.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Use data directory -workshop exercises live coding examples. can clone shell-novice directory use Download ZIP button right get entire Git repository. also now provide zip file data directory Setup page. Website: various practices used. Option 1: Can give links learners lesson can follow along, catch , see exercises (particularly ’re following lesson content without many changes). Option 2: Don’t show website learners lesson, can distracting: students may read instead listen, another window open additional cognitive load. case, make sure point website post-workshop reference. Content: Unless truly generous amount time (4+ hours), likely cover material lesson single half-day session. Plan ahead might skip, really want emphasize, etc. Exercises: Think advance might want handle exercises lesson. assigning (website, slide, handout)? want everyone try show solution? learner show solution? groups different exercise present solutions? Reference page can printed given students reference, choice. preparation: Feel free add examples side comments, know shouldn’t necessary: topics commands can taught given lesson pages. think place lesson lacking, feel free file issue submit pull request.","code":""},{"path":"https://ErinBecker.github.io/shell-novice/instructor-notes.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Super cool online resource! http://explainshell.com/ dissect shell command type display help text piece. Additional nice manual tool http://tldr.sh/ short descriptive manuals shell commands, useful especially Windows using Git BASH man work. Another super cool online resource http://www.shellcheck.net, check shell scripts (uploaded typed ) common errors. Resources “splitting” shell recent commands remain view: https://github.com/rgaiacs/swc-shell-split-window. Tab completion sounds like small thing: isn’t. Re-running old commands using !123 !wc isn’t small thing either, neither wildcard expansion loops. one opportunity repeat one big ideas Software Carpentry: computer can repeat , programmer somewhere almost certainly built way computer repeat . Building pipeline four five stages, putting shell script re-use calling script inside loop, great opportunity show “seven plus minus two” connects programming. figured something moderately complicated, make re-usable give name takes one slot working memory rather several. also good opportunity talk exploratory programming: rather designing program front, can useful things retroactively decide worth encapsulating future re-use. everything going well, can drive home point file extensions essentially help computers (human readers) understand file content requirement files (covered briefly Navigating Files Directories). can done Pipes Filters section showing can redirect standard output file without .txt extension (e.g., lengths), resulting file still perfectly usable text file. Make point double-clicked GUI, computer probably ask want . leave many important things time constraints, including file permissions, job control, SSH. learners already understand basic material, can covered instead using online lessons guidelines. limitations also follow-consequences: ’s hard discuss #! (shebang) without first discussing permissions, don’t . #! also pretty complicated, even discuss permissions, probably still wouldn’t want discuss #!. Installing Bash reasonable set Unix commands Windows always involves fiddling frustration. Please see latest set installation guidelines advice, try teaching class. default, may long string information attached command prompt Git Bash. reduce “noise” proceed tidier prompt, enter command: Windows machines nano hasn’t properly installed Software Carpentry Windows Installer possible use notepad alternative. GUI interface line endings treated differently, otherwise, purposes lesson, notepad nano can used almost interchangeably. Windows, appears : always put someone desktop (unless machine backed using enterprise OneDrive, see next point). create example directory shell exercises can find easily watch evolve. Windows machine backed enterprise OneDrive, GUI desktop may rendered folder within OneDrive, match contents ~/Desktop. OneDrive desktop accessible using one following commands (name enterprise isn’t clear, look output ls find right folder): One way spot computer using kind configuration look files, folders links desktop. Usually icon contains shortcut/arrow symbol link, just plain icon file just saved Desktop folder. Files synced OneDrive contain additional symbol indicating sync status (typically blue arrows ‘sync pending’ green tick ‘synced’). Stay within POSIX-compliant commands, teaching materials . particular shell may extensions beyond POSIX available machines, especially default macOS bash Windows bash emulators. example, POSIX ls --ignore= -option, POSIX head takes -n 10 -10, long form --lines=10.","code":"PS1='$ ' $ cd $ cd Desktop $ cd \"~/OneDrive - Name Of Enterprise/Desktop\" $ cd \"C:/Users/Username/OneDrive - Name Of Enterprise/Desktop\""},{"path":"https://ErinBecker.github.io/shell-novice/instructor-notes.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Installing Bash reasonable set Unix commands Windows always involves fiddling frustration. Please see latest set installation guidelines advice, try teaching class. Options explored include: msysGit (also called “Git Bash”), Cygwin, using desktop virtual machine, learners connect remote Unix machine (typically VM cloud). Cygwin preferred option mid-2013, started teaching Git, msysGit proved work better. Desktop virtual machines cloud-based VMs work well technically sophisticated learners, can reduce installation configuration start workshop, : don’t work well underpowered machines, ’re confusing novices (simple things like copy paste work differently), learners leave workshop without working environment operating system choice, learners may show without downloaded VM wireless go (become congested) lesson. Whatever use, please test Windows machine workshop: things may always changed behind back since last workshop. please also make use Software Carpentry Windows Installer.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/reference.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"following overview standard Unix filesystem. exact hierarchy depends platform. file/directory structure may differ slightly:","code":""},{"path":"https://ErinBecker.github.io/shell-novice/reference.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"absolute path path refers particular location file system. Absolute paths usually written respect file system’s root directory, begin either “/” (Unix) “\\” (Microsoft Windows). See also: relative path. argument value given function program runs. term often used interchangeably (inconsistently) parameter. command shell See shell command-line interface user interface based typing commands, usually REPL. See also: graphical user interface. comment remark program intended help human readers understand going , ignored computer. Comments Python, R, Unix shell start # character run end line; comments SQL start --, languages conventions. current working directory directory relative paths calculated ; equivalently, place files referenced name searched . Every process current working directory. current working directory usually referred using shorthand notation . (pronounced “dot”). file system set files, directories, /O devices (keyboards screens). file system may spread across many physical devices, many file systems may stored single physical device; operating system manages access. filename extension portion file’s name comes final “.” character. convention identifies file’s type: .txt means “text file”, .png means “Portable Network Graphics file”, . conventions enforced operating systems: perfectly possible (confusing!) name MP3 sound file homepage.html. Since many applications use filename extensions identify MIME type file, misnaming files may cause applications fail. filter program transforms stream data. Many Unix command-line tools written filters: read data standard input, process , write result standard output. loop loop executed value kind set, list, range. See also: loop. graphical user interface user interface based selecting items actions graphical display, usually controlled using mouse. See also: command-line interface. home directory default directory associated account computer system. convention, user’s files stored home directory. loop set instructions executed multiple times. Consists loop body (usually) condition exiting loop. See also loop loop. loop body set statements commands repeated inside loop loop. MIME type MIME (Multi-Purpose Internet Mail Extensions) types describe different file types exchange Internet, example, images, audio, documents. operating system Software manages interactions users, hardware, software processes. Common examples Linux, macOS, Windows. option way specify argument setting command-line program. convention Unix applications use dash followed single letter, -v, two dashes followed word, --verbose, DOS applications use slash, /V. Depending application, option may followed single argument, -o /tmp/output.txt. parameter variable named function’s declaration used hold value passed call. term often used interchangeably (inconsistently) argument. parent directory directory “contains” one question. Every directory file system except root directory parent. directory’s parent usually referred using shorthand notation .. (pronounced “dot dot”). path description specifies location file directory within file system. See also: absolute path, relative path. pipe connection output one program input another. two programs connected way, called “pipeline”. process running instance program, containing code, variable values, open files network connections, . Processes “actors” operating system manages; typically runs process milliseconds time give impression executing simultaneously. prompt character characters display REPL show waiting next command. quoting (shell): Using quotation marks various kinds prevent shell interpreting special characters. example, pass string *.txt program, usually necessary write '*.txt' (single quotes) shell try expand * wildcard. read-evaluate-print loop (REPL): command-line interface reads command user, executes , prints result, waits another command. redirect send command’s output file rather screen another command, equivalently read command’s input file. regular expression pattern specifies set character strings. REs often used find sequences characters strings. relative path path specifies location file directory respect current working directory. path begin separator character (“/” “\\”) relative path. See also: absolute path. root directory top-directory file system. name “/” Unix (including Linux macOS) “\\” Microsoft Windows. shell command-line interface Bash (Bourne-Shell) Microsoft Windows DOS shell allows user interact operating system. shell script set shell commands stored file re-use. shell script program executed shell; name “script” used historical reasons. standard input process’s default input stream. interactive command-line applications, typically connected keyboard; pipe, receives data standard output preceding process. standard output process’s default output stream. interactive command-line applications, data sent standard output displayed screen; pipe, passed standard input next process. sub-directory directory contained within another directory. tab completion feature provided many interactive systems pressing Tab key triggers automatic completion current word command. variable name program associated value collection values. loop loop keeps executing long condition true. See also: loop. wildcard character used pattern matching. Unix shell, wildcard * matches zero characters, *.txt matches files whose names end .txt.","code":""},{"path":[]},{"path":"https://ErinBecker.github.io/shell-novice/reference.html","id":"opening-a-terminal","dir":"","previous_headings":"","what":"Opening a terminal","title":null,"text":"Use Terminal Mac Git Windows Install Bash shell command-line tool Windows 10 Install Use Linux Bash Shell Windows 10 Using Windows 10 Bash Shell Using UNIX/Linux emulator (Cygwin) Secure Shell (SSH) client (Putty)","code":""},{"path":"https://ErinBecker.github.io/shell-novice/reference.html","id":"manuals","dir":"","previous_headings":"","what":"Manuals","title":null,"text":"GNU manuals Core GNU utilities","code":""},{"path":"https://ErinBecker.github.io/shell-novice/reference.html","id":"miscellaneous","dir":"","previous_headings":"","what":"Miscellaneous","title":null,"text":"North Pacific Gyre Great Pacific Garbage Patch ‘Ensuring longevity digital information’ Jeff Rothenberg Computer error haikus name files nicely, Jenny Bryan","code":""}]
